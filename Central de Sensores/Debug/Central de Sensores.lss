
Central de Sensores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  000029f6  00002a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  008002bc  008002bc  00002c46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eb0  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a40  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a0  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00007cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f9  00000000  00000000  0000813c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f27  00000000  00000000  00008835  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a75c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <dhtRead+0xac>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e6 ef       	ldi	r30, 0xF6	; 246
      fe:	f9 e2       	ldi	r31, 0x29	; 41
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ac 3b       	cpi	r26, 0xBC	; 188
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	ac eb       	ldi	r26, 0xBC	; 188
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 3e       	cpi	r26, 0xE5	; 229
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <main>
     120:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <i2cInit>:
*************************************************************************/
unsigned char i2cRepStart(unsigned char address)
{
    return i2cStart( address );

}/* i2cRepStart */
     128:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     12c:	88 e4       	ldi	r24, 0x48	; 72
     12e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     132:	88 e6       	ldi	r24, 0x68	; 104
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
     13a:	08 95       	ret

0000013c <i2cStart>:
     13c:	94 ea       	ldi	r25, 0xA4	; 164
     13e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     142:	ec eb       	ldi	r30, 0xBC	; 188
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	90 81       	ld	r25, Z
     148:	99 23       	and	r25, r25
     14a:	ec f7       	brge	.-6      	; 0x146 <i2cStart+0xa>
     14c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     150:	98 7f       	andi	r25, 0xF8	; 248
     152:	98 30       	cpi	r25, 0x08	; 8
     154:	11 f0       	breq	.+4      	; 0x15a <i2cStart+0x1e>
     156:	90 31       	cpi	r25, 0x10	; 16
     158:	a1 f4       	brne	.+40     	; 0x182 <i2cStart+0x46>
     15a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     15e:	84 e8       	ldi	r24, 0x84	; 132
     160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     164:	ec eb       	ldi	r30, 0xBC	; 188
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	88 23       	and	r24, r24
     16c:	ec f7       	brge	.-6      	; 0x168 <i2cStart+0x2c>
     16e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     172:	98 7f       	andi	r25, 0xF8	; 248
     174:	98 31       	cpi	r25, 0x18	; 24
     176:	39 f0       	breq	.+14     	; 0x186 <i2cStart+0x4a>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 34       	cpi	r25, 0x40	; 64
     17c:	29 f4       	brne	.+10     	; 0x188 <i2cStart+0x4c>
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	08 95       	ret
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	08 95       	ret
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 95       	ret

0000018a <i2cStop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2cStop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     18a:	84 e9       	ldi	r24, 0x94	; 148
     18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     190:	ec eb       	ldi	r30, 0xBC	; 188
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	84 fd       	sbrc	r24, 4
     198:	fd cf       	rjmp	.-6      	; 0x194 <i2cStop+0xa>

}/* i2cStop */
     19a:	08 95       	ret

0000019c <i2cWrite>:
unsigned char i2cWrite( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     19c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     1a0:	84 e8       	ldi	r24, 0x84	; 132
     1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1a6:	ec eb       	ldi	r30, 0xBC	; 188
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	88 23       	and	r24, r24
     1ae:	ec f7       	brge	.-6      	; 0x1aa <i2cWrite+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1b4:	98 7f       	andi	r25, 0xF8	; 248
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	98 32       	cpi	r25, 0x28	; 40
     1ba:	09 f4       	brne	.+2      	; 0x1be <i2cWrite+0x22>
     1bc:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2cWrite */
     1be:	08 95       	ret

000001c0 <i2cReadAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2cReadAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     1c0:	84 ec       	ldi	r24, 0xC4	; 196
     1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
     1c6:	ec eb       	ldi	r30, 0xBC	; 188
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	88 23       	and	r24, r24
     1ce:	ec f7       	brge	.-6      	; 0x1ca <i2cReadAck+0xa>

    return TWDR;
     1d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2cReadAck */
     1d4:	08 95       	ret

000001d6 <i2cReadNack>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2cReadNack(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1d6:	84 e8       	ldi	r24, 0x84	; 132
     1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1dc:	ec eb       	ldi	r30, 0xBC	; 188
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	88 23       	and	r24, r24
     1e4:	ec f7       	brge	.-6      	; 0x1e0 <i2cReadNack+0xa>
	
    return TWDR;
     1e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2cReadNack */
     1ea:	08 95       	ret

000001ec <serialStart>:
	return TP;
}

uint8_t checkSum(){
	return SUM;
}
     1ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     1f0:	87 e6       	ldi	r24, 0x67	; 103
     1f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     1f6:	e1 ec       	ldi	r30, 0xC1	; 193
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 68       	ori	r24, 0x80	; 128
     1fe:	80 83       	st	Z, r24
     200:	80 81       	ld	r24, Z
     202:	88 61       	ori	r24, 0x18	; 24
     204:	80 83       	st	Z, r24
     206:	e2 ec       	ldi	r30, 0xC2	; 194
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	86 60       	ori	r24, 0x06	; 6
     20e:	80 83       	st	Z, r24
     210:	08 95       	ret

00000212 <serialSend>:
     212:	e0 ec       	ldi	r30, 0xC0	; 192
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	95 ff       	sbrs	r25, 5
     21a:	fd cf       	rjmp	.-6      	; 0x216 <serialSend+0x4>
     21c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     220:	08 95       	ret

00000222 <serialString>:
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	59 f0       	breq	.+22     	; 0x246 <serialString+0x24>
     230:	8f 01       	movw	r16, r30
     232:	c0 e0       	ldi	r28, 0x00	; 0
     234:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
     238:	cf 5f       	subi	r28, 0xFF	; 255
     23a:	f8 01       	movw	r30, r16
     23c:	ec 0f       	add	r30, r28
     23e:	f1 1d       	adc	r31, r1
     240:	80 81       	ld	r24, Z
     242:	81 11       	cpse	r24, r1
     244:	f7 cf       	rjmp	.-18     	; 0x234 <serialString+0x12>
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <serialStringLN>:
     24e:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
     252:	8d e0       	ldi	r24, 0x0D	; 13
     254:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
     25e:	08 95       	ret

00000260 <serialSendInt>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	2a 97       	sbiw	r28, 0x0a	; 10
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	12 2f       	mov	r17, r18
     278:	4a 30       	cpi	r20, 0x0A	; 10
     27a:	29 f0       	breq	.+10     	; 0x286 <serialSendInt+0x26>
     27c:	40 31       	cpi	r20, 0x10	; 16
     27e:	59 f1       	breq	.+86     	; 0x2d6 <serialSendInt+0x76>
     280:	48 30       	cpi	r20, 0x08	; 8
     282:	e1 f5       	brne	.+120    	; 0x2fc <serialSendInt+0x9c>
     284:	14 c0       	rjmp	.+40     	; 0x2ae <serialSendInt+0x4e>
     286:	9f 93       	push	r25
     288:	8f 93       	push	r24
     28a:	7f 93       	push	r23
     28c:	6f 93       	push	r22
     28e:	8a e7       	ldi	r24, 0x7A	; 122
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	9f 93       	push	r25
     294:	8f 93       	push	r24
     296:	ce 01       	movw	r24, r28
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	9f 93       	push	r25
     29c:	8f 93       	push	r24
     29e:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <serialSendInt+0x9c>
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	7f 93       	push	r23
     2b4:	6f 93       	push	r22
     2b6:	8e e7       	ldi	r24, 0x7E	; 126
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	ce 01       	movw	r24, r28
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	13 c0       	rjmp	.+38     	; 0x2fc <serialSendInt+0x9c>
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	7f 93       	push	r23
     2dc:	6f 93       	push	r22
     2de:	84 e8       	ldi	r24, 0x84	; 132
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	ce 01       	movw	r24, r28
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	11 23       	and	r17, r17
     2fe:	29 f0       	breq	.+10     	; 0x30a <serialSendInt+0xaa>
     300:	ce 01       	movw	r24, r28
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
     308:	04 c0       	rjmp	.+8      	; 0x312 <serialSendInt+0xb2>
     30a:	ce 01       	movw	r24, r28
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
     312:	2a 96       	adiw	r28, 0x0a	; 10
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	08 95       	ret

00000326 <wiz5200Write>:
     326:	2a 98       	cbi	0x05, 2	; 5
     328:	9e bd       	out	0x2e, r25	; 46
     32a:	0d b4       	in	r0, 0x2d	; 45
     32c:	07 fe       	sbrs	r0, 7
     32e:	fd cf       	rjmp	.-6      	; 0x32a <wiz5200Write+0x4>
     330:	9e b5       	in	r25, 0x2e	; 46
     332:	8e bd       	out	0x2e, r24	; 46
     334:	0d b4       	in	r0, 0x2d	; 45
     336:	07 fe       	sbrs	r0, 7
     338:	fd cf       	rjmp	.-6      	; 0x334 <wiz5200Write+0xe>
     33a:	8e b5       	in	r24, 0x2e	; 46
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	8e bd       	out	0x2e, r24	; 46
     340:	0d b4       	in	r0, 0x2d	; 45
     342:	07 fe       	sbrs	r0, 7
     344:	fd cf       	rjmp	.-6      	; 0x340 <wiz5200Write+0x1a>
     346:	8e b5       	in	r24, 0x2e	; 46
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8e bd       	out	0x2e, r24	; 46
     34c:	0d b4       	in	r0, 0x2d	; 45
     34e:	07 fe       	sbrs	r0, 7
     350:	fd cf       	rjmp	.-6      	; 0x34c <wiz5200Write+0x26>
     352:	8e b5       	in	r24, 0x2e	; 46
     354:	6e bd       	out	0x2e, r22	; 46
     356:	0d b4       	in	r0, 0x2d	; 45
     358:	07 fe       	sbrs	r0, 7
     35a:	fd cf       	rjmp	.-6      	; 0x356 <wiz5200Write+0x30>
     35c:	8e b5       	in	r24, 0x2e	; 46
     35e:	2a 9a       	sbi	0x05, 2	; 5
     360:	08 95       	ret

00000362 <wiz5200Read>:
     362:	2a 98       	cbi	0x05, 2	; 5
     364:	9e bd       	out	0x2e, r25	; 46
     366:	0d b4       	in	r0, 0x2d	; 45
     368:	07 fe       	sbrs	r0, 7
     36a:	fd cf       	rjmp	.-6      	; 0x366 <wiz5200Read+0x4>
     36c:	9e b5       	in	r25, 0x2e	; 46
     36e:	8e bd       	out	0x2e, r24	; 46
     370:	0d b4       	in	r0, 0x2d	; 45
     372:	07 fe       	sbrs	r0, 7
     374:	fd cf       	rjmp	.-6      	; 0x370 <wiz5200Read+0xe>
     376:	8e b5       	in	r24, 0x2e	; 46
     378:	1e bc       	out	0x2e, r1	; 46
     37a:	0d b4       	in	r0, 0x2d	; 45
     37c:	07 fe       	sbrs	r0, 7
     37e:	fd cf       	rjmp	.-6      	; 0x37a <wiz5200Read+0x18>
     380:	8e b5       	in	r24, 0x2e	; 46
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	8e bd       	out	0x2e, r24	; 46
     386:	0d b4       	in	r0, 0x2d	; 45
     388:	07 fe       	sbrs	r0, 7
     38a:	fd cf       	rjmp	.-6      	; 0x386 <wiz5200Read+0x24>
     38c:	8e b5       	in	r24, 0x2e	; 46
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	8e bd       	out	0x2e, r24	; 46
     392:	0d b4       	in	r0, 0x2d	; 45
     394:	07 fe       	sbrs	r0, 7
     396:	fd cf       	rjmp	.-6      	; 0x392 <wiz5200Read+0x30>
     398:	8e b5       	in	r24, 0x2e	; 46
     39a:	2a 9a       	sbi	0x05, 2	; 5
     39c:	08 95       	ret

0000039e <wiz5200Init>:
     39e:	af 92       	push	r10
     3a0:	bf 92       	push	r11
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	c8 2e       	mov	r12, r24
     3b4:	d9 2e       	mov	r13, r25
     3b6:	d6 2f       	mov	r29, r22
     3b8:	c7 2f       	mov	r28, r23
     3ba:	a4 2e       	mov	r10, r20
     3bc:	b5 2e       	mov	r11, r21
     3be:	e2 2e       	mov	r14, r18
     3c0:	f3 2e       	mov	r15, r19
     3c2:	60 e8       	ldi	r22, 0x80	; 128
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     3cc:	0d 2f       	mov	r16, r29
     3ce:	1c 2f       	mov	r17, r28
     3d0:	c9 e0       	ldi	r28, 0x09	; 9
     3d2:	d0 e0       	ldi	r29, 0x00	; 0
     3d4:	f8 01       	movw	r30, r16
     3d6:	61 91       	ld	r22, Z+
     3d8:	8f 01       	movw	r16, r30
     3da:	ce 01       	movw	r24, r28
     3dc:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     3e0:	21 96       	adiw	r28, 0x01	; 1
     3e2:	cf 30       	cpi	r28, 0x0F	; 15
     3e4:	d1 05       	cpc	r29, r1
     3e6:	b1 f7       	brne	.-20     	; 0x3d4 <wiz5200Init+0x36>
     3e8:	0c 2d       	mov	r16, r12
     3ea:	1d 2d       	mov	r17, r13
     3ec:	f8 01       	movw	r30, r16
     3ee:	61 91       	ld	r22, Z+
     3f0:	8f 01       	movw	r16, r30
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     3f8:	21 96       	adiw	r28, 0x01	; 1
     3fa:	c3 31       	cpi	r28, 0x13	; 19
     3fc:	d1 05       	cpc	r29, r1
     3fe:	b1 f7       	brne	.-20     	; 0x3ec <wiz5200Init+0x4e>
     400:	0a 2d       	mov	r16, r10
     402:	1b 2d       	mov	r17, r11
     404:	c0 e0       	ldi	r28, 0x00	; 0
     406:	d0 e0       	ldi	r29, 0x00	; 0
     408:	f8 01       	movw	r30, r16
     40a:	61 91       	ld	r22, Z+
     40c:	8f 01       	movw	r16, r30
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	ce 01       	movw	r24, r28
     412:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     416:	c4 30       	cpi	r28, 0x04	; 4
     418:	d1 05       	cpc	r29, r1
     41a:	b1 f7       	brne	.-20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     41c:	0e 2d       	mov	r16, r14
     41e:	1f 2d       	mov	r17, r15
     420:	c5 e0       	ldi	r28, 0x05	; 5
     422:	d0 e0       	ldi	r29, 0x00	; 0
     424:	f8 01       	movw	r30, r16
     426:	61 91       	ld	r22, Z+
     428:	8f 01       	movw	r16, r30
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     430:	21 96       	adiw	r28, 0x01	; 1
     432:	c9 30       	cpi	r28, 0x09	; 9
     434:	d1 05       	cpc	r29, r1
     436:	b1 f7       	brne	.-20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 ec       	ldi	r25, 0xC0	; 192
     43e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     442:	65 e0       	ldi	r22, 0x05	; 5
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e8       	ldi	r25, 0x80	; 128
     448:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	08 95       	ret

00000464 <close>:
     464:	60 e1       	ldi	r22, 0x10	; 16
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e4       	ldi	r25, 0x40	; 64
     46a:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e4       	ldi	r25, 0x40	; 64
     472:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     476:	81 11       	cpse	r24, r1
     478:	fa cf       	rjmp	.-12     	; 0x46e <close+0xa>
     47a:	08 95       	ret

0000047c <disconnect>:
     47c:	68 e0       	ldi	r22, 0x08	; 8
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e4       	ldi	r25, 0x40	; 64
     482:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e4       	ldi	r25, 0x40	; 64
     48a:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     48e:	81 11       	cpse	r24, r1
     490:	fa cf       	rjmp	.-12     	; 0x486 <disconnect+0xa>
     492:	08 95       	ret

00000494 <listen>:
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e4       	ldi	r25, 0x40	; 64
     498:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     49c:	83 31       	cpi	r24, 0x13	; 19
     49e:	a9 f4       	brne	.+42     	; 0x4ca <listen+0x36>
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e4       	ldi	r25, 0x40	; 64
     4a6:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e4       	ldi	r25, 0x40	; 64
     4ae:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     4b2:	81 11       	cpse	r24, r1
     4b4:	fa cf       	rjmp	.-12     	; 0x4aa <listen+0x16>
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	90 e4       	ldi	r25, 0x40	; 64
     4ba:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     4be:	84 31       	cpi	r24, 0x14	; 20
     4c0:	31 f0       	breq	.+12     	; 0x4ce <listen+0x3a>
     4c2:	0e 94 32 02 	call	0x464	; 0x464 <close>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	08 95       	ret
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	08 95       	ret
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	08 95       	ret

000004d2 <send>:
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	7c 01       	movw	r14, r24
     4e8:	8b 01       	movw	r16, r22
     4ea:	67 2b       	or	r22, r23
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <send+0x1e>
     4ee:	5c c0       	rjmp	.+184    	; 0x5a8 <send+0xd6>
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	90 e4       	ldi	r25, 0x40	; 64
     4f4:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     4f8:	c8 2f       	mov	r28, r24
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
     4fc:	dc 2f       	mov	r29, r28
     4fe:	cc 27       	eor	r28, r28
     500:	81 e2       	ldi	r24, 0x21	; 33
     502:	90 e4       	ldi	r25, 0x40	; 64
     504:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     508:	c8 0f       	add	r28, r24
     50a:	d1 1d       	adc	r29, r1
     50c:	c0 17       	cp	r28, r16
     50e:	d1 07       	cpc	r29, r17
     510:	08 f4       	brcc	.+2      	; 0x514 <send+0x42>
     512:	5e c0       	rjmp	.+188    	; 0x5d0 <send+0xfe>
     514:	4c c0       	rjmp	.+152    	; 0x5ae <send+0xdc>
     516:	8f e9       	ldi	r24, 0x9F	; 159
     518:	9f e0       	ldi	r25, 0x0F	; 15
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <send+0x48>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <send+0x4e>
     520:	00 00       	nop
     522:	80 e2       	ldi	r24, 0x20	; 32
     524:	90 e4       	ldi	r25, 0x40	; 64
     526:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	d8 2f       	mov	r29, r24
     52e:	cc 27       	eor	r28, r28
     530:	81 e2       	ldi	r24, 0x21	; 33
     532:	90 e4       	ldi	r25, 0x40	; 64
     534:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     538:	fe 01       	movw	r30, r28
     53a:	e8 0f       	add	r30, r24
     53c:	f1 1d       	adc	r31, r1
     53e:	cf 01       	movw	r24, r30
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	cf 1a       	sub	r12, r31
     544:	d1 08       	sbc	r13, r1
     546:	19 f4       	brne	.+6      	; 0x54e <send+0x7c>
     548:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
     54c:	5d c0       	rjmp	.+186    	; 0x608 <send+0x136>
     54e:	80 17       	cp	r24, r16
     550:	91 07       	cpc	r25, r17
     552:	08 f3       	brcs	.-62     	; 0x516 <send+0x44>
     554:	2c c0       	rjmp	.+88     	; 0x5ae <send+0xdc>
     556:	21 97       	sbiw	r28, 0x01	; 1
     558:	c6 01       	movw	r24, r12
     55a:	97 70       	andi	r25, 0x07	; 7
     55c:	f7 01       	movw	r30, r14
     55e:	61 91       	ld	r22, Z+
     560:	7f 01       	movw	r14, r30
     562:	90 58       	subi	r25, 0x80	; 128
     564:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     568:	ff ef       	ldi	r31, 0xFF	; 255
     56a:	cf 1a       	sub	r12, r31
     56c:	df 0a       	sbc	r13, r31
     56e:	20 97       	sbiw	r28, 0x00	; 0
     570:	91 f7       	brne	.-28     	; 0x556 <send+0x84>
     572:	0a 0d       	add	r16, r10
     574:	1b 1d       	adc	r17, r11
     576:	61 2f       	mov	r22, r17
     578:	84 e2       	ldi	r24, 0x24	; 36
     57a:	90 e4       	ldi	r25, 0x40	; 64
     57c:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     580:	60 2f       	mov	r22, r16
     582:	85 e2       	ldi	r24, 0x25	; 37
     584:	90 e4       	ldi	r25, 0x40	; 64
     586:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     58a:	60 e2       	ldi	r22, 0x20	; 32
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e4       	ldi	r25, 0x40	; 64
     590:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e4       	ldi	r25, 0x40	; 64
     598:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     59c:	81 11       	cpse	r24, r1
     59e:	fa cf       	rjmp	.-12     	; 0x594 <send+0xc2>
     5a0:	cc 24       	eor	r12, r12
     5a2:	c3 94       	inc	r12
     5a4:	d1 2c       	mov	r13, r1
     5a6:	30 c0       	rjmp	.+96     	; 0x608 <send+0x136>
     5a8:	c1 2c       	mov	r12, r1
     5aa:	d1 2c       	mov	r13, r1
     5ac:	2d c0       	rjmp	.+90     	; 0x608 <send+0x136>
     5ae:	84 e2       	ldi	r24, 0x24	; 36
     5b0:	90 e4       	ldi	r25, 0x40	; 64
     5b2:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5b6:	a8 2e       	mov	r10, r24
     5b8:	85 e2       	ldi	r24, 0x25	; 37
     5ba:	90 e4       	ldi	r25, 0x40	; 64
     5bc:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5c0:	b1 2c       	mov	r11, r1
     5c2:	ba 2c       	mov	r11, r10
     5c4:	aa 24       	eor	r10, r10
     5c6:	a8 0e       	add	r10, r24
     5c8:	b1 1c       	adc	r11, r1
     5ca:	65 01       	movw	r12, r10
     5cc:	e8 01       	movw	r28, r16
     5ce:	c3 cf       	rjmp	.-122    	; 0x556 <send+0x84>
     5d0:	8f e9       	ldi	r24, 0x9F	; 159
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <send+0x102>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <send+0x108>
     5da:	00 00       	nop
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	90 e4       	ldi	r25, 0x40	; 64
     5e0:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	d8 2f       	mov	r29, r24
     5e8:	cc 27       	eor	r28, r28
     5ea:	81 e2       	ldi	r24, 0x21	; 33
     5ec:	90 e4       	ldi	r25, 0x40	; 64
     5ee:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5f2:	fe 01       	movw	r30, r28
     5f4:	e8 0f       	add	r30, r24
     5f6:	f1 1d       	adc	r31, r1
     5f8:	cf 01       	movw	r24, r30
     5fa:	0f 2e       	mov	r0, r31
     5fc:	f9 ee       	ldi	r31, 0xE9	; 233
     5fe:	cf 2e       	mov	r12, r31
     600:	f3 e0       	ldi	r31, 0x03	; 3
     602:	df 2e       	mov	r13, r31
     604:	f0 2d       	mov	r31, r0
     606:	a3 cf       	rjmp	.-186    	; 0x54e <send+0x7c>
     608:	c6 01       	movw	r24, r12
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	08 95       	ret

00000620 <receive>:
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	5c 01       	movw	r10, r24
     63a:	6b 01       	movw	r12, r22
     63c:	61 15       	cp	r22, r1
     63e:	71 05       	cpc	r23, r1
     640:	09 f4       	brne	.+2      	; 0x644 <receive+0x24>
     642:	44 c0       	rjmp	.+136    	; 0x6cc <receive+0xac>
     644:	61 30       	cpi	r22, 0x01	; 1
     646:	72 40       	sbci	r23, 0x02	; 2
     648:	78 f1       	brcs	.+94     	; 0x6a8 <receive+0x88>
     64a:	0f 2e       	mov	r0, r31
     64c:	fe ef       	ldi	r31, 0xFE	; 254
     64e:	cf 2e       	mov	r12, r31
     650:	dd 24       	eor	r13, r13
     652:	d3 94       	inc	r13
     654:	f0 2d       	mov	r31, r0
     656:	28 c0       	rjmp	.+80     	; 0x6a8 <receive+0x88>
     658:	21 97       	sbiw	r28, 0x01	; 1
     65a:	c4 01       	movw	r24, r8
     65c:	97 70       	andi	r25, 0x07	; 7
     65e:	90 54       	subi	r25, 0x40	; 64
     660:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     664:	f8 01       	movw	r30, r16
     666:	81 93       	st	Z+, r24
     668:	8f 01       	movw	r16, r30
     66a:	ff ef       	ldi	r31, 0xFF	; 255
     66c:	8f 1a       	sub	r8, r31
     66e:	9f 0a       	sbc	r9, r31
     670:	20 97       	sbiw	r28, 0x00	; 0
     672:	91 f7       	brne	.-28     	; 0x658 <receive+0x38>
     674:	ec 0c       	add	r14, r12
     676:	fd 1c       	adc	r15, r13
     678:	f5 01       	movw	r30, r10
     67a:	ec 0d       	add	r30, r12
     67c:	fd 1d       	adc	r31, r13
     67e:	10 82       	st	Z, r1
     680:	6f 2d       	mov	r22, r15
     682:	88 e2       	ldi	r24, 0x28	; 40
     684:	90 e4       	ldi	r25, 0x40	; 64
     686:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     68a:	6e 2d       	mov	r22, r14
     68c:	89 e2       	ldi	r24, 0x29	; 41
     68e:	90 e4       	ldi	r25, 0x40	; 64
     690:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     694:	60 e4       	ldi	r22, 0x40	; 64
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e4       	ldi	r25, 0x40	; 64
     69a:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     69e:	8a e1       	ldi	r24, 0x1A	; 26
     6a0:	8a 95       	dec	r24
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <receive+0x80>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <receive+0x86>
     6a6:	12 c0       	rjmp	.+36     	; 0x6cc <receive+0xac>
     6a8:	88 e2       	ldi	r24, 0x28	; 40
     6aa:	90 e4       	ldi	r25, 0x40	; 64
     6ac:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6b0:	e8 2e       	mov	r14, r24
     6b2:	89 e2       	ldi	r24, 0x29	; 41
     6b4:	90 e4       	ldi	r25, 0x40	; 64
     6b6:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6ba:	f1 2c       	mov	r15, r1
     6bc:	fe 2c       	mov	r15, r14
     6be:	ee 24       	eor	r14, r14
     6c0:	e8 0e       	add	r14, r24
     6c2:	f1 1c       	adc	r15, r1
     6c4:	47 01       	movw	r8, r14
     6c6:	e6 01       	movw	r28, r12
     6c8:	85 01       	movw	r16, r10
     6ca:	c6 cf       	rjmp	.-116    	; 0x658 <receive+0x38>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	bf 90       	pop	r11
     6e2:	af 90       	pop	r10
     6e4:	9f 90       	pop	r9
     6e6:	8f 90       	pop	r8
     6e8:	08 95       	ret

000006ea <receiveSize>:
     6ea:	cf 93       	push	r28
     6ec:	86 e2       	ldi	r24, 0x26	; 38
     6ee:	90 e4       	ldi	r25, 0x40	; 64
     6f0:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6f4:	c8 2f       	mov	r28, r24
     6f6:	87 e2       	ldi	r24, 0x27	; 39
     6f8:	90 e4       	ldi	r25, 0x40	; 64
     6fa:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6fe:	2c 2f       	mov	r18, r28
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	32 2f       	mov	r19, r18
     704:	22 27       	eor	r18, r18
     706:	a9 01       	movw	r20, r18
     708:	48 0f       	add	r20, r24
     70a:	51 1d       	adc	r21, r1
     70c:	ca 01       	movw	r24, r20
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <connect>:
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	f6 2e       	mov	r15, r22
     722:	e7 2e       	mov	r14, r23
     724:	d4 2e       	mov	r13, r20
     726:	c5 2e       	mov	r12, r21
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e4       	ldi	r25, 0x40	; 64
     72e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     732:	6c 2d       	mov	r22, r12
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	90 e4       	ldi	r25, 0x40	; 64
     738:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     73c:	6d 2d       	mov	r22, r13
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	90 e4       	ldi	r25, 0x40	; 64
     742:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     746:	68 81       	ld	r22, Y
     748:	8c e0       	ldi	r24, 0x0C	; 12
     74a:	90 e4       	ldi	r25, 0x40	; 64
     74c:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	8d e0       	ldi	r24, 0x0D	; 13
     754:	90 e4       	ldi	r25, 0x40	; 64
     756:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     75a:	6a 81       	ldd	r22, Y+2	; 0x02
     75c:	8e e0       	ldi	r24, 0x0E	; 14
     75e:	90 e4       	ldi	r25, 0x40	; 64
     760:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     764:	6b 81       	ldd	r22, Y+3	; 0x03
     766:	8f e0       	ldi	r24, 0x0F	; 15
     768:	90 e4       	ldi	r25, 0x40	; 64
     76a:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     76e:	6e 2d       	mov	r22, r14
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	90 e4       	ldi	r25, 0x40	; 64
     774:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     778:	6f 2d       	mov	r22, r15
     77a:	81 e1       	ldi	r24, 0x11	; 17
     77c:	90 e4       	ldi	r25, 0x40	; 64
     77e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e4       	ldi	r25, 0x40	; 64
     788:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	90 e4       	ldi	r25, 0x40	; 64
     790:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     794:	83 31       	cpi	r24, 0x13	; 19
     796:	d1 f7       	brne	.-12     	; 0x78c <connect+0x7a>
     798:	64 e0       	ldi	r22, 0x04	; 4
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e4       	ldi	r25, 0x40	; 64
     79e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	90 e4       	ldi	r25, 0x40	; 64
     7a6:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     7aa:	87 31       	cpi	r24, 0x17	; 23
     7ac:	d1 f1       	breq	.+116    	; 0x822 <connect+0x110>
     7ae:	c1 2c       	mov	r12, r1
     7b0:	d1 2c       	mov	r13, r1
     7b2:	76 01       	movw	r14, r12
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e4       	ldi	r25, 0x40	; 64
     7ba:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	90 e4       	ldi	r25, 0x40	; 64
     7c2:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     7c6:	83 31       	cpi	r24, 0x13	; 19
     7c8:	d1 f7       	brne	.-12     	; 0x7be <connect+0xac>
     7ca:	64 e0       	ldi	r22, 0x04	; 4
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e4       	ldi	r25, 0x40	; 64
     7d0:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	81 ee       	ldi	r24, 0xE1	; 225
     7d8:	94 e0       	ldi	r25, 0x04	; 4
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <connect+0xc8>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <connect+0xd2>
     7e4:	00 00       	nop
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	90 e4       	ldi	r25, 0x40	; 64
     7ea:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     7ee:	c8 2f       	mov	r28, r24
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	4a e0       	ldi	r20, 0x0A	; 10
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
     7f8:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
     7fc:	24 e6       	ldi	r18, 0x64	; 100
     7fe:	c2 16       	cp	r12, r18
     800:	d1 04       	cpc	r13, r1
     802:	e1 04       	cpc	r14, r1
     804:	f1 04       	cpc	r15, r1
     806:	21 f4       	brne	.+8      	; 0x810 <connect+0xfe>
     808:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0a c0       	rjmp	.+20     	; 0x824 <connect+0x112>
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	c8 1a       	sub	r12, r24
     814:	d8 0a       	sbc	r13, r24
     816:	e8 0a       	sbc	r14, r24
     818:	f8 0a       	sbc	r15, r24
     81a:	c7 31       	cpi	r28, 0x17	; 23
     81c:	59 f6       	brne	.-106    	; 0x7b4 <connect+0xa2>
     81e:	87 e1       	ldi	r24, 0x17	; 23
     820:	01 c0       	rjmp	.+2      	; 0x824 <connect+0x112>
     822:	87 e1       	ldi	r24, 0x17	; 23
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <dhtStart>:
     832:	57 9a       	sbi	0x0a, 7	; 10
     834:	5f 9a       	sbi	0x0b, 7	; 11
     836:	08 95       	ret

00000838 <dhtRead>:
     838:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <HM+0x1>
     83c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <HM>
     840:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <TP+0x1>
     844:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <TP>
     848:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <SUM>
     84c:	5f 98       	cbi	0x0b, 7	; 11
     84e:	8f e3       	ldi	r24, 0x3F	; 63
     850:	9f e1       	ldi	r25, 0x1F	; 31
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <dhtRead+0x1a>
     856:	00 c0       	rjmp	.+0      	; 0x858 <dhtRead+0x20>
     858:	00 00       	nop
     85a:	5f 9a       	sbi	0x0b, 7	; 11
     85c:	57 98       	cbi	0x0a, 7	; 10
     85e:	9a e6       	ldi	r25, 0x6A	; 106
     860:	9a 95       	dec	r25
     862:	f1 f7       	brne	.-4      	; 0x860 <dhtRead+0x28>
     864:	00 c0       	rjmp	.+0      	; 0x866 <dhtRead+0x2e>
     866:	4f 9b       	sbis	0x09, 7	; 9
     868:	0c c0       	rjmp	.+24     	; 0x882 <dhtRead+0x4a>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	9a e1       	ldi	r25, 0x1A	; 26
     86e:	9a 95       	dec	r25
     870:	f1 f7       	brne	.-4      	; 0x86e <dhtRead+0x36>
     872:	00 c0       	rjmp	.+0      	; 0x874 <dhtRead+0x3c>
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	4f 9b       	sbis	0x09, 7	; 9
     878:	05 c0       	rjmp	.+10     	; 0x884 <dhtRead+0x4c>
     87a:	88 30       	cpi	r24, 0x08	; 8
     87c:	b9 f7       	brne	.-18     	; 0x86c <dhtRead+0x34>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	88 30       	cpi	r24, 0x08	; 8
     886:	08 f0       	brcs	.+2      	; 0x88a <dhtRead+0x52>
     888:	75 c0       	rjmp	.+234    	; 0x974 <__stack+0x75>
     88a:	4f 9b       	sbis	0x09, 7	; 9
     88c:	fe cf       	rjmp	.-4      	; 0x88a <dhtRead+0x52>
     88e:	4f 99       	sbic	0x09, 7	; 9
     890:	fe cf       	rjmp	.-4      	; 0x88e <dhtRead+0x56>
     892:	2f e0       	ldi	r18, 0x0F	; 15
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	4f 9b       	sbis	0x09, 7	; 9
     89c:	fe cf       	rjmp	.-4      	; 0x89a <dhtRead+0x62>
     89e:	4f 9b       	sbis	0x09, 7	; 9
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <dhtRead+0xa0>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	9a e0       	ldi	r25, 0x0A	; 10
     8a6:	9a 95       	dec	r25
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <dhtRead+0x6e>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <dhtRead+0x74>
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	4f 99       	sbic	0x09, 7	; 9
     8b0:	f9 cf       	rjmp	.-14     	; 0x8a4 <dhtRead+0x6c>
     8b2:	80 31       	cpi	r24, 0x10	; 16
     8b4:	88 f0       	brcs	.+34     	; 0x8d8 <dhtRead+0xa0>
     8b6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <HM>
     8ba:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <HM+0x1>
     8be:	ab 01       	movw	r20, r22
     8c0:	02 2e       	mov	r0, r18
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <dhtRead+0x90>
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	0a 94       	dec	r0
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <dhtRead+0x8c>
     8cc:	84 2b       	or	r24, r20
     8ce:	95 2b       	or	r25, r21
     8d0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <HM+0x1>
     8d4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <HM>
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	31 09       	sbc	r19, r1
     8dc:	f0 f6       	brcc	.-68     	; 0x89a <dhtRead+0x62>
     8de:	2f e0       	ldi	r18, 0x0F	; 15
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	4f 9b       	sbis	0x09, 7	; 9
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <dhtRead+0xae>
     8ea:	4f 9b       	sbis	0x09, 7	; 9
     8ec:	1b c0       	rjmp	.+54     	; 0x924 <__stack+0x25>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	9a e0       	ldi	r25, 0x0A	; 10
     8f2:	9a 95       	dec	r25
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <dhtRead+0xba>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <dhtRead+0xc0>
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	4f 99       	sbic	0x09, 7	; 9
     8fc:	f9 cf       	rjmp	.-14     	; 0x8f0 <dhtRead+0xb8>
     8fe:	80 31       	cpi	r24, 0x10	; 16
     900:	88 f0       	brcs	.+34     	; 0x924 <__stack+0x25>
     902:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <TP>
     906:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <TP+0x1>
     90a:	ab 01       	movw	r20, r22
     90c:	02 2e       	mov	r0, r18
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
     910:	44 0f       	add	r20, r20
     912:	55 1f       	adc	r21, r21
     914:	0a 94       	dec	r0
     916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0x11>
     918:	84 2b       	or	r24, r20
     91a:	95 2b       	or	r25, r21
     91c:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <TP+0x1>
     920:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <TP>
     924:	21 50       	subi	r18, 0x01	; 1
     926:	31 09       	sbc	r19, r1
     928:	f0 f6       	brcc	.-68     	; 0x8e6 <dhtRead+0xae>
     92a:	27 e0       	ldi	r18, 0x07	; 7
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	4f 9b       	sbis	0x09, 7	; 9
     934:	fe cf       	rjmp	.-4      	; 0x932 <__stack+0x33>
     936:	4f 9b       	sbis	0x09, 7	; 9
     938:	16 c0       	rjmp	.+44     	; 0x966 <__stack+0x67>
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	9a e0       	ldi	r25, 0x0A	; 10
     93e:	9a 95       	dec	r25
     940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0x3f>
     942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0x45>
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	4f 99       	sbic	0x09, 7	; 9
     948:	f9 cf       	rjmp	.-14     	; 0x93c <__stack+0x3d>
     94a:	80 31       	cpi	r24, 0x10	; 16
     94c:	60 f0       	brcs	.+24     	; 0x966 <__stack+0x67>
     94e:	40 91 e2 04 	lds	r20, 0x04E2	; 0x8004e2 <SUM>
     952:	cb 01       	movw	r24, r22
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0x59>
     960:	84 2b       	or	r24, r20
     962:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <SUM>
     966:	21 50       	subi	r18, 0x01	; 1
     968:	31 09       	sbc	r19, r1
     96a:	18 f7       	brcc	.-58     	; 0x932 <__stack+0x33>
     96c:	57 9a       	sbi	0x0a, 7	; 10
     96e:	5f 9a       	sbi	0x0b, 7	; 11
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	08 95       	ret
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret

00000978 <begin>:
uint32_t readRawPressure(void);
int32_t readPressure(void);
float readAbsAltitude(void);

// Reads the constants and Returns 0 if succeeds, 1 if fails
uint8_t begin(uint8_t mode) {
     978:	cf 93       	push	r28
	oversampling = mode;
     97a:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <oversampling>
	i2cInit();
     97e:	0e 94 94 00 	call	0x128	; 0x128 <i2cInit>
	// 
	if(i2cStart(I2CADDR+I2C_WRITE)){
     982:	8e ee       	ldi	r24, 0xEE	; 238
     984:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
     988:	c8 2f       	mov	r28, r24
     98a:	88 23       	and	r24, r24
     98c:	31 f0       	breq	.+12     	; 0x99a <begin+0x22>
		serialString("\nAddress registering failed\n");
     98e:	88 e8       	ldi	r24, 0x88	; 136
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		return 1;
     996:	c1 e0       	ldi	r28, 0x01	; 1
     998:	47 c1       	rjmp	.+654    	; 0xc28 <begin+0x2b0>
	}
	i2cWrite(AC1);
     99a:	8a ea       	ldi	r24, 0xAA	; 170
     99c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     9a0:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     9a4:	8f ee       	ldi	r24, 0xEF	; 239
     9a6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac1 = i2cReadAck();
     9aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac1 <<= 8;
     9ae:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <ac1>
     9b2:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <ac1+0x1>
	ac1 |= i2cReadNack();
     9b6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     9ba:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <ac1>
     9be:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <ac1+0x1>
     9c2:	28 2b       	or	r18, r24
     9c4:	30 93 d2 02 	sts	0x02D2, r19	; 0x8002d2 <ac1+0x1>
     9c8:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <ac1>
	i2cStop();
     9cc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     9d0:	8e ee       	ldi	r24, 0xEE	; 238
     9d2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC2);
     9d6:	8c ea       	ldi	r24, 0xAC	; 172
     9d8:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     9dc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     9e0:	8f ee       	ldi	r24, 0xEF	; 239
     9e2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac2 = i2cReadAck();
     9e6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac2 <<= 8;
     9ea:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ac2>
     9ee:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <ac2+0x1>
	ac2 |= i2cReadNack();
     9f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     9f6:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <ac2>
     9fa:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <ac2+0x1>
     9fe:	28 2b       	or	r18, r24
     a00:	30 93 da 02 	sts	0x02DA, r19	; 0x8002da <ac2+0x1>
     a04:	20 93 d9 02 	sts	0x02D9, r18	; 0x8002d9 <ac2>
	i2cStop();
     a08:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     a0c:	8e ee       	ldi	r24, 0xEE	; 238
     a0e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC3);
     a12:	8e ea       	ldi	r24, 0xAE	; 174
     a14:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     a18:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     a1c:	8f ee       	ldi	r24, 0xEF	; 239
     a1e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac3 = i2cReadAck();
     a22:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac3 <<= 8;
     a26:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <ac3>
     a2a:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <ac3+0x1>
	ac3 |= i2cReadNack();
     a2e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     a32:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <ac3>
     a36:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <ac3+0x1>
     a3a:	28 2b       	or	r18, r24
     a3c:	30 93 e4 04 	sts	0x04E4, r19	; 0x8004e4 <ac3+0x1>
     a40:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <ac3>
	i2cStop();
     a44:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     a48:	8e ee       	ldi	r24, 0xEE	; 238
     a4a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC4);
     a4e:	80 eb       	ldi	r24, 0xB0	; 176
     a50:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     a54:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     a58:	8f ee       	ldi	r24, 0xEF	; 239
     a5a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac4 = i2cReadAck();
     a5e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac4 <<= 8;
     a62:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <ac4>
     a66:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <ac4+0x1>
	ac4 |= i2cReadNack();
     a6a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     a6e:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <ac4>
     a72:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <ac4+0x1>
     a76:	28 2b       	or	r18, r24
     a78:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <ac4+0x1>
     a7c:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <ac4>
	i2cStop();
     a80:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     a84:	8e ee       	ldi	r24, 0xEE	; 238
     a86:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC5);
     a8a:	82 eb       	ldi	r24, 0xB2	; 178
     a8c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     a90:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     a94:	8f ee       	ldi	r24, 0xEF	; 239
     a96:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac5 = i2cReadAck();
     a9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac5 <<= 8;
     a9e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ac5>
     aa2:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <ac5+0x1>
	ac5 |= i2cReadNack();
     aa6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     aaa:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <ac5>
     aae:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <ac5+0x1>
     ab2:	28 2b       	or	r18, r24
     ab4:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <ac5+0x1>
     ab8:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <ac5>
	i2cStop();
     abc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     ac0:	8e ee       	ldi	r24, 0xEE	; 238
     ac2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC6);
     ac6:	84 eb       	ldi	r24, 0xB4	; 180
     ac8:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     acc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     ad0:	8f ee       	ldi	r24, 0xEF	; 239
     ad2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac6 = i2cReadAck();
     ad6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac6 <<= 8;
     ada:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <ac6>
     ade:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <ac6+0x1>
	ac6 |= i2cReadNack();
     ae2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     ae6:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <ac6>
     aea:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <ac6+0x1>
     aee:	28 2b       	or	r18, r24
     af0:	30 93 d6 02 	sts	0x02D6, r19	; 0x8002d6 <ac6+0x1>
     af4:	20 93 d5 02 	sts	0x02D5, r18	; 0x8002d5 <ac6>
	i2cStop();
     af8:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     afc:	8e ee       	ldi	r24, 0xEE	; 238
     afe:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(B1);
     b02:	86 eb       	ldi	r24, 0xB6	; 182
     b04:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     b08:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     b0c:	8f ee       	ldi	r24, 0xEF	; 239
     b0e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	b1 = i2cReadAck();
     b12:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	b1 <<= 8;
     b16:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <b1>
     b1a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <b1+0x1>
	b1 |= i2cReadNack();
     b1e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     b22:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <b1>
     b26:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <b1+0x1>
     b2a:	28 2b       	or	r18, r24
     b2c:	30 93 d4 02 	sts	0x02D4, r19	; 0x8002d4 <b1+0x1>
     b30:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <b1>
	i2cStop();
     b34:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     b38:	8e ee       	ldi	r24, 0xEE	; 238
     b3a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(B2);
     b3e:	88 eb       	ldi	r24, 0xB8	; 184
     b40:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     b44:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     b48:	8f ee       	ldi	r24, 0xEF	; 239
     b4a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	b2 = i2cReadAck();
     b4e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	b2 <<= 8;
     b52:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <b2>
     b56:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <b2+0x1>
	b2 |= i2cReadNack();
     b5a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     b5e:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <b2>
     b62:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <b2+0x1>
     b66:	28 2b       	or	r18, r24
     b68:	30 93 ce 02 	sts	0x02CE, r19	; 0x8002ce <b2+0x1>
     b6c:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <b2>
	i2cStop();
     b70:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     b74:	8e ee       	ldi	r24, 0xEE	; 238
     b76:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(MB);
     b7a:	8a eb       	ldi	r24, 0xBA	; 186
     b7c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     b80:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     b84:	8f ee       	ldi	r24, 0xEF	; 239
     b86:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	mb = i2cReadAck();
     b8a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	mb <<= 8;
     b8e:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <mb>
     b92:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <mb+0x1>
	mb |= i2cReadNack();
     b96:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     b9a:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <mb>
     b9e:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <mb+0x1>
     ba2:	28 2b       	or	r18, r24
     ba4:	30 93 d0 02 	sts	0x02D0, r19	; 0x8002d0 <mb+0x1>
     ba8:	20 93 cf 02 	sts	0x02CF, r18	; 0x8002cf <mb>
	i2cStop();
     bac:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     bb0:	8e ee       	ldi	r24, 0xEE	; 238
     bb2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(MC);
     bb6:	8c eb       	ldi	r24, 0xBC	; 188
     bb8:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     bbc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     bc0:	8f ee       	ldi	r24, 0xEF	; 239
     bc2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	mc = i2cReadAck();
     bc6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	mc <<= 8;
     bca:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <mc>
     bce:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <mc+0x1>
	mc |= i2cReadNack();
     bd2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     bd6:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <mc>
     bda:	30 91 e1 04 	lds	r19, 0x04E1	; 0x8004e1 <mc+0x1>
     bde:	28 2b       	or	r18, r24
     be0:	30 93 e1 04 	sts	0x04E1, r19	; 0x8004e1 <mc+0x1>
     be4:	20 93 e0 04 	sts	0x04E0, r18	; 0x8004e0 <mc>
	i2cStop();
     be8:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     bec:	8e ee       	ldi	r24, 0xEE	; 238
     bee:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(MD);
     bf2:	8e eb       	ldi	r24, 0xBE	; 190
     bf4:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     bf8:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     bfc:	8f ee       	ldi	r24, 0xEF	; 239
     bfe:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	md = i2cReadAck();
     c02:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	md <<= 8;
     c06:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <md>
     c0a:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <md+0x1>
	md |= i2cReadNack();
     c0e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     c12:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <md>
     c16:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <md+0x1>
     c1a:	28 2b       	or	r18, r24
     c1c:	30 93 dc 02 	sts	0x02DC, r19	; 0x8002dc <md+0x1>
     c20:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <md>
	i2cStop();
     c24:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	serialString ("\nMB = %d\n",mb);
	serialString ("\nMC = %d\n",mc);
	serialString ("\nMD = %d\n",md);*/
	
	return 0;
}
     c28:	8c 2f       	mov	r24, r28
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <readRawTemperature>:

// Reads the raw temperature value
uint16_t readRawTemperature(void) {
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
	uint16_t UT;
	i2cStart(I2CADDR+I2C_WRITE);
     c32:	8e ee       	ldi	r24, 0xEE	; 238
     c34:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(CONTROL);
     c38:	84 ef       	ldi	r24, 0xF4	; 244
     c3a:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cWrite(READTEMPCMD);
     c3e:	8e e2       	ldi	r24, 0x2E	; 46
     c40:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     c44:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c48:	8f e4       	ldi	r24, 0x4F	; 79
     c4a:	96 e4       	ldi	r25, 0x46	; 70
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <readRawTemperature+0x1e>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <readRawTemperature+0x24>
     c52:	00 00       	nop
	_delay_us(4500);
	i2cStart(I2CADDR+I2C_WRITE);
     c54:	8e ee       	ldi	r24, 0xEE	; 238
     c56:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(DATA);
     c5a:	86 ef       	ldi	r24, 0xF6	; 246
     c5c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     c60:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     c64:	8f ee       	ldi	r24, 0xEF	; 239
     c66:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	UT = i2cReadAck();
     c6a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
     c6e:	c8 2f       	mov	r28, r24
     c70:	d0 e0       	ldi	r29, 0x00	; 0
	UT <<= 8;
     c72:	dc 2f       	mov	r29, r28
     c74:	cc 27       	eor	r28, r28
	UT |= i2cReadNack();
     c76:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
	return UT;
}
     c7a:	9e 01       	movw	r18, r28
     c7c:	28 2b       	or	r18, r24
     c7e:	c9 01       	movw	r24, r18
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <readTemperature>:

// Reads the true temperature value in oC
int readTemperature(void) {
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
	uint16_t UT;
	int32_t X1,X2;
	int temp;
	UT = readRawTemperature();
     c92:	0e 94 17 06 	call	0xc2e	; 0xc2e <readRawTemperature>
	//serialString("\nUT = %u",UT);
	X1 = ((UT - (int32_t)ac6) * ((int32_t)ac5) >> 15);
     c96:	ac 01       	movw	r20, r24
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <ac6>
     ca0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <ac6+0x1>
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	28 1b       	sub	r18, r24
     caa:	39 0b       	sbc	r19, r25
     cac:	41 09       	sbc	r20, r1
     cae:	51 09       	sbc	r21, r1
     cb0:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <ac5>
     cb4:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <ac5+0x1>
     cb8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__muluhisi3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
     cc0:	0b 2e       	mov	r0, r27
     cc2:	bf e0       	ldi	r27, 0x0F	; 15
     cc4:	f5 94       	asr	r15
     cc6:	e7 94       	ror	r14
     cc8:	d7 94       	ror	r13
     cca:	c7 94       	ror	r12
     ccc:	ba 95       	dec	r27
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <readTemperature+0x3e>
     cd0:	b0 2d       	mov	r27, r0
	X2 = (((int32_t)mc << 11) / (X1 + (int32_t)md));
	//serialString("\nx1 = %ld, x2= %ld, B5 = %ld",X1, X2,X1+X2);
	//serialString("\nRaw Temp = %ld",((X1 + X2 + 8) >> 4));
	temp = ((X1 + X2 + 8) >> 4);
	//temp /= 10.0;
	return temp;
     cd2:	60 91 e0 04 	lds	r22, 0x04E0	; 0x8004e0 <mc>
     cd6:	70 91 e1 04 	lds	r23, 0x04E1	; 0x8004e1 <mc+0x1>
     cda:	cb 01       	movw	r24, r22
     cdc:	77 0f       	add	r23, r23
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	05 2e       	mov	r0, r21
     ce8:	5b e0       	ldi	r21, 0x0B	; 11
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	5a 95       	dec	r21
     cf4:	d1 f7       	brne	.-12     	; 0xcea <readTemperature+0x64>
     cf6:	50 2d       	mov	r21, r0
     cf8:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <md>
     cfc:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <md+0x1>
     d00:	89 01       	movw	r16, r18
     d02:	33 0f       	add	r19, r19
     d04:	22 0b       	sbc	r18, r18
     d06:	33 0b       	sbc	r19, r19
     d08:	a9 01       	movw	r20, r18
     d0a:	98 01       	movw	r18, r16
     d0c:	2c 0d       	add	r18, r12
     d0e:	3d 1d       	adc	r19, r13
     d10:	4e 1d       	adc	r20, r14
     d12:	5f 1d       	adc	r21, r15
     d14:	0e 94 af 11 	call	0x235e	; 0x235e <__divmodsi4>
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8c 0d       	add	r24, r12
     d1e:	9d 1d       	adc	r25, r13
     d20:	ae 1d       	adc	r26, r14
     d22:	bf 1d       	adc	r27, r15
     d24:	08 96       	adiw	r24, 0x08	; 8
     d26:	a1 1d       	adc	r26, r1
     d28:	b1 1d       	adc	r27, r1
     d2a:	68 94       	set
     d2c:	13 f8       	bld	r1, 3
     d2e:	b5 95       	asr	r27
     d30:	a7 95       	ror	r26
     d32:	97 95       	ror	r25
     d34:	87 95       	ror	r24
     d36:	16 94       	lsr	r1
     d38:	d1 f7       	brne	.-12     	; 0xd2e <readTemperature+0xa8>
} 
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	08 95       	ret

00000d48 <readRawPressure>:

// Reads the raw pressure value
uint32_t readRawPressure(void) {
     d48:	cf 92       	push	r12
     d4a:	df 92       	push	r13
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	cf 93       	push	r28
	uint32_t UP;
	i2cStart(I2CADDR+I2C_WRITE);
     d52:	8e ee       	ldi	r24, 0xEE	; 238
     d54:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(CONTROL);
     d58:	84 ef       	ldi	r24, 0xF4	; 244
     d5a:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cWrite(READPRESSURECMD + (oversampling << 6));
     d5e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <oversampling>
     d62:	82 95       	swap	r24
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	80 7c       	andi	r24, 0xC0	; 192
     d6a:	8c 5c       	subi	r24, 0xCC	; 204
     d6c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     d70:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	switch (oversampling) {
     d74:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <oversampling>
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	69 f0       	breq	.+26     	; 0xd96 <readRawPressure+0x4e>
     d7c:	28 f0       	brcs	.+10     	; 0xd88 <readRawPressure+0x40>
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	89 f0       	breq	.+34     	; 0xda4 <readRawPressure+0x5c>
     d82:	83 30       	cpi	r24, 0x03	; 3
     d84:	b1 f0       	breq	.+44     	; 0xdb2 <readRawPressure+0x6a>
     d86:	1e c0       	rjmp	.+60     	; 0xdc4 <readRawPressure+0x7c>
     d88:	8f e4       	ldi	r24, 0x4F	; 79
     d8a:	96 e4       	ldi	r25, 0x46	; 70
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <readRawPressure+0x44>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <readRawPressure+0x4a>
     d92:	00 00       	nop
     d94:	17 c0       	rjmp	.+46     	; 0xdc4 <readRawPressure+0x7c>
     d96:	8f e2       	ldi	r24, 0x2F	; 47
     d98:	95 e7       	ldi	r25, 0x75	; 117
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <readRawPressure+0x52>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <readRawPressure+0x58>
     da0:	00 00       	nop
     da2:	10 c0       	rjmp	.+32     	; 0xdc4 <readRawPressure+0x7c>
     da4:	8f ee       	ldi	r24, 0xEF	; 239
     da6:	92 ed       	ldi	r25, 0xD2	; 210
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <readRawPressure+0x60>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <readRawPressure+0x66>
     dae:	00 00       	nop
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <readRawPressure+0x7c>
     db2:	9f eb       	ldi	r25, 0xBF	; 191
     db4:	2e e3       	ldi	r18, 0x3E	; 62
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	91 50       	subi	r25, 0x01	; 1
     dba:	20 40       	sbci	r18, 0x00	; 0
     dbc:	80 40       	sbci	r24, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <readRawPressure+0x70>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <readRawPressure+0x7a>
     dc2:	00 00       	nop
			_delay_us(25500);
			break;
		default:
			break;
	}
	i2cStart(I2CADDR+I2C_WRITE);
     dc4:	8e ee       	ldi	r24, 0xEE	; 238
     dc6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(DATA);
     dca:	86 ef       	ldi	r24, 0xF6	; 246
     dcc:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     dd0:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     dd4:	8f ee       	ldi	r24, 0xEF	; 239
     dd6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	UP = i2cReadAck();
     dda:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
     dde:	c8 2e       	mov	r12, r24
     de0:	d1 2c       	mov	r13, r1
     de2:	e1 2c       	mov	r14, r1
     de4:	f1 2c       	mov	r15, r1
	UP <<= 16;
	UP |= (i2cReadAck() << 8);
     de6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
     dea:	c8 2f       	mov	r28, r24
	UP |= i2cReadNack();
     dec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     df0:	76 01       	movw	r14, r12
     df2:	dd 24       	eor	r13, r13
     df4:	cc 24       	eor	r12, r12
     df6:	c8 2a       	or	r12, r24
     df8:	6c 2f       	mov	r22, r28
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	76 2f       	mov	r23, r22
     dfe:	66 27       	eor	r22, r22
     e00:	cb 01       	movw	r24, r22
     e02:	77 0f       	add	r23, r23
     e04:	aa 0b       	sbc	r26, r26
     e06:	bb 0b       	sbc	r27, r27
     e08:	8c 29       	or	r24, r12
     e0a:	9d 29       	or	r25, r13
     e0c:	ae 29       	or	r26, r14
     e0e:	bf 29       	or	r27, r15
	UP >>= (8-oversampling);
	return UP;
     e10:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <oversampling>
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	24 1b       	sub	r18, r20
     e1a:	31 09       	sbc	r19, r1
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <readRawPressure+0xe2>
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	2a 95       	dec	r18
     e2c:	d2 f7       	brpl	.-12     	; 0xe22 <readRawPressure+0xda>
}
     e2e:	cf 91       	pop	r28
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	08 95       	ret

00000e3a <readPressure>:

// Reads the true pressure value in Pa
int32_t readPressure(void) {
     e3a:	4f 92       	push	r4
     e3c:	5f 92       	push	r5
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	28 97       	sbiw	r28, 0x08	; 8
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
	int32_t UT, UP, B3, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	
	UT = readRawTemperature();
     e6a:	0e 94 17 06 	call	0xc2e	; 0xc2e <readRawTemperature>
     e6e:	5c 01       	movw	r10, r24
	UP = readRawPressure();
     e70:	0e 94 a4 06 	call	0xd48	; 0xd48 <readRawPressure>
     e74:	69 83       	std	Y+1, r22	; 0x01
     e76:	7a 83       	std	Y+2, r23	; 0x02
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	9c 83       	std	Y+4, r25	; 0x04
	X1 = ((UT - (int32_t)ac6) * ((int32_t)ac5) >> 15);
     e7c:	a5 01       	movw	r20, r10
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <ac6>
     e86:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <ac6+0x1>
     e8a:	9a 01       	movw	r18, r20
     e8c:	ab 01       	movw	r20, r22
     e8e:	28 1b       	sub	r18, r24
     e90:	39 0b       	sbc	r19, r25
     e92:	41 09       	sbc	r20, r1
     e94:	51 09       	sbc	r21, r1
     e96:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <ac5>
     e9a:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <ac5+0x1>
     e9e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__muluhisi3>
     ea2:	2b 01       	movw	r4, r22
     ea4:	3c 01       	movw	r6, r24
     ea6:	03 2e       	mov	r0, r19
     ea8:	3f e0       	ldi	r19, 0x0F	; 15
     eaa:	75 94       	asr	r7
     eac:	67 94       	ror	r6
     eae:	57 94       	ror	r5
     eb0:	47 94       	ror	r4
     eb2:	3a 95       	dec	r19
     eb4:	d1 f7       	brne	.-12     	; 0xeaa <readPressure+0x70>
     eb6:	30 2d       	mov	r19, r0
	X2 = (((int32_t)mc << 11) / (X1 + (int32_t)md));
	B6 = (X1 + X2) - 4000;
     eb8:	60 91 e0 04 	lds	r22, 0x04E0	; 0x8004e0 <mc>
     ebc:	70 91 e1 04 	lds	r23, 0x04E1	; 0x8004e1 <mc+0x1>
     ec0:	cb 01       	movw	r24, r22
     ec2:	77 0f       	add	r23, r23
     ec4:	aa 0b       	sbc	r26, r26
     ec6:	bb 0b       	sbc	r27, r27
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	05 2e       	mov	r0, r21
     ece:	5b e0       	ldi	r21, 0x0B	; 11
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	5a 95       	dec	r21
     eda:	d1 f7       	brne	.-12     	; 0xed0 <readPressure+0x96>
     edc:	50 2d       	mov	r21, r0
     ede:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <md>
     ee2:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <md+0x1>
     ee6:	89 01       	movw	r16, r18
     ee8:	33 0f       	add	r19, r19
     eea:	22 0b       	sbc	r18, r18
     eec:	33 0b       	sbc	r19, r19
     eee:	a9 01       	movw	r20, r18
     ef0:	98 01       	movw	r18, r16
     ef2:	24 0d       	add	r18, r4
     ef4:	35 1d       	adc	r19, r5
     ef6:	46 1d       	adc	r20, r6
     ef8:	57 1d       	adc	r21, r7
     efa:	0e 94 af 11 	call	0x235e	; 0x235e <__divmodsi4>
     efe:	42 0e       	add	r4, r18
     f00:	53 1e       	adc	r5, r19
     f02:	64 1e       	adc	r6, r20
     f04:	75 1e       	adc	r7, r21
     f06:	20 ea       	ldi	r18, 0xA0	; 160
     f08:	42 1a       	sub	r4, r18
     f0a:	2f e0       	ldi	r18, 0x0F	; 15
     f0c:	52 0a       	sbc	r5, r18
     f0e:	61 08       	sbc	r6, r1
     f10:	71 08       	sbc	r7, r1
	X1 = ((int32_t)b2 * ((B6 * B6) >> 12 )) >> 11;
     f12:	a3 01       	movw	r20, r6
     f14:	92 01       	movw	r18, r4
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__mulsi3>
     f1e:	6b 01       	movw	r12, r22
     f20:	7c 01       	movw	r14, r24
     f22:	0b 2e       	mov	r0, r27
     f24:	bc e0       	ldi	r27, 0x0C	; 12
     f26:	f5 94       	asr	r15
     f28:	e7 94       	ror	r14
     f2a:	d7 94       	ror	r13
     f2c:	c7 94       	ror	r12
     f2e:	ba 95       	dec	r27
     f30:	d1 f7       	brne	.-12     	; 0xf26 <readPressure+0xec>
     f32:	b0 2d       	mov	r27, r0
	X2 = ((int32_t)ac2 * B6) >> 11;
	X3 = X1 + X2;
	B3 = ((((int32_t)ac1 * 4 + X3) << oversampling) + 2) / 4;
     f34:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <oversampling>
	X1 = ((int32_t) ac3 * B6) >> 13;
	X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
	X3 = ((X1 + X2) + 2) >> 2;
	B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
     f38:	a0 91 e3 04 	lds	r26, 0x04E3	; 0x8004e3 <ac3>
     f3c:	b0 91 e4 04 	lds	r27, 0x04E4	; 0x8004e4 <ac3+0x1>
     f40:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__mulshisi3>
     f44:	4b 01       	movw	r8, r22
     f46:	5c 01       	movw	r10, r24
     f48:	07 2e       	mov	r0, r23
     f4a:	7d e0       	ldi	r23, 0x0D	; 13
     f4c:	b5 94       	asr	r11
     f4e:	a7 94       	ror	r10
     f50:	97 94       	ror	r9
     f52:	87 94       	ror	r8
     f54:	7a 95       	dec	r23
     f56:	d1 f7       	brne	.-12     	; 0xf4c <readPressure+0x112>
     f58:	70 2d       	mov	r23, r0
     f5a:	a0 91 d3 02 	lds	r26, 0x02D3	; 0x8002d3 <b1>
     f5e:	b0 91 d4 02 	lds	r27, 0x02D4	; 0x8002d4 <b1+0x1>
     f62:	a7 01       	movw	r20, r14
     f64:	96 01       	movw	r18, r12
     f66:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__mulshisi3>
     f6a:	bb 27       	eor	r27, r27
     f6c:	97 fd       	sbrc	r25, 7
     f6e:	b0 95       	com	r27
     f70:	ab 2f       	mov	r26, r27
     f72:	88 0d       	add	r24, r8
     f74:	99 1d       	adc	r25, r9
     f76:	aa 1d       	adc	r26, r10
     f78:	bb 1d       	adc	r27, r11
     f7a:	02 96       	adiw	r24, 0x02	; 2
     f7c:	a1 1d       	adc	r26, r1
     f7e:	b1 1d       	adc	r27, r1
     f80:	b5 95       	asr	r27
     f82:	a7 95       	ror	r26
     f84:	97 95       	ror	r25
     f86:	87 95       	ror	r24
     f88:	b5 95       	asr	r27
     f8a:	a7 95       	ror	r26
     f8c:	97 95       	ror	r25
     f8e:	87 95       	ror	r24
     f90:	9c 01       	movw	r18, r24
     f92:	ad 01       	movw	r20, r26
     f94:	30 58       	subi	r19, 0x80	; 128
     f96:	4f 4f       	sbci	r20, 0xFF	; 255
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <ac4>
     f9e:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <ac4+0x1>
     fa2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__muluhisi3>
     fa6:	9b 01       	movw	r18, r22
     fa8:	ac 01       	movw	r20, r24
     faa:	01 2e       	mov	r0, r17
     fac:	1f e0       	ldi	r17, 0x0F	; 15
     fae:	56 95       	lsr	r21
     fb0:	47 95       	ror	r20
     fb2:	37 95       	ror	r19
     fb4:	27 95       	ror	r18
     fb6:	1a 95       	dec	r17
     fb8:	d1 f7       	brne	.-12     	; 0xfae <readPressure+0x174>
     fba:	10 2d       	mov	r17, r0
     fbc:	2d 83       	std	Y+5, r18	; 0x05
     fbe:	3e 83       	std	Y+6, r19	; 0x06
     fc0:	4f 83       	std	Y+7, r20	; 0x07
     fc2:	58 87       	std	Y+8, r21	; 0x08
	B7 = ((uint32_t)UP - B3) * (uint32_t)(50000UL >> oversampling);
     fc4:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <b2>
     fc8:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <b2+0x1>
     fcc:	a7 01       	movw	r20, r14
     fce:	96 01       	movw	r18, r12
     fd0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__mulshisi3>
     fd4:	4b 01       	movw	r8, r22
     fd6:	5c 01       	movw	r10, r24
     fd8:	07 2e       	mov	r0, r23
     fda:	7b e0       	ldi	r23, 0x0B	; 11
     fdc:	b5 94       	asr	r11
     fde:	a7 94       	ror	r10
     fe0:	97 94       	ror	r9
     fe2:	87 94       	ror	r8
     fe4:	7a 95       	dec	r23
     fe6:	d1 f7       	brne	.-12     	; 0xfdc <readPressure+0x1a2>
     fe8:	70 2d       	mov	r23, r0
     fea:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <ac2>
     fee:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <ac2+0x1>
     ff2:	a3 01       	movw	r20, r6
     ff4:	92 01       	movw	r18, r4
     ff6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__mulshisi3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	07 2e       	mov	r0, r23
    1000:	7b e0       	ldi	r23, 0x0B	; 11
    1002:	b5 95       	asr	r27
    1004:	a7 95       	ror	r26
    1006:	97 95       	ror	r25
    1008:	87 95       	ror	r24
    100a:	7a 95       	dec	r23
    100c:	d1 f7       	brne	.-12     	; 0x1002 <readPressure+0x1c8>
    100e:	70 2d       	mov	r23, r0
    1010:	88 0d       	add	r24, r8
    1012:	99 1d       	adc	r25, r9
    1014:	aa 1d       	adc	r26, r10
    1016:	bb 1d       	adc	r27, r11
    1018:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <ac1>
    101c:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <ac1+0x1>
    1020:	05 2e       	mov	r0, r21
    1022:	00 0c       	add	r0, r0
    1024:	66 0b       	sbc	r22, r22
    1026:	77 0b       	sbc	r23, r23
    1028:	44 0f       	add	r20, r20
    102a:	55 1f       	adc	r21, r21
    102c:	66 1f       	adc	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	44 0f       	add	r20, r20
    1032:	55 1f       	adc	r21, r21
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	84 0f       	add	r24, r20
    103a:	95 1f       	adc	r25, r21
    103c:	a6 1f       	adc	r26, r22
    103e:	b7 1f       	adc	r27, r23
    1040:	0e 2e       	mov	r0, r30
    1042:	04 c0       	rjmp	.+8      	; 0x104c <readPressure+0x212>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	aa 1f       	adc	r26, r26
    104a:	bb 1f       	adc	r27, r27
    104c:	0a 94       	dec	r0
    104e:	d2 f7       	brpl	.-12     	; 0x1044 <readPressure+0x20a>
    1050:	02 96       	adiw	r24, 0x02	; 2
    1052:	a1 1d       	adc	r26, r1
    1054:	b1 1d       	adc	r27, r1
    1056:	ac 01       	movw	r20, r24
    1058:	bd 01       	movw	r22, r26
    105a:	bb 23       	and	r27, r27
    105c:	24 f4       	brge	.+8      	; 0x1066 <readPressure+0x22c>
    105e:	4d 5f       	subi	r20, 0xFD	; 253
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	6f 4f       	sbci	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	75 95       	asr	r23
    1068:	67 95       	ror	r22
    106a:	57 95       	ror	r21
    106c:	47 95       	ror	r20
    106e:	75 95       	asr	r23
    1070:	67 95       	ror	r22
    1072:	57 95       	ror	r21
    1074:	47 95       	ror	r20
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	ab 81       	ldd	r26, Y+3	; 0x03
    107c:	bc 81       	ldd	r27, Y+4	; 0x04
    107e:	84 1b       	sub	r24, r20
    1080:	95 0b       	sbc	r25, r21
    1082:	a6 0b       	sbc	r26, r22
    1084:	b7 0b       	sbc	r27, r23
    1086:	9c 01       	movw	r18, r24
    1088:	ad 01       	movw	r20, r26
    108a:	80 e5       	ldi	r24, 0x50	; 80
    108c:	93 ec       	ldi	r25, 0xC3	; 195
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <readPressure+0x266>
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	ea 95       	dec	r30
    10a2:	d2 f7       	brpl	.-12     	; 0x1098 <readPressure+0x25e>
    10a4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__mulsi3>
	if (B7 < 0x80000000) {
    10a8:	99 23       	and	r25, r25
    10aa:	6c f0       	brlt	.+26     	; 0x10c6 <readPressure+0x28c>
		p = (B7 * 2)/B4;
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	2d 81       	ldd	r18, Y+5	; 0x05
    10b6:	3e 81       	ldd	r19, Y+6	; 0x06
    10b8:	4f 81       	ldd	r20, Y+7	; 0x07
    10ba:	58 85       	ldd	r21, Y+8	; 0x08
    10bc:	0e 94 8d 11 	call	0x231a	; 0x231a <__udivmodsi4>
    10c0:	49 01       	movw	r8, r18
    10c2:	5a 01       	movw	r10, r20
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <readPressure+0x2a4>
	} else {
		p = (B7/B4) * 2;
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	4f 81       	ldd	r20, Y+7	; 0x07
    10cc:	58 85       	ldd	r21, Y+8	; 0x08
    10ce:	0e 94 8d 11 	call	0x231a	; 0x231a <__udivmodsi4>
    10d2:	49 01       	movw	r8, r18
    10d4:	5a 01       	movw	r10, r20
    10d6:	88 0c       	add	r8, r8
    10d8:	99 1c       	adc	r9, r9
    10da:	aa 1c       	adc	r10, r10
    10dc:	bb 1c       	adc	r11, r11
	}
	X1 = (p >> 8) * (p >> 8);
    10de:	99 27       	eor	r25, r25
    10e0:	b7 fc       	sbrc	r11, 7
    10e2:	9a 95       	dec	r25
    10e4:	8b 2d       	mov	r24, r11
    10e6:	7a 2d       	mov	r23, r10
    10e8:	69 2d       	mov	r22, r9
	X1 = (X1 * 3038) >> 16;
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__mulsi3>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	ae ed       	ldi	r26, 0xDE	; 222
    10f8:	bb e0       	ldi	r27, 0x0B	; 11
    10fa:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__muluhisi3>
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
	X2 = (-7357 * p) >> 16;
	p = p + ((X1 + X2 + (int32_t)3791) >> 4);
    1102:	a3 e4       	ldi	r26, 0x43	; 67
    1104:	b3 ee       	ldi	r27, 0xE3	; 227
    1106:	a5 01       	movw	r20, r10
    1108:	94 01       	movw	r18, r8
    110a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulohisi3>
    110e:	bb 27       	eor	r27, r27
    1110:	97 fd       	sbrc	r25, 7
    1112:	b0 95       	com	r27
    1114:	ab 2f       	mov	r26, r27
    1116:	67 01       	movw	r12, r14
    1118:	ff 24       	eor	r15, r15
    111a:	d7 fc       	sbrc	r13, 7
    111c:	f0 94       	com	r15
    111e:	ef 2c       	mov	r14, r15
    1120:	8c 0d       	add	r24, r12
    1122:	9d 1d       	adc	r25, r13
    1124:	ae 1d       	adc	r26, r14
    1126:	bf 1d       	adc	r27, r15
    1128:	81 53       	subi	r24, 0x31	; 49
    112a:	91 4f       	sbci	r25, 0xF1	; 241
    112c:	af 4f       	sbci	r26, 0xFF	; 255
    112e:	bf 4f       	sbci	r27, 0xFF	; 255
    1130:	68 94       	set
    1132:	13 f8       	bld	r1, 3
    1134:	b5 95       	asr	r27
    1136:	a7 95       	ror	r26
    1138:	97 95       	ror	r25
    113a:	87 95       	ror	r24
    113c:	16 94       	lsr	r1
    113e:	d1 f7       	brne	.-12     	; 0x1134 <readPressure+0x2fa>
	return p;
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	68 0d       	add	r22, r8
    1146:	79 1d       	adc	r23, r9
    1148:	8a 1d       	adc	r24, r10
    114a:	9b 1d       	adc	r25, r11
}
    114c:	28 96       	adiw	r28, 0x08	; 8
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	08 95       	ret

0000117a <readAbsAltitude>:

// Estimates the Absolute Altitude in meters, based on the pressure value
float readAbsAltitude(void) {
	float p = readPressure();
    117a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <readPressure>
	return (44330 * (1.0 - pow((p/101325), 0.1903)));
    117e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__floatsisf>
    1182:	20 e8       	ldi	r18, 0x80	; 128
    1184:	36 ee       	ldi	r19, 0xE6	; 230
    1186:	45 ec       	ldi	r20, 0xC5	; 197
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divsf3>
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	3e ed       	ldi	r19, 0xDE	; 222
    1192:	42 e4       	ldi	r20, 0x42	; 66
    1194:	5e e3       	ldi	r21, 0x3E	; 62
    1196:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <pow>
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	80 e8       	ldi	r24, 0x80	; 128
    11a4:	9f e3       	ldi	r25, 0x3F	; 63
    11a6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__subsf3>
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3a e2       	ldi	r19, 0x2A	; 42
    11ae:	4d e2       	ldi	r20, 0x2D	; 45
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__mulsf3>
}
    11b6:	08 95       	ret

000011b8 <main>:
					};


uint16_t port=8080;

int main(void){
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	64 97       	sbiw	r28, 0x14	; 20
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    serialStart();
    11cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <serialStart>
    serialString("Serial Iniciada @ ");
    11d0:	85 ea       	ldi	r24, 0xA5	; 165
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
    serialSendInt(BAUD,DEC,1);
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	4a e0       	ldi	r20, 0x0A	; 10
    11dc:	60 e8       	ldi	r22, 0x80	; 128
    11de:	75 e2       	ldi	r23, 0x25	; 37
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
	dhtStart();
    11e8:	0e 94 19 04 	call	0x832	; 0x832 <dhtStart>
    if(dhtRead()){
    11ec:	0e 94 1c 04 	call	0x838	; 0x838 <dhtRead>
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <main+0x3e>
    11f4:	95 c0       	rjmp	.+298    	; 0x1320 <main+0x168>
        serialStringLN("DHT22 iniciado");
    11f6:	88 eb       	ldi	r24, 0xB8	; 184
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
        serialString("Temperatura: ");
    11fe:	87 ec       	ldi	r24, 0xC7	; 199
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
uint16_t humidity(){
	return HM;
}

uint16_t temperature(){
	return TP;
    1206:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <TP>
    120a:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <TP+0x1>
        serialSendInt(temperature()/10,DEC,0);
    120e:	ad ec       	ldi	r26, 0xCD	; 205
    1210:	bc ec       	ldi	r27, 0xCC	; 204
    1212:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    1216:	96 95       	lsr	r25
    1218:	87 95       	ror	r24
    121a:	96 95       	lsr	r25
    121c:	87 95       	ror	r24
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	bc 01       	movw	r22, r24
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	4a e0       	ldi	r20, 0x0A	; 10
    122c:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialString(".");
    1230:	85 ed       	ldi	r24, 0xD5	; 213
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
    1238:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <TP>
    123c:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <TP+0x1>
        serialSendInt(temperature()%10,DEC,0);
    1240:	9a 01       	movw	r18, r20
    1242:	ad ec       	ldi	r26, 0xCD	; 205
    1244:	bc ec       	ldi	r27, 0xCC	; 204
    1246:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    124a:	96 95       	lsr	r25
    124c:	87 95       	ror	r24
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	9c 01       	movw	r18, r24
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	ba 01       	movw	r22, r20
    126e:	68 1b       	sub	r22, r24
    1270:	79 0b       	sbc	r23, r25
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	4a e0       	ldi	r20, 0x0A	; 10
    127a:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialStringLN("C");
    127e:	87 ed       	ldi	r24, 0xD7	; 215
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
        serialString("Umidade: ");
    1286:	89 ed       	ldi	r24, 0xD9	; 217
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
   return 1;
}


uint16_t humidity(){
	return HM;
    128e:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <HM>
    1292:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <HM+0x1>
        serialSendInt(humidity()/10,DEC,0);
    1296:	ad ec       	ldi	r26, 0xCD	; 205
    1298:	bc ec       	ldi	r27, 0xCC	; 204
    129a:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	96 95       	lsr	r25
    12a4:	87 95       	ror	r24
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	bc 01       	movw	r22, r24
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	4a e0       	ldi	r20, 0x0A	; 10
    12b4:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialSend('.');
    12b8:	8e e2       	ldi	r24, 0x2E	; 46
    12ba:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
    12be:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <HM>
    12c2:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <HM+0x1>
        serialSendInt(humidity()%10,DEC,0);
    12c6:	9a 01       	movw	r18, r20
    12c8:	ad ec       	ldi	r26, 0xCD	; 205
    12ca:	bc ec       	ldi	r27, 0xCC	; 204
    12cc:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	9c 01       	movw	r18, r24
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	ba 01       	movw	r22, r20
    12f4:	68 1b       	sub	r22, r24
    12f6:	79 0b       	sbc	r23, r25
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	4a e0       	ldi	r20, 0x0A	; 10
    1300:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialStringLN("%");
    1304:	83 ee       	ldi	r24, 0xE3	; 227
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	83 ec       	ldi	r24, 0xC3	; 195
    1310:	99 e0       	ldi	r25, 0x09	; 9
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	80 40       	sbci	r24, 0x00	; 0
    1316:	90 40       	sbci	r25, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <main+0x15a>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <main+0x164>
    131c:	00 00       	nop
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <main+0x170>
        _delay_ms(200);
    }else{
        serialStringLN("ERRO NO DHT22");
    1320:	85 ee       	ldi	r24, 0xE5	; 229
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
    }
	
	if(!begin(ULTRAHIGHRES)) {
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	0e 94 bc 04 	call	0x978	; 0x978 <begin>
    132e:	81 11       	cpse	r24, r1
    1330:	53 c0       	rjmp	.+166    	; 0x13d8 <main+0x220>
    1332:	ef ef       	ldi	r30, 0xFF	; 255
    1334:	f3 ec       	ldi	r31, 0xC3	; 195
    1336:	29 e0       	ldi	r18, 0x09	; 9
    1338:	e1 50       	subi	r30, 0x01	; 1
    133a:	f0 40       	sbci	r31, 0x00	; 0
    133c:	20 40       	sbci	r18, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <main+0x180>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <main+0x18a>
    1342:	00 00       	nop
		_delay_ms(200);
		serialStringLN("BMP085 Iniciado");
    1344:	83 ef       	ldi	r24, 0xF3	; 243
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
		serialString("Pressão: ");
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readPressure(),DEC,0);
    1354:	0e 94 1d 07 	call	0xe3a	; 0xe3a <readPressure>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	4a e0       	ldi	r20, 0x0A	; 10
    135c:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialStringLN("Pa");
    1360:	8e e0       	ldi	r24, 0x0E	; 14
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
		serialString("Temperatura: ");
    1368:	87 ec       	ldi	r24, 0xC7	; 199
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readTemperature()/10,DEC,0);
    1370:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    1374:	0a e0       	ldi	r16, 0x0A	; 10
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	b8 01       	movw	r22, r16
    137a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
    137e:	07 2e       	mov	r0, r23
    1380:	00 0c       	add	r0, r0
    1382:	88 0b       	sbc	r24, r24
    1384:	99 0b       	sbc	r25, r25
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	4a e0       	ldi	r20, 0x0A	; 10
    138a:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialString(".");
    138e:	85 ed       	ldi	r24, 0xD5	; 213
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readTemperature()%10,DEC,0);
    1396:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    139a:	b8 01       	movw	r22, r16
    139c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
    13a0:	bc 01       	movw	r22, r24
    13a2:	99 0f       	add	r25, r25
    13a4:	88 0b       	sbc	r24, r24
    13a6:	99 0b       	sbc	r25, r25
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	4a e0       	ldi	r20, 0x0A	; 10
    13ac:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialStringLN("C");
    13b0:	87 ed       	ldi	r24, 0xD7	; 215
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
		serialString("Altitude: ");
    13b8:	81 e1       	ldi	r24, 0x11	; 17
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readAbsAltitude(),DEC,0);
    13c0:	0e 94 bd 08 	call	0x117a	; 0x117a <readAbsAltitude>
    13c4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fixsfsi>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	4a e0       	ldi	r20, 0x0A	; 10
    13cc:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialStringLN("m");
    13d0:	8c e1       	ldi	r24, 0x1C	; 28
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>

uint8_t static inline spiSend(uint8_t data); //Envia um byte de dado e retorna um byte seguindo o funcionamento do SPI


void static inline spiStart(uint8_t SPICLOCKPRESCALER){
    outputPin(DDR_SPI,SS);    //USAMOS O SS SEMPRE PARA EVITAR PROBLEMAS DE INCOMPATIBILIDADE
    13d8:	22 9a       	sbi	0x04, 2	; 4
    setPin(PORTB,SS);         //ATENÇÃO SE USAR SPI JAMAIS DEIXAR DE USAR O PINO SS PRINCIPALMENTE SE FOR USADO COMO ENTRADA
    13da:	2a 9a       	sbi	0x05, 2	; 5
    outputPin(DDR_SPI,MOSI);  //MOSI SAIDA
    13dc:	23 9a       	sbi	0x04, 3	; 4
    outputPin(DDR_SPI,SCK);   //SCK SAIDA
    13de:	25 9a       	sbi	0x04, 5	; 4
    setPin(SPCR,MSTR);        //MODO MASTER
    13e0:	8c b5       	in	r24, 0x2c	; 44
    13e2:	80 61       	ori	r24, 0x10	; 16
    13e4:	8c bd       	out	0x2c, r24	; 44
    SPCR|=SPICLOCKPRESCALER;  //SETA PRESCALER
    13e6:	8c b5       	in	r24, 0x2c	; 44
    13e8:	8c bd       	out	0x2c, r24	; 44
    setPin(SPCR,SPE);         //ATIVA SPI
    13ea:	8c b5       	in	r24, 0x2c	; 44
    13ec:	80 64       	ori	r24, 0x40	; 64
    13ee:	8c bd       	out	0x2c, r24	; 44
	}

    spiStart(SPICLOCKPRESCALER4);
    serialStringLN("SPI iniciado");
    13f0:	8e e1       	ldi	r24, 0x1E	; 30
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>

    if(wiz5200Init(ip,mac,gtw,submask)){
    13f8:	22 e5       	ldi	r18, 0x52	; 82
    13fa:	31 e0       	ldi	r19, 0x01	; 1
    13fc:	4a e5       	ldi	r20, 0x5A	; 90
    13fe:	51 e0       	ldi	r21, 0x01	; 1
    1400:	62 e6       	ldi	r22, 0x62	; 98
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	8e e5       	ldi	r24, 0x5E	; 94
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 cf 01 	call	0x39e	; 0x39e <wiz5200Init>
    140c:	88 23       	and	r24, r24
    140e:	21 f0       	breq	.+8      	; 0x1418 <main+0x260>
        serialStringLN("WIZ5200 iniciado");
    1410:	8b e2       	ldi	r24, 0x2B	; 43
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
    }
	sprintf(ipString, "%d.%d.%d.%d",ip[0],ip[1],ip[2],ip[3]);
    1418:	ee e5       	ldi	r30, 0x5E	; 94
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	83 81       	ldd	r24, Z+3	; 0x03
    141e:	1f 92       	push	r1
    1420:	8f 93       	push	r24
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	1f 92       	push	r1
    1426:	8f 93       	push	r24
    1428:	81 81       	ldd	r24, Z+1	; 0x01
    142a:	1f 92       	push	r1
    142c:	8f 93       	push	r24
    142e:	80 81       	ld	r24, Z
    1430:	1f 92       	push	r1
    1432:	8f 93       	push	r24
    1434:	8c e3       	ldi	r24, 0x3C	; 60
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	8c eb       	ldi	r24, 0xBC	; 188
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	9f 93       	push	r25
    1442:	8f 93       	push	r24
    1444:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    for(;;){
        //port++;
        if(connect(server,SERVER_PORT,port)){
			// Temperatura DHT22
			dhtRead();
            strcat(buffer,"POST /API/dados/real/");
    1452:	00 ee       	ldi	r16, 0xE0	; 224
    1454:	12 e0       	ldi	r17, 0x02	; 2
			strcat(buffer, token[0]);
			strcat(buffer, "?valor=");
            char bufferTemp[10]="";
    1456:	fe 01       	movw	r30, r28
    1458:	33 96       	adiw	r30, 0x03	; 3
    145a:	fc 87       	std	Y+12, r31	; 0x0c
    145c:	eb 87       	std	Y+11, r30	; 0x0b
            sprintf(bufferTemp,"%d.%d",temperature()/10,temperature()%10);
    145e:	0f 2e       	mov	r0, r31
    1460:	f2 e4       	ldi	r31, 0x42	; 66
    1462:	4f 2e       	mov	r4, r31
    1464:	f2 e0       	ldi	r31, 0x02	; 2
    1466:	5f 2e       	mov	r5, r31
    1468:	f0 2d       	mov	r31, r0
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	7c 01       	movw	r14, r24
            strcat(buffer,bufferTemp);
            strcat(buffer," HTTP/1.1\r\n");
            strcat(buffer,"Host: ");
			strcat(buffer, ipString);
			strcat(buffer, "\r\n");
    1470:	0f 2e       	mov	r0, r31
    1472:	fd e0       	ldi	r31, 0x0D	; 13
    1474:	cf 2e       	mov	r12, r31
    1476:	fa e0       	ldi	r31, 0x0A	; 10
    1478:	df 2e       	mov	r13, r31
    147a:	f0 2d       	mov	r31, r0
			connect(server,SERVER_PORT,port);
			strcat(buffer,"POST /API/dados/real/");
			strcat(buffer, token[2]);
			strcat(buffer, "?valor=");
			//char bufferTemp[10]="";
			sprintf(bufferTemp,"%ld",readPressure());
    147c:	0f 2e       	mov	r0, r31
    147e:	fa e7       	ldi	r31, 0x7A	; 122
    1480:	6f 2e       	mov	r6, r31
    1482:	f1 e0       	ldi	r31, 0x01	; 1
    1484:	7f 2e       	mov	r7, r31
    1486:	f0 2d       	mov	r31, r0
			connect(server,SERVER_PORT,port);
			strcat(buffer,"POST /API/dados/real/");
			strcat(buffer, token[3]);
			strcat(buffer, "?valor=");
			//char bufferTemp[10]="";
			sprintf(bufferTemp,"%d.%d",readTemperature()/10,readTemperature()%10);
    1488:	0f 2e       	mov	r0, r31
    148a:	fa e0       	ldi	r31, 0x0A	; 10
    148c:	af 2e       	mov	r10, r31
    148e:	b1 2c       	mov	r11, r1
    1490:	f0 2d       	mov	r31, r0
    for(;;){
        //port++;
        if(connect(server,SERVER_PORT,port)){
			// Temperatura DHT22
			dhtRead();
            strcat(buffer,"POST /API/dados/real/");
    1492:	20 2e       	mov	r2, r16
    1494:	31 2e       	mov	r3, r17
			strcat(buffer, token[0]);
			strcat(buffer, "?valor=");
            char bufferTemp[10]="";
            sprintf(bufferTemp,"%d.%d",temperature()/10,temperature()%10);
    1496:	88 2e       	mov	r8, r24
    1498:	9f 2c       	mov	r9, r15
    }
	sprintf(ipString, "%d.%d.%d.%d",ip[0],ip[1],ip[2],ip[3]);

    for(;;){
        //port++;
        if(connect(server,SERVER_PORT,port)){
    149a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    149e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    14a2:	60 e4       	ldi	r22, 0x40	; 64
    14a4:	7f e1       	ldi	r23, 0x1F	; 31
    14a6:	86 e5       	ldi	r24, 0x56	; 86
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	0e 94 89 03 	call	0x712	; 0x712 <connect>
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <main+0x2fc>
    14b2:	5c c3       	rjmp	.+1720   	; 0x1b6c <main+0x9b4>
			// Temperatura DHT22
			dhtRead();
    14b4:	0e 94 1c 04 	call	0x838	; 0x838 <dhtRead>
            strcat(buffer,"POST /API/dados/real/");
    14b8:	d8 01       	movw	r26, r16
    14ba:	0d 90       	ld	r0, X+
    14bc:	00 20       	and	r0, r0
    14be:	e9 f7       	brne	.-6      	; 0x14ba <main+0x302>
    14c0:	11 97       	sbiw	r26, 0x01	; 1
    14c2:	86 e1       	ldi	r24, 0x16	; 22
    14c4:	e8 e4       	ldi	r30, 0x48	; 72
    14c6:	f2 e0       	ldi	r31, 0x02	; 2
    14c8:	01 90       	ld	r0, Z+
    14ca:	0d 92       	st	X+, r0
    14cc:	8a 95       	dec	r24
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <main+0x310>
			strcat(buffer, token[0]);
    14d0:	62 e0       	ldi	r22, 0x02	; 2
    14d2:	71 e0       	ldi	r23, 0x01	; 1
    14d4:	82 2d       	mov	r24, r2
    14d6:	93 2d       	mov	r25, r3
    14d8:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "?valor=");
    14dc:	d8 01       	movw	r26, r16
    14de:	0d 90       	ld	r0, X+
    14e0:	00 20       	and	r0, r0
    14e2:	e9 f7       	brne	.-6      	; 0x14de <main+0x326>
    14e4:	11 97       	sbiw	r26, 0x01	; 1
    14e6:	88 e0       	ldi	r24, 0x08	; 8
    14e8:	ee e5       	ldi	r30, 0x5E	; 94
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	01 90       	ld	r0, Z+
    14ee:	0d 92       	st	X+, r0
    14f0:	8a 95       	dec	r24
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <main+0x334>
            char bufferTemp[10]="";
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	eb 85       	ldd	r30, Y+11	; 0x0b
    14fa:	fc 85       	ldd	r31, Y+12	; 0x0c
    14fc:	28 e0       	ldi	r18, 0x08	; 8
    14fe:	11 92       	st	Z+, r1
    1500:	2a 95       	dec	r18
    1502:	e9 f7       	brne	.-6      	; 0x14fe <main+0x346>
}

uint16_t temperature(){
	return TP;
    1504:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <TP>
    1508:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <TP+0x1>
    150c:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <TP>
    1510:	f0 91 ca 02 	lds	r31, 0x02CA	; 0x8002ca <TP+0x1>
            sprintf(bufferTemp,"%d.%d",temperature()/10,temperature()%10);
    1514:	9a 01       	movw	r18, r20
    1516:	ad ec       	ldi	r26, 0xCD	; 205
    1518:	bc ec       	ldi	r27, 0xCC	; 204
    151a:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	9c 01       	movw	r18, r24
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	48 1b       	sub	r20, r24
    1542:	59 0b       	sbc	r21, r25
    1544:	5f 93       	push	r21
    1546:	4f 93       	push	r20
    1548:	9f 01       	movw	r18, r30
    154a:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    154e:	96 95       	lsr	r25
    1550:	87 95       	ror	r24
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	96 95       	lsr	r25
    1558:	87 95       	ror	r24
    155a:	9f 93       	push	r25
    155c:	8f 93       	push	r24
    155e:	5f 92       	push	r5
    1560:	4f 92       	push	r4
    1562:	ff 92       	push	r15
    1564:	ef 92       	push	r14
    1566:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
            strcat(buffer,bufferTemp);
    156a:	68 2d       	mov	r22, r8
    156c:	79 2d       	mov	r23, r9
    156e:	82 2d       	mov	r24, r2
    1570:	93 2d       	mov	r25, r3
    1572:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
            strcat(buffer," HTTP/1.1\r\n");
    1576:	d8 01       	movw	r26, r16
    1578:	0d 90       	ld	r0, X+
    157a:	00 20       	and	r0, r0
    157c:	e9 f7       	brne	.-6      	; 0x1578 <main+0x3c0>
    157e:	11 97       	sbiw	r26, 0x01	; 1
    1580:	8c e0       	ldi	r24, 0x0C	; 12
    1582:	e6 e6       	ldi	r30, 0x66	; 102
    1584:	f2 e0       	ldi	r31, 0x02	; 2
    1586:	01 90       	ld	r0, Z+
    1588:	0d 92       	st	X+, r0
    158a:	8a 95       	dec	r24
    158c:	e1 f7       	brne	.-8      	; 0x1586 <main+0x3ce>
            strcat(buffer,"Host: ");
    158e:	d8 01       	movw	r26, r16
    1590:	0d 90       	ld	r0, X+
    1592:	00 20       	and	r0, r0
    1594:	e9 f7       	brne	.-6      	; 0x1590 <main+0x3d8>
    1596:	11 97       	sbiw	r26, 0x01	; 1
    1598:	87 e0       	ldi	r24, 0x07	; 7
    159a:	e2 e7       	ldi	r30, 0x72	; 114
    159c:	f2 e0       	ldi	r31, 0x02	; 2
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	8a 95       	dec	r24
    15a4:	e1 f7       	brne	.-8      	; 0x159e <main+0x3e6>
			strcat(buffer, ipString);
    15a6:	6c eb       	ldi	r22, 0xBC	; 188
    15a8:	72 e0       	ldi	r23, 0x02	; 2
    15aa:	82 2d       	mov	r24, r2
    15ac:	93 2d       	mov	r25, r3
    15ae:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "\r\n");
    15b2:	f8 01       	movw	r30, r16
    15b4:	01 90       	ld	r0, Z+
    15b6:	00 20       	and	r0, r0
    15b8:	e9 f7       	brne	.-6      	; 0x15b4 <main+0x3fc>
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	d1 82       	std	Z+1, r13	; 0x01
    15be:	c0 82       	st	Z, r12
    15c0:	12 82       	std	Z+2, r1	; 0x02
            strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    15c2:	d8 01       	movw	r26, r16
    15c4:	0d 90       	ld	r0, X+
    15c6:	00 20       	and	r0, r0
    15c8:	e9 f7       	brne	.-6      	; 0x15c4 <main+0x40c>
    15ca:	11 97       	sbiw	r26, 0x01	; 1
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	e9 e7       	ldi	r30, 0x79	; 121
    15d0:	f2 e0       	ldi	r31, 0x02	; 2
    15d2:	01 90       	ld	r0, Z+
    15d4:	0d 92       	st	X+, r0
    15d6:	8a 95       	dec	r24
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <main+0x41a>
            serialStringLN(buffer);
    15da:	82 2d       	mov	r24, r2
    15dc:	93 2d       	mov	r25, r3
    15de:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
            send(buffer,strlen(buffer));
    15e2:	f8 01       	movw	r30, r16
    15e4:	01 90       	ld	r0, Z+
    15e6:	00 20       	and	r0, r0
    15e8:	e9 f7       	brne	.-6      	; 0x15e4 <main+0x42c>
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	bf 01       	movw	r22, r30
    15ee:	60 5e       	subi	r22, 0xE0	; 224
    15f0:	72 40       	sbci	r23, 0x02	; 2
    15f2:	82 2d       	mov	r24, r2
    15f4:	93 2d       	mov	r25, r3
    15f6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
            listen();
    15fa:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
            while(receiveSize()<=0);
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    160c:	89 2b       	or	r24, r25
    160e:	e1 f3       	breq	.-8      	; 0x1608 <main+0x450>
            uint16_t size=receiveSize();
    1610:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
            receive(buffer,size);
    1614:	bc 01       	movw	r22, r24
    1616:	82 2d       	mov	r24, r2
    1618:	93 2d       	mov	r25, r3
    161a:	0e 94 10 03 	call	0x620	; 0x620 <receive>
            //serialStringLN(buffer);
            serialStringLN("ok");
    161e:	89 e9       	ldi	r24, 0x99	; 153
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
            strcpy(buffer,"");
    1626:	f8 01       	movw	r30, r16
    1628:	10 82       	st	Z, r1
            strcpy(bufferTemp,"");
    162a:	19 82       	std	Y+1, r1	; 0x01
            disconnect();
    162c:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
			
			// Umidade DHT22
			dhtRead();
    1630:	0e 94 1c 04 	call	0x838	; 0x838 <dhtRead>
			connect(server,SERVER_PORT,port);
    1634:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1638:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    163c:	60 e4       	ldi	r22, 0x40	; 64
    163e:	7f e1       	ldi	r23, 0x1F	; 31
    1640:	86 e5       	ldi	r24, 0x56	; 86
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 89 03 	call	0x712	; 0x712 <connect>
			strcat(buffer,"POST /API/dados/real/");
    1648:	d8 01       	movw	r26, r16
    164a:	0d 90       	ld	r0, X+
    164c:	00 20       	and	r0, r0
    164e:	e9 f7       	brne	.-6      	; 0x164a <main+0x492>
    1650:	11 97       	sbiw	r26, 0x01	; 1
    1652:	86 e1       	ldi	r24, 0x16	; 22
    1654:	e8 e4       	ldi	r30, 0x48	; 72
    1656:	f2 e0       	ldi	r31, 0x02	; 2
    1658:	01 90       	ld	r0, Z+
    165a:	0d 92       	st	X+, r0
    165c:	8a 95       	dec	r24
    165e:	e1 f7       	brne	.-8      	; 0x1658 <main+0x4a0>
			strcat(buffer, token[1]);
    1660:	62 e1       	ldi	r22, 0x12	; 18
    1662:	71 e0       	ldi	r23, 0x01	; 1
    1664:	82 2d       	mov	r24, r2
    1666:	93 2d       	mov	r25, r3
    1668:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "?valor=");
    166c:	d8 01       	movw	r26, r16
    166e:	0d 90       	ld	r0, X+
    1670:	00 20       	and	r0, r0
    1672:	e9 f7       	brne	.-6      	; 0x166e <main+0x4b6>
    1674:	11 97       	sbiw	r26, 0x01	; 1
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	ee e5       	ldi	r30, 0x5E	; 94
    167a:	f2 e0       	ldi	r31, 0x02	; 2
    167c:	01 90       	ld	r0, Z+
    167e:	0d 92       	st	X+, r0
    1680:	8a 95       	dec	r24
    1682:	e1 f7       	brne	.-8      	; 0x167c <main+0x4c4>
   return 1;
}


uint16_t humidity(){
	return HM;
    1684:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <HM>
    1688:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <HM+0x1>
    168c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <HM>
    1690:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <HM+0x1>
    1694:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <HM>
    1698:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <HM+0x1>
			//char bufferTemp[10]="";
			sprintf(bufferTemp,"%d.%d",humidity(),((humidity() - ((int) humidity()))*10) );
    169c:	28 1b       	sub	r18, r24
    169e:	39 0b       	sbc	r19, r25
    16a0:	c9 01       	movw	r24, r18
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	22 0f       	add	r18, r18
    16a8:	33 1f       	adc	r19, r19
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	9f 93       	push	r25
    16b8:	8f 93       	push	r24
    16ba:	5f 93       	push	r21
    16bc:	4f 93       	push	r20
    16be:	5f 92       	push	r5
    16c0:	4f 92       	push	r4
    16c2:	ff 92       	push	r15
    16c4:	ef 92       	push	r14
    16c6:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
			strcat(buffer,bufferTemp);
    16ca:	68 2d       	mov	r22, r8
    16cc:	79 2d       	mov	r23, r9
    16ce:	82 2d       	mov	r24, r2
    16d0:	93 2d       	mov	r25, r3
    16d2:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    16d6:	d8 01       	movw	r26, r16
    16d8:	0d 90       	ld	r0, X+
    16da:	00 20       	and	r0, r0
    16dc:	e9 f7       	brne	.-6      	; 0x16d8 <main+0x520>
    16de:	11 97       	sbiw	r26, 0x01	; 1
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	e6 e6       	ldi	r30, 0x66	; 102
    16e4:	f2 e0       	ldi	r31, 0x02	; 2
    16e6:	01 90       	ld	r0, Z+
    16e8:	0d 92       	st	X+, r0
    16ea:	8a 95       	dec	r24
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <main+0x52e>
			strcat(buffer,"Host: ");
    16ee:	d8 01       	movw	r26, r16
    16f0:	0d 90       	ld	r0, X+
    16f2:	00 20       	and	r0, r0
    16f4:	e9 f7       	brne	.-6      	; 0x16f0 <main+0x538>
    16f6:	11 97       	sbiw	r26, 0x01	; 1
    16f8:	87 e0       	ldi	r24, 0x07	; 7
    16fa:	e2 e7       	ldi	r30, 0x72	; 114
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	01 90       	ld	r0, Z+
    1700:	0d 92       	st	X+, r0
    1702:	8a 95       	dec	r24
    1704:	e1 f7       	brne	.-8      	; 0x16fe <main+0x546>
			strcat(buffer, ipString);
    1706:	6c eb       	ldi	r22, 0xBC	; 188
    1708:	72 e0       	ldi	r23, 0x02	; 2
    170a:	82 2d       	mov	r24, r2
    170c:	93 2d       	mov	r25, r3
    170e:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "\r\n");
    1712:	f8 01       	movw	r30, r16
    1714:	01 90       	ld	r0, Z+
    1716:	00 20       	and	r0, r0
    1718:	e9 f7       	brne	.-6      	; 0x1714 <main+0x55c>
    171a:	31 97       	sbiw	r30, 0x01	; 1
    171c:	d1 82       	std	Z+1, r13	; 0x01
    171e:	c0 82       	st	Z, r12
    1720:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    1722:	d8 01       	movw	r26, r16
    1724:	0d 90       	ld	r0, X+
    1726:	00 20       	and	r0, r0
    1728:	e9 f7       	brne	.-6      	; 0x1724 <main+0x56c>
    172a:	11 97       	sbiw	r26, 0x01	; 1
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	e9 e7       	ldi	r30, 0x79	; 121
    1730:	f2 e0       	ldi	r31, 0x02	; 2
    1732:	01 90       	ld	r0, Z+
    1734:	0d 92       	st	X+, r0
    1736:	8a 95       	dec	r24
    1738:	e1 f7       	brne	.-8      	; 0x1732 <main+0x57a>
			serialStringLN(buffer);
    173a:	82 2d       	mov	r24, r2
    173c:	93 2d       	mov	r25, r3
    173e:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    1742:	f8 01       	movw	r30, r16
    1744:	01 90       	ld	r0, Z+
    1746:	00 20       	and	r0, r0
    1748:	e9 f7       	brne	.-6      	; 0x1744 <main+0x58c>
    174a:	31 97       	sbiw	r30, 0x01	; 1
    174c:	bf 01       	movw	r22, r30
    174e:	60 5e       	subi	r22, 0xE0	; 224
    1750:	72 40       	sbci	r23, 0x02	; 2
    1752:	82 2d       	mov	r24, r2
    1754:	93 2d       	mov	r25, r3
    1756:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    175a:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    176c:	89 2b       	or	r24, r25
    176e:	e1 f3       	breq	.-8      	; 0x1768 <main+0x5b0>
			size=receiveSize();
    1770:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
			receive(buffer,size);
    1774:	bc 01       	movw	r22, r24
    1776:	82 2d       	mov	r24, r2
    1778:	93 2d       	mov	r25, r3
    177a:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    177e:	89 e9       	ldi	r24, 0x99	; 153
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    1786:	f8 01       	movw	r30, r16
    1788:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    178a:	19 82       	std	Y+1, r1	; 0x01
			disconnect();
    178c:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
			
			// Pressão BMP085
			connect(server,SERVER_PORT,port);
    1790:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1794:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    1798:	60 e4       	ldi	r22, 0x40	; 64
    179a:	7f e1       	ldi	r23, 0x1F	; 31
    179c:	86 e5       	ldi	r24, 0x56	; 86
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	0e 94 89 03 	call	0x712	; 0x712 <connect>
			strcat(buffer,"POST /API/dados/real/");
    17a4:	d8 01       	movw	r26, r16
    17a6:	0d 90       	ld	r0, X+
    17a8:	00 20       	and	r0, r0
    17aa:	e9 f7       	brne	.-6      	; 0x17a6 <main+0x5ee>
    17ac:	11 97       	sbiw	r26, 0x01	; 1
    17ae:	86 e1       	ldi	r24, 0x16	; 22
    17b0:	e8 e4       	ldi	r30, 0x48	; 72
    17b2:	f2 e0       	ldi	r31, 0x02	; 2
    17b4:	01 90       	ld	r0, Z+
    17b6:	0d 92       	st	X+, r0
    17b8:	8a 95       	dec	r24
    17ba:	e1 f7       	brne	.-8      	; 0x17b4 <main+0x5fc>
			strcat(buffer, token[2]);
    17bc:	62 e2       	ldi	r22, 0x22	; 34
    17be:	71 e0       	ldi	r23, 0x01	; 1
    17c0:	82 2d       	mov	r24, r2
    17c2:	93 2d       	mov	r25, r3
    17c4:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "?valor=");
    17c8:	d8 01       	movw	r26, r16
    17ca:	0d 90       	ld	r0, X+
    17cc:	00 20       	and	r0, r0
    17ce:	e9 f7       	brne	.-6      	; 0x17ca <main+0x612>
    17d0:	11 97       	sbiw	r26, 0x01	; 1
    17d2:	88 e0       	ldi	r24, 0x08	; 8
    17d4:	ee e5       	ldi	r30, 0x5E	; 94
    17d6:	f2 e0       	ldi	r31, 0x02	; 2
    17d8:	01 90       	ld	r0, Z+
    17da:	0d 92       	st	X+, r0
    17dc:	8a 95       	dec	r24
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <main+0x620>
			//char bufferTemp[10]="";
			sprintf(bufferTemp,"%ld",readPressure());
    17e0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <readPressure>
    17e4:	9f 93       	push	r25
    17e6:	8f 93       	push	r24
    17e8:	7f 93       	push	r23
    17ea:	6f 93       	push	r22
    17ec:	7f 92       	push	r7
    17ee:	6f 92       	push	r6
    17f0:	ff 92       	push	r15
    17f2:	ef 92       	push	r14
    17f4:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
			strcat(buffer,bufferTemp);
    17f8:	68 2d       	mov	r22, r8
    17fa:	79 2d       	mov	r23, r9
    17fc:	82 2d       	mov	r24, r2
    17fe:	93 2d       	mov	r25, r3
    1800:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    1804:	d8 01       	movw	r26, r16
    1806:	0d 90       	ld	r0, X+
    1808:	00 20       	and	r0, r0
    180a:	e9 f7       	brne	.-6      	; 0x1806 <main+0x64e>
    180c:	11 97       	sbiw	r26, 0x01	; 1
    180e:	8c e0       	ldi	r24, 0x0C	; 12
    1810:	e6 e6       	ldi	r30, 0x66	; 102
    1812:	f2 e0       	ldi	r31, 0x02	; 2
    1814:	01 90       	ld	r0, Z+
    1816:	0d 92       	st	X+, r0
    1818:	8a 95       	dec	r24
    181a:	e1 f7       	brne	.-8      	; 0x1814 <main+0x65c>
			strcat(buffer,"Host: ");
    181c:	d8 01       	movw	r26, r16
    181e:	0d 90       	ld	r0, X+
    1820:	00 20       	and	r0, r0
    1822:	e9 f7       	brne	.-6      	; 0x181e <main+0x666>
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	87 e0       	ldi	r24, 0x07	; 7
    1828:	e2 e7       	ldi	r30, 0x72	; 114
    182a:	f2 e0       	ldi	r31, 0x02	; 2
    182c:	01 90       	ld	r0, Z+
    182e:	0d 92       	st	X+, r0
    1830:	8a 95       	dec	r24
    1832:	e1 f7       	brne	.-8      	; 0x182c <main+0x674>
			strcat(buffer, ipString);
    1834:	6c eb       	ldi	r22, 0xBC	; 188
    1836:	72 e0       	ldi	r23, 0x02	; 2
    1838:	82 2d       	mov	r24, r2
    183a:	93 2d       	mov	r25, r3
    183c:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "\r\n");
    1840:	f8 01       	movw	r30, r16
    1842:	01 90       	ld	r0, Z+
    1844:	00 20       	and	r0, r0
    1846:	e9 f7       	brne	.-6      	; 0x1842 <main+0x68a>
    1848:	31 97       	sbiw	r30, 0x01	; 1
    184a:	d1 82       	std	Z+1, r13	; 0x01
    184c:	c0 82       	st	Z, r12
    184e:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    1850:	d8 01       	movw	r26, r16
    1852:	0d 90       	ld	r0, X+
    1854:	00 20       	and	r0, r0
    1856:	e9 f7       	brne	.-6      	; 0x1852 <main+0x69a>
    1858:	11 97       	sbiw	r26, 0x01	; 1
    185a:	80 e2       	ldi	r24, 0x20	; 32
    185c:	e9 e7       	ldi	r30, 0x79	; 121
    185e:	f2 e0       	ldi	r31, 0x02	; 2
    1860:	01 90       	ld	r0, Z+
    1862:	0d 92       	st	X+, r0
    1864:	8a 95       	dec	r24
    1866:	e1 f7       	brne	.-8      	; 0x1860 <main+0x6a8>
			serialStringLN(buffer);
    1868:	82 2d       	mov	r24, r2
    186a:	93 2d       	mov	r25, r3
    186c:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    1870:	f8 01       	movw	r30, r16
    1872:	01 90       	ld	r0, Z+
    1874:	00 20       	and	r0, r0
    1876:	e9 f7       	brne	.-6      	; 0x1872 <main+0x6ba>
    1878:	31 97       	sbiw	r30, 0x01	; 1
    187a:	bf 01       	movw	r22, r30
    187c:	60 5e       	subi	r22, 0xE0	; 224
    187e:	72 40       	sbci	r23, 0x02	; 2
    1880:	82 2d       	mov	r24, r2
    1882:	93 2d       	mov	r25, r3
    1884:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    1888:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    189a:	89 2b       	or	r24, r25
    189c:	e1 f3       	breq	.-8      	; 0x1896 <main+0x6de>
			size=receiveSize();
    189e:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
			receive(buffer,size);
    18a2:	bc 01       	movw	r22, r24
    18a4:	82 2d       	mov	r24, r2
    18a6:	93 2d       	mov	r25, r3
    18a8:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    18ac:	89 e9       	ldi	r24, 0x99	; 153
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    18b4:	f8 01       	movw	r30, r16
    18b6:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    18b8:	19 82       	std	Y+1, r1	; 0x01
			disconnect();
    18ba:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
			
			// Temperatura BMP85
			connect(server,SERVER_PORT,port);
    18be:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    18c2:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    18c6:	60 e4       	ldi	r22, 0x40	; 64
    18c8:	7f e1       	ldi	r23, 0x1F	; 31
    18ca:	86 e5       	ldi	r24, 0x56	; 86
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 89 03 	call	0x712	; 0x712 <connect>
			strcat(buffer,"POST /API/dados/real/");
    18d2:	d8 01       	movw	r26, r16
    18d4:	0d 90       	ld	r0, X+
    18d6:	00 20       	and	r0, r0
    18d8:	e9 f7       	brne	.-6      	; 0x18d4 <main+0x71c>
    18da:	11 97       	sbiw	r26, 0x01	; 1
    18dc:	86 e1       	ldi	r24, 0x16	; 22
    18de:	e8 e4       	ldi	r30, 0x48	; 72
    18e0:	f2 e0       	ldi	r31, 0x02	; 2
    18e2:	01 90       	ld	r0, Z+
    18e4:	0d 92       	st	X+, r0
    18e6:	8a 95       	dec	r24
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <main+0x72a>
			strcat(buffer, token[3]);
    18ea:	62 e3       	ldi	r22, 0x32	; 50
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	82 2d       	mov	r24, r2
    18f0:	93 2d       	mov	r25, r3
    18f2:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "?valor=");
    18f6:	d8 01       	movw	r26, r16
    18f8:	0d 90       	ld	r0, X+
    18fa:	00 20       	and	r0, r0
    18fc:	e9 f7       	brne	.-6      	; 0x18f8 <main+0x740>
    18fe:	11 97       	sbiw	r26, 0x01	; 1
    1900:	88 e0       	ldi	r24, 0x08	; 8
    1902:	ee e5       	ldi	r30, 0x5E	; 94
    1904:	f2 e0       	ldi	r31, 0x02	; 2
    1906:	01 90       	ld	r0, Z+
    1908:	0d 92       	st	X+, r0
    190a:	8a 95       	dec	r24
    190c:	e1 f7       	brne	.-8      	; 0x1906 <main+0x74e>
			//char bufferTemp[10]="";
			sprintf(bufferTemp,"%d.%d",readTemperature()/10,readTemperature()%10);
    190e:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    1912:	9e 87       	std	Y+14, r25	; 0x0e
    1914:	8d 87       	std	Y+13, r24	; 0x0d
    1916:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    191a:	9c 01       	movw	r18, r24
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	b5 01       	movw	r22, r10
    1922:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	c9 01       	movw	r24, r18
    192c:	b5 01       	movw	r22, r10
    192e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
    1932:	7f 93       	push	r23
    1934:	6f 93       	push	r22
    1936:	5f 92       	push	r5
    1938:	4f 92       	push	r4
    193a:	ff 92       	push	r15
    193c:	ef 92       	push	r14
    193e:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
			strcat(buffer,bufferTemp);
    1942:	68 2d       	mov	r22, r8
    1944:	79 2d       	mov	r23, r9
    1946:	82 2d       	mov	r24, r2
    1948:	93 2d       	mov	r25, r3
    194a:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    194e:	d8 01       	movw	r26, r16
    1950:	0d 90       	ld	r0, X+
    1952:	00 20       	and	r0, r0
    1954:	e9 f7       	brne	.-6      	; 0x1950 <main+0x798>
    1956:	11 97       	sbiw	r26, 0x01	; 1
    1958:	8c e0       	ldi	r24, 0x0C	; 12
    195a:	e6 e6       	ldi	r30, 0x66	; 102
    195c:	f2 e0       	ldi	r31, 0x02	; 2
    195e:	01 90       	ld	r0, Z+
    1960:	0d 92       	st	X+, r0
    1962:	8a 95       	dec	r24
    1964:	e1 f7       	brne	.-8      	; 0x195e <main+0x7a6>
			strcat(buffer,"Host: ");
    1966:	d8 01       	movw	r26, r16
    1968:	0d 90       	ld	r0, X+
    196a:	00 20       	and	r0, r0
    196c:	e9 f7       	brne	.-6      	; 0x1968 <main+0x7b0>
    196e:	11 97       	sbiw	r26, 0x01	; 1
    1970:	87 e0       	ldi	r24, 0x07	; 7
    1972:	e2 e7       	ldi	r30, 0x72	; 114
    1974:	f2 e0       	ldi	r31, 0x02	; 2
    1976:	01 90       	ld	r0, Z+
    1978:	0d 92       	st	X+, r0
    197a:	8a 95       	dec	r24
    197c:	e1 f7       	brne	.-8      	; 0x1976 <main+0x7be>
			strcat(buffer, ipString);
    197e:	6c eb       	ldi	r22, 0xBC	; 188
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	82 2d       	mov	r24, r2
    1984:	93 2d       	mov	r25, r3
    1986:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "\r\n");
    198a:	f8 01       	movw	r30, r16
    198c:	01 90       	ld	r0, Z+
    198e:	00 20       	and	r0, r0
    1990:	e9 f7       	brne	.-6      	; 0x198c <main+0x7d4>
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	d1 82       	std	Z+1, r13	; 0x01
    1996:	c0 82       	st	Z, r12
    1998:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    199a:	d8 01       	movw	r26, r16
    199c:	0d 90       	ld	r0, X+
    199e:	00 20       	and	r0, r0
    19a0:	e9 f7       	brne	.-6      	; 0x199c <main+0x7e4>
    19a2:	11 97       	sbiw	r26, 0x01	; 1
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	e9 e7       	ldi	r30, 0x79	; 121
    19a8:	f2 e0       	ldi	r31, 0x02	; 2
    19aa:	01 90       	ld	r0, Z+
    19ac:	0d 92       	st	X+, r0
    19ae:	8a 95       	dec	r24
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <main+0x7f2>
			serialStringLN(buffer);
    19b2:	82 2d       	mov	r24, r2
    19b4:	93 2d       	mov	r25, r3
    19b6:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    19ba:	f8 01       	movw	r30, r16
    19bc:	01 90       	ld	r0, Z+
    19be:	00 20       	and	r0, r0
    19c0:	e9 f7       	brne	.-6      	; 0x19bc <main+0x804>
    19c2:	31 97       	sbiw	r30, 0x01	; 1
    19c4:	bf 01       	movw	r22, r30
    19c6:	60 5e       	subi	r22, 0xE0	; 224
    19c8:	72 40       	sbci	r23, 0x02	; 2
    19ca:	82 2d       	mov	r24, r2
    19cc:	93 2d       	mov	r25, r3
    19ce:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    19d2:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    19e4:	89 2b       	or	r24, r25
    19e6:	e1 f3       	breq	.-8      	; 0x19e0 <main+0x828>
			size=receiveSize();
    19e8:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
			receive(buffer,size);
    19ec:	bc 01       	movw	r22, r24
    19ee:	82 2d       	mov	r24, r2
    19f0:	93 2d       	mov	r25, r3
    19f2:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    19f6:	89 e9       	ldi	r24, 0x99	; 153
    19f8:	92 e0       	ldi	r25, 0x02	; 2
    19fa:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    19fe:	f8 01       	movw	r30, r16
    1a00:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    1a02:	19 82       	std	Y+1, r1	; 0x01
			disconnect();
    1a04:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
			
			// Altitude BMP85
			connect(server,SERVER_PORT,port);
    1a08:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1a0c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    1a10:	60 e4       	ldi	r22, 0x40	; 64
    1a12:	7f e1       	ldi	r23, 0x1F	; 31
    1a14:	86 e5       	ldi	r24, 0x56	; 86
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	0e 94 89 03 	call	0x712	; 0x712 <connect>
			strcat(buffer,"POST /API/dados/real/");
    1a1c:	d8 01       	movw	r26, r16
    1a1e:	0d 90       	ld	r0, X+
    1a20:	00 20       	and	r0, r0
    1a22:	e9 f7       	brne	.-6      	; 0x1a1e <main+0x866>
    1a24:	11 97       	sbiw	r26, 0x01	; 1
    1a26:	86 e1       	ldi	r24, 0x16	; 22
    1a28:	e8 e4       	ldi	r30, 0x48	; 72
    1a2a:	f2 e0       	ldi	r31, 0x02	; 2
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	0d 92       	st	X+, r0
    1a30:	8a 95       	dec	r24
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <main+0x874>
			strcat(buffer, token[4]);
    1a34:	62 e4       	ldi	r22, 0x42	; 66
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	82 2d       	mov	r24, r2
    1a3a:	93 2d       	mov	r25, r3
    1a3c:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "?valor=");
    1a40:	d8 01       	movw	r26, r16
    1a42:	0d 90       	ld	r0, X+
    1a44:	00 20       	and	r0, r0
    1a46:	e9 f7       	brne	.-6      	; 0x1a42 <main+0x88a>
    1a48:	11 97       	sbiw	r26, 0x01	; 1
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	ee e5       	ldi	r30, 0x5E	; 94
    1a4e:	f2 e0       	ldi	r31, 0x02	; 2
    1a50:	01 90       	ld	r0, Z+
    1a52:	0d 92       	st	X+, r0
    1a54:	8a 95       	dec	r24
    1a56:	e1 f7       	brne	.-8      	; 0x1a50 <main+0x898>
			//char bufferTemp[10]="";
			sprintf(bufferTemp,"%d.%d",((int) readAbsAltitude()), ((int) readAbsAltitude())%10);
    1a58:	0e 94 bd 08 	call	0x117a	; 0x117a <readAbsAltitude>
    1a5c:	6d 87       	std	Y+13, r22	; 0x0d
    1a5e:	7e 87       	std	Y+14, r23	; 0x0e
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	0e 94 bd 08 	call	0x117a	; 0x117a <readAbsAltitude>
    1a68:	69 8b       	std	Y+17, r22	; 0x11
    1a6a:	7a 8b       	std	Y+18, r23	; 0x12
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a72:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	98 89       	ldd	r25, Y+16	; 0x10
    1a78:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fixsfsi>
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	b5 01       	movw	r22, r10
    1a80:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	69 89       	ldd	r22, Y+17	; 0x11
    1a8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a90:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fixsfsi>
    1a94:	7f 93       	push	r23
    1a96:	6f 93       	push	r22
    1a98:	5f 92       	push	r5
    1a9a:	4f 92       	push	r4
    1a9c:	ff 92       	push	r15
    1a9e:	ef 92       	push	r14
    1aa0:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
			strcat(buffer,bufferTemp);
    1aa4:	68 2d       	mov	r22, r8
    1aa6:	79 2d       	mov	r23, r9
    1aa8:	82 2d       	mov	r24, r2
    1aaa:	93 2d       	mov	r25, r3
    1aac:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    1ab0:	d8 01       	movw	r26, r16
    1ab2:	0d 90       	ld	r0, X+
    1ab4:	00 20       	and	r0, r0
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2 <main+0x8fa>
    1ab8:	11 97       	sbiw	r26, 0x01	; 1
    1aba:	8c e0       	ldi	r24, 0x0C	; 12
    1abc:	e6 e6       	ldi	r30, 0x66	; 102
    1abe:	f2 e0       	ldi	r31, 0x02	; 2
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	0d 92       	st	X+, r0
    1ac4:	8a 95       	dec	r24
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <main+0x908>
			strcat(buffer,"Host: ");
    1ac8:	d8 01       	movw	r26, r16
    1aca:	0d 90       	ld	r0, X+
    1acc:	00 20       	and	r0, r0
    1ace:	e9 f7       	brne	.-6      	; 0x1aca <main+0x912>
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	87 e0       	ldi	r24, 0x07	; 7
    1ad4:	e2 e7       	ldi	r30, 0x72	; 114
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	8a 95       	dec	r24
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <main+0x920>
			strcat(buffer, ipString);
    1ae0:	6c eb       	ldi	r22, 0xBC	; 188
    1ae2:	72 e0       	ldi	r23, 0x02	; 2
    1ae4:	82 2d       	mov	r24, r2
    1ae6:	93 2d       	mov	r25, r3
    1ae8:	0e 94 04 12 	call	0x2408	; 0x2408 <strcat>
			strcat(buffer, "\r\n");
    1aec:	f8 01       	movw	r30, r16
    1aee:	01 90       	ld	r0, Z+
    1af0:	00 20       	and	r0, r0
    1af2:	e9 f7       	brne	.-6      	; 0x1aee <main+0x936>
    1af4:	31 97       	sbiw	r30, 0x01	; 1
    1af6:	d1 82       	std	Z+1, r13	; 0x01
    1af8:	c0 82       	st	Z, r12
    1afa:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    1afc:	d8 01       	movw	r26, r16
    1afe:	0d 90       	ld	r0, X+
    1b00:	00 20       	and	r0, r0
    1b02:	e9 f7       	brne	.-6      	; 0x1afe <main+0x946>
    1b04:	11 97       	sbiw	r26, 0x01	; 1
    1b06:	80 e2       	ldi	r24, 0x20	; 32
    1b08:	e9 e7       	ldi	r30, 0x79	; 121
    1b0a:	f2 e0       	ldi	r31, 0x02	; 2
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	0d 92       	st	X+, r0
    1b10:	8a 95       	dec	r24
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <main+0x954>
			serialStringLN(buffer);
    1b14:	82 2d       	mov	r24, r2
    1b16:	93 2d       	mov	r25, r3
    1b18:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	01 90       	ld	r0, Z+
    1b20:	00 20       	and	r0, r0
    1b22:	e9 f7       	brne	.-6      	; 0x1b1e <main+0x966>
    1b24:	31 97       	sbiw	r30, 0x01	; 1
    1b26:	bf 01       	movw	r22, r30
    1b28:	60 5e       	subi	r22, 0xE0	; 224
    1b2a:	72 40       	sbci	r23, 0x02	; 2
    1b2c:	82 2d       	mov	r24, r2
    1b2e:	93 2d       	mov	r25, r3
    1b30:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    1b34:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1b46:	89 2b       	or	r24, r25
    1b48:	e1 f3       	breq	.-8      	; 0x1b42 <main+0x98a>
			size=receiveSize();
    1b4a:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
			receive(buffer,size);
    1b4e:	bc 01       	movw	r22, r24
    1b50:	82 2d       	mov	r24, r2
    1b52:	93 2d       	mov	r25, r3
    1b54:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    1b58:	89 e9       	ldi	r24, 0x99	; 153
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    1b60:	f8 01       	movw	r30, r16
    1b62:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    1b64:	19 82       	std	Y+1, r1	; 0x01
			disconnect();
    1b66:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <main+0x9c0>
        }else{
            serialStringLN("Erro de conexão em execução");
    1b6c:	8c e9       	ldi	r24, 0x9C	; 156
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
            disconnect();
    1b74:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1b78:	ff ef       	ldi	r31, 0xFF	; 255
    1b7a:	23 e2       	ldi	r18, 0x23	; 35
    1b7c:	84 ef       	ldi	r24, 0xF4	; 244
    1b7e:	f1 50       	subi	r31, 0x01	; 1
    1b80:	20 40       	sbci	r18, 0x00	; 0
    1b82:	80 40       	sbci	r24, 0x00	; 0
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <main+0x9c6>
    1b86:	00 c0       	rjmp	.+0      	; 0x1b88 <main+0x9d0>
    1b88:	00 00       	nop

        }
        _delay_ms(5000);
        if(port>4000)
    1b8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1b8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1b92:	81 3a       	cpi	r24, 0xA1	; 161
    1b94:	9f 40       	sbci	r25, 0x0F	; 15
    1b96:	08 f4       	brcc	.+2      	; 0x1b9a <main+0x9e2>
    1b98:	80 cc       	rjmp	.-1792   	; 0x149a <main+0x2e2>
            port=100;
    1b9a:	84 e6       	ldi	r24, 0x64	; 100
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1ba2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1ba6:	79 cc       	rjmp	.-1806   	; 0x149a <main+0x2e2>

00001ba8 <__subsf3>:
    1ba8:	50 58       	subi	r21, 0x80	; 128

00001baa <__addsf3>:
    1baa:	bb 27       	eor	r27, r27
    1bac:	aa 27       	eor	r26, r26
    1bae:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3x>
    1bb2:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_round>
    1bb6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__fp_pscA>
    1bba:	38 f0       	brcs	.+14     	; 0x1bca <__addsf3+0x20>
    1bbc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fp_pscB>
    1bc0:	20 f0       	brcs	.+8      	; 0x1bca <__addsf3+0x20>
    1bc2:	39 f4       	brne	.+14     	; 0x1bd2 <__addsf3+0x28>
    1bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc6:	19 f4       	brne	.+6      	; 0x1bce <__addsf3+0x24>
    1bc8:	26 f4       	brtc	.+8      	; 0x1bd2 <__addsf3+0x28>
    1bca:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__fp_nan>
    1bce:	0e f4       	brtc	.+2      	; 0x1bd2 <__addsf3+0x28>
    1bd0:	e0 95       	com	r30
    1bd2:	e7 fb       	bst	r30, 7
    1bd4:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>

00001bd8 <__addsf3x>:
    1bd8:	e9 2f       	mov	r30, r25
    1bda:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__fp_split3>
    1bde:	58 f3       	brcs	.-42     	; 0x1bb6 <__addsf3+0xc>
    1be0:	ba 17       	cp	r27, r26
    1be2:	62 07       	cpc	r22, r18
    1be4:	73 07       	cpc	r23, r19
    1be6:	84 07       	cpc	r24, r20
    1be8:	95 07       	cpc	r25, r21
    1bea:	20 f0       	brcs	.+8      	; 0x1bf4 <__addsf3x+0x1c>
    1bec:	79 f4       	brne	.+30     	; 0x1c0c <__addsf3x+0x34>
    1bee:	a6 f5       	brtc	.+104    	; 0x1c58 <__addsf3x+0x80>
    1bf0:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__fp_zero>
    1bf4:	0e f4       	brtc	.+2      	; 0x1bf8 <__addsf3x+0x20>
    1bf6:	e0 95       	com	r30
    1bf8:	0b 2e       	mov	r0, r27
    1bfa:	ba 2f       	mov	r27, r26
    1bfc:	a0 2d       	mov	r26, r0
    1bfe:	0b 01       	movw	r0, r22
    1c00:	b9 01       	movw	r22, r18
    1c02:	90 01       	movw	r18, r0
    1c04:	0c 01       	movw	r0, r24
    1c06:	ca 01       	movw	r24, r20
    1c08:	a0 01       	movw	r20, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	ff 27       	eor	r31, r31
    1c0e:	59 1b       	sub	r21, r25
    1c10:	99 f0       	breq	.+38     	; 0x1c38 <__addsf3x+0x60>
    1c12:	59 3f       	cpi	r21, 0xF9	; 249
    1c14:	50 f4       	brcc	.+20     	; 0x1c2a <__addsf3x+0x52>
    1c16:	50 3e       	cpi	r21, 0xE0	; 224
    1c18:	68 f1       	brcs	.+90     	; 0x1c74 <__addsf3x+0x9c>
    1c1a:	1a 16       	cp	r1, r26
    1c1c:	f0 40       	sbci	r31, 0x00	; 0
    1c1e:	a2 2f       	mov	r26, r18
    1c20:	23 2f       	mov	r18, r19
    1c22:	34 2f       	mov	r19, r20
    1c24:	44 27       	eor	r20, r20
    1c26:	58 5f       	subi	r21, 0xF8	; 248
    1c28:	f3 cf       	rjmp	.-26     	; 0x1c10 <__addsf3x+0x38>
    1c2a:	46 95       	lsr	r20
    1c2c:	37 95       	ror	r19
    1c2e:	27 95       	ror	r18
    1c30:	a7 95       	ror	r26
    1c32:	f0 40       	sbci	r31, 0x00	; 0
    1c34:	53 95       	inc	r21
    1c36:	c9 f7       	brne	.-14     	; 0x1c2a <__addsf3x+0x52>
    1c38:	7e f4       	brtc	.+30     	; 0x1c58 <__addsf3x+0x80>
    1c3a:	1f 16       	cp	r1, r31
    1c3c:	ba 0b       	sbc	r27, r26
    1c3e:	62 0b       	sbc	r22, r18
    1c40:	73 0b       	sbc	r23, r19
    1c42:	84 0b       	sbc	r24, r20
    1c44:	ba f0       	brmi	.+46     	; 0x1c74 <__addsf3x+0x9c>
    1c46:	91 50       	subi	r25, 0x01	; 1
    1c48:	a1 f0       	breq	.+40     	; 0x1c72 <__addsf3x+0x9a>
    1c4a:	ff 0f       	add	r31, r31
    1c4c:	bb 1f       	adc	r27, r27
    1c4e:	66 1f       	adc	r22, r22
    1c50:	77 1f       	adc	r23, r23
    1c52:	88 1f       	adc	r24, r24
    1c54:	c2 f7       	brpl	.-16     	; 0x1c46 <__addsf3x+0x6e>
    1c56:	0e c0       	rjmp	.+28     	; 0x1c74 <__addsf3x+0x9c>
    1c58:	ba 0f       	add	r27, r26
    1c5a:	62 1f       	adc	r22, r18
    1c5c:	73 1f       	adc	r23, r19
    1c5e:	84 1f       	adc	r24, r20
    1c60:	48 f4       	brcc	.+18     	; 0x1c74 <__addsf3x+0x9c>
    1c62:	87 95       	ror	r24
    1c64:	77 95       	ror	r23
    1c66:	67 95       	ror	r22
    1c68:	b7 95       	ror	r27
    1c6a:	f7 95       	ror	r31
    1c6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <__addsf3x+0x9a>
    1c70:	b0 cf       	rjmp	.-160    	; 0x1bd2 <__addsf3+0x28>
    1c72:	93 95       	inc	r25
    1c74:	88 0f       	add	r24, r24
    1c76:	08 f0       	brcs	.+2      	; 0x1c7a <__addsf3x+0xa2>
    1c78:	99 27       	eor	r25, r25
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	97 95       	ror	r25
    1c7e:	87 95       	ror	r24
    1c80:	08 95       	ret

00001c82 <__divsf3>:
    1c82:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3x>
    1c86:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_round>
    1c8a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fp_pscB>
    1c8e:	58 f0       	brcs	.+22     	; 0x1ca6 <__divsf3+0x24>
    1c90:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__fp_pscA>
    1c94:	40 f0       	brcs	.+16     	; 0x1ca6 <__divsf3+0x24>
    1c96:	29 f4       	brne	.+10     	; 0x1ca2 <__divsf3+0x20>
    1c98:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9a:	29 f0       	breq	.+10     	; 0x1ca6 <__divsf3+0x24>
    1c9c:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>
    1ca0:	51 11       	cpse	r21, r1
    1ca2:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_szero>
    1ca6:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__fp_nan>

00001caa <__divsf3x>:
    1caa:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__fp_split3>
    1cae:	68 f3       	brcs	.-38     	; 0x1c8a <__divsf3+0x8>

00001cb0 <__divsf3_pse>:
    1cb0:	99 23       	and	r25, r25
    1cb2:	b1 f3       	breq	.-20     	; 0x1ca0 <__divsf3+0x1e>
    1cb4:	55 23       	and	r21, r21
    1cb6:	91 f3       	breq	.-28     	; 0x1c9c <__divsf3+0x1a>
    1cb8:	95 1b       	sub	r25, r21
    1cba:	55 0b       	sbc	r21, r21
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	aa 27       	eor	r26, r26
    1cc0:	62 17       	cp	r22, r18
    1cc2:	73 07       	cpc	r23, r19
    1cc4:	84 07       	cpc	r24, r20
    1cc6:	38 f0       	brcs	.+14     	; 0x1cd6 <__divsf3_pse+0x26>
    1cc8:	9f 5f       	subi	r25, 0xFF	; 255
    1cca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	44 1f       	adc	r20, r20
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	a9 f3       	breq	.-22     	; 0x1cc0 <__divsf3_pse+0x10>
    1cd6:	35 d0       	rcall	.+106    	; 0x1d42 <__divsf3_pse+0x92>
    1cd8:	0e 2e       	mov	r0, r30
    1cda:	3a f0       	brmi	.+14     	; 0x1cea <__divsf3_pse+0x3a>
    1cdc:	e0 e8       	ldi	r30, 0x80	; 128
    1cde:	32 d0       	rcall	.+100    	; 0x1d44 <__divsf3_pse+0x94>
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	e6 95       	lsr	r30
    1ce6:	00 1c       	adc	r0, r0
    1ce8:	ca f7       	brpl	.-14     	; 0x1cdc <__divsf3_pse+0x2c>
    1cea:	2b d0       	rcall	.+86     	; 0x1d42 <__divsf3_pse+0x92>
    1cec:	fe 2f       	mov	r31, r30
    1cee:	29 d0       	rcall	.+82     	; 0x1d42 <__divsf3_pse+0x92>
    1cf0:	66 0f       	add	r22, r22
    1cf2:	77 1f       	adc	r23, r23
    1cf4:	88 1f       	adc	r24, r24
    1cf6:	bb 1f       	adc	r27, r27
    1cf8:	26 17       	cp	r18, r22
    1cfa:	37 07       	cpc	r19, r23
    1cfc:	48 07       	cpc	r20, r24
    1cfe:	ab 07       	cpc	r26, r27
    1d00:	b0 e8       	ldi	r27, 0x80	; 128
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <__divsf3_pse+0x56>
    1d04:	bb 0b       	sbc	r27, r27
    1d06:	80 2d       	mov	r24, r0
    1d08:	bf 01       	movw	r22, r30
    1d0a:	ff 27       	eor	r31, r31
    1d0c:	93 58       	subi	r25, 0x83	; 131
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	3a f0       	brmi	.+14     	; 0x1d20 <__divsf3_pse+0x70>
    1d12:	9e 3f       	cpi	r25, 0xFE	; 254
    1d14:	51 05       	cpc	r21, r1
    1d16:	78 f0       	brcs	.+30     	; 0x1d36 <__divsf3_pse+0x86>
    1d18:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>
    1d1c:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_szero>
    1d20:	5f 3f       	cpi	r21, 0xFF	; 255
    1d22:	e4 f3       	brlt	.-8      	; 0x1d1c <__divsf3_pse+0x6c>
    1d24:	98 3e       	cpi	r25, 0xE8	; 232
    1d26:	d4 f3       	brlt	.-12     	; 0x1d1c <__divsf3_pse+0x6c>
    1d28:	86 95       	lsr	r24
    1d2a:	77 95       	ror	r23
    1d2c:	67 95       	ror	r22
    1d2e:	b7 95       	ror	r27
    1d30:	f7 95       	ror	r31
    1d32:	9f 5f       	subi	r25, 0xFF	; 255
    1d34:	c9 f7       	brne	.-14     	; 0x1d28 <__divsf3_pse+0x78>
    1d36:	88 0f       	add	r24, r24
    1d38:	91 1d       	adc	r25, r1
    1d3a:	96 95       	lsr	r25
    1d3c:	87 95       	ror	r24
    1d3e:	97 f9       	bld	r25, 7
    1d40:	08 95       	ret
    1d42:	e1 e0       	ldi	r30, 0x01	; 1
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	62 17       	cp	r22, r18
    1d4e:	73 07       	cpc	r23, r19
    1d50:	84 07       	cpc	r24, r20
    1d52:	ba 07       	cpc	r27, r26
    1d54:	20 f0       	brcs	.+8      	; 0x1d5e <__divsf3_pse+0xae>
    1d56:	62 1b       	sub	r22, r18
    1d58:	73 0b       	sbc	r23, r19
    1d5a:	84 0b       	sbc	r24, r20
    1d5c:	ba 0b       	sbc	r27, r26
    1d5e:	ee 1f       	adc	r30, r30
    1d60:	88 f7       	brcc	.-30     	; 0x1d44 <__divsf3_pse+0x94>
    1d62:	e0 95       	com	r30
    1d64:	08 95       	ret

00001d66 <__fixsfsi>:
    1d66:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
    1d6a:	68 94       	set
    1d6c:	b1 11       	cpse	r27, r1
    1d6e:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_szero>
    1d72:	08 95       	ret

00001d74 <__fixunssfsi>:
    1d74:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_splitA>
    1d78:	88 f0       	brcs	.+34     	; 0x1d9c <__fixunssfsi+0x28>
    1d7a:	9f 57       	subi	r25, 0x7F	; 127
    1d7c:	98 f0       	brcs	.+38     	; 0x1da4 <__fixunssfsi+0x30>
    1d7e:	b9 2f       	mov	r27, r25
    1d80:	99 27       	eor	r25, r25
    1d82:	b7 51       	subi	r27, 0x17	; 23
    1d84:	b0 f0       	brcs	.+44     	; 0x1db2 <__fixunssfsi+0x3e>
    1d86:	e1 f0       	breq	.+56     	; 0x1dc0 <__fixunssfsi+0x4c>
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	1a f0       	brmi	.+6      	; 0x1d98 <__fixunssfsi+0x24>
    1d92:	ba 95       	dec	r27
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <__fixunssfsi+0x14>
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <__fixunssfsi+0x4c>
    1d98:	b1 30       	cpi	r27, 0x01	; 1
    1d9a:	91 f0       	breq	.+36     	; 0x1dc0 <__fixunssfsi+0x4c>
    1d9c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__fp_zero>
    1da0:	b1 e0       	ldi	r27, 0x01	; 1
    1da2:	08 95       	ret
    1da4:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__fp_zero>
    1da8:	67 2f       	mov	r22, r23
    1daa:	78 2f       	mov	r23, r24
    1dac:	88 27       	eor	r24, r24
    1dae:	b8 5f       	subi	r27, 0xF8	; 248
    1db0:	39 f0       	breq	.+14     	; 0x1dc0 <__fixunssfsi+0x4c>
    1db2:	b9 3f       	cpi	r27, 0xF9	; 249
    1db4:	cc f3       	brlt	.-14     	; 0x1da8 <__fixunssfsi+0x34>
    1db6:	86 95       	lsr	r24
    1db8:	77 95       	ror	r23
    1dba:	67 95       	ror	r22
    1dbc:	b3 95       	inc	r27
    1dbe:	d9 f7       	brne	.-10     	; 0x1db6 <__fixunssfsi+0x42>
    1dc0:	3e f4       	brtc	.+14     	; 0x1dd0 <__fixunssfsi+0x5c>
    1dc2:	90 95       	com	r25
    1dc4:	80 95       	com	r24
    1dc6:	70 95       	com	r23
    1dc8:	61 95       	neg	r22
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	08 95       	ret

00001dd2 <__floatunsisf>:
    1dd2:	e8 94       	clt
    1dd4:	09 c0       	rjmp	.+18     	; 0x1de8 <__floatsisf+0x12>

00001dd6 <__floatsisf>:
    1dd6:	97 fb       	bst	r25, 7
    1dd8:	3e f4       	brtc	.+14     	; 0x1de8 <__floatsisf+0x12>
    1dda:	90 95       	com	r25
    1ddc:	80 95       	com	r24
    1dde:	70 95       	com	r23
    1de0:	61 95       	neg	r22
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	8f 4f       	sbci	r24, 0xFF	; 255
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	99 23       	and	r25, r25
    1dea:	a9 f0       	breq	.+42     	; 0x1e16 <__floatsisf+0x40>
    1dec:	f9 2f       	mov	r31, r25
    1dee:	96 e9       	ldi	r25, 0x96	; 150
    1df0:	bb 27       	eor	r27, r27
    1df2:	93 95       	inc	r25
    1df4:	f6 95       	lsr	r31
    1df6:	87 95       	ror	r24
    1df8:	77 95       	ror	r23
    1dfa:	67 95       	ror	r22
    1dfc:	b7 95       	ror	r27
    1dfe:	f1 11       	cpse	r31, r1
    1e00:	f8 cf       	rjmp	.-16     	; 0x1df2 <__floatsisf+0x1c>
    1e02:	fa f4       	brpl	.+62     	; 0x1e42 <__floatsisf+0x6c>
    1e04:	bb 0f       	add	r27, r27
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <__floatsisf+0x36>
    1e08:	60 ff       	sbrs	r22, 0
    1e0a:	1b c0       	rjmp	.+54     	; 0x1e42 <__floatsisf+0x6c>
    1e0c:	6f 5f       	subi	r22, 0xFF	; 255
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <__floatsisf+0x6c>
    1e16:	88 23       	and	r24, r24
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <__floatsisf+0x48>
    1e1a:	96 e9       	ldi	r25, 0x96	; 150
    1e1c:	11 c0       	rjmp	.+34     	; 0x1e40 <__floatsisf+0x6a>
    1e1e:	77 23       	and	r23, r23
    1e20:	21 f0       	breq	.+8      	; 0x1e2a <__floatsisf+0x54>
    1e22:	9e e8       	ldi	r25, 0x8E	; 142
    1e24:	87 2f       	mov	r24, r23
    1e26:	76 2f       	mov	r23, r22
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <__floatsisf+0x5e>
    1e2a:	66 23       	and	r22, r22
    1e2c:	71 f0       	breq	.+28     	; 0x1e4a <__floatsisf+0x74>
    1e2e:	96 e8       	ldi	r25, 0x86	; 134
    1e30:	86 2f       	mov	r24, r22
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	2a f0       	brmi	.+10     	; 0x1e42 <__floatsisf+0x6c>
    1e38:	9a 95       	dec	r25
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	da f7       	brpl	.-10     	; 0x1e38 <__floatsisf+0x62>
    1e42:	88 0f       	add	r24, r24
    1e44:	96 95       	lsr	r25
    1e46:	87 95       	ror	r24
    1e48:	97 f9       	bld	r25, 7
    1e4a:	08 95       	ret

00001e4c <__fp_inf>:
    1e4c:	97 f9       	bld	r25, 7
    1e4e:	9f 67       	ori	r25, 0x7F	; 127
    1e50:	80 e8       	ldi	r24, 0x80	; 128
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	08 95       	ret

00001e58 <__fp_nan>:
    1e58:	9f ef       	ldi	r25, 0xFF	; 255
    1e5a:	80 ec       	ldi	r24, 0xC0	; 192
    1e5c:	08 95       	ret

00001e5e <__fp_pscA>:
    1e5e:	00 24       	eor	r0, r0
    1e60:	0a 94       	dec	r0
    1e62:	16 16       	cp	r1, r22
    1e64:	17 06       	cpc	r1, r23
    1e66:	18 06       	cpc	r1, r24
    1e68:	09 06       	cpc	r0, r25
    1e6a:	08 95       	ret

00001e6c <__fp_pscB>:
    1e6c:	00 24       	eor	r0, r0
    1e6e:	0a 94       	dec	r0
    1e70:	12 16       	cp	r1, r18
    1e72:	13 06       	cpc	r1, r19
    1e74:	14 06       	cpc	r1, r20
    1e76:	05 06       	cpc	r0, r21
    1e78:	08 95       	ret

00001e7a <__fp_round>:
    1e7a:	09 2e       	mov	r0, r25
    1e7c:	03 94       	inc	r0
    1e7e:	00 0c       	add	r0, r0
    1e80:	11 f4       	brne	.+4      	; 0x1e86 <__fp_round+0xc>
    1e82:	88 23       	and	r24, r24
    1e84:	52 f0       	brmi	.+20     	; 0x1e9a <__fp_round+0x20>
    1e86:	bb 0f       	add	r27, r27
    1e88:	40 f4       	brcc	.+16     	; 0x1e9a <__fp_round+0x20>
    1e8a:	bf 2b       	or	r27, r31
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <__fp_round+0x18>
    1e8e:	60 ff       	sbrs	r22, 0
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <__fp_round+0x20>
    1e92:	6f 5f       	subi	r22, 0xFF	; 255
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	8f 4f       	sbci	r24, 0xFF	; 255
    1e98:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9a:	08 95       	ret

00001e9c <__fp_split3>:
    1e9c:	57 fd       	sbrc	r21, 7
    1e9e:	90 58       	subi	r25, 0x80	; 128
    1ea0:	44 0f       	add	r20, r20
    1ea2:	55 1f       	adc	r21, r21
    1ea4:	59 f0       	breq	.+22     	; 0x1ebc <__fp_splitA+0x10>
    1ea6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea8:	71 f0       	breq	.+28     	; 0x1ec6 <__fp_splitA+0x1a>
    1eaa:	47 95       	ror	r20

00001eac <__fp_splitA>:
    1eac:	88 0f       	add	r24, r24
    1eae:	97 fb       	bst	r25, 7
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	61 f0       	breq	.+24     	; 0x1ecc <__fp_splitA+0x20>
    1eb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb6:	79 f0       	breq	.+30     	; 0x1ed6 <__fp_splitA+0x2a>
    1eb8:	87 95       	ror	r24
    1eba:	08 95       	ret
    1ebc:	12 16       	cp	r1, r18
    1ebe:	13 06       	cpc	r1, r19
    1ec0:	14 06       	cpc	r1, r20
    1ec2:	55 1f       	adc	r21, r21
    1ec4:	f2 cf       	rjmp	.-28     	; 0x1eaa <__fp_split3+0xe>
    1ec6:	46 95       	lsr	r20
    1ec8:	f1 df       	rcall	.-30     	; 0x1eac <__fp_splitA>
    1eca:	08 c0       	rjmp	.+16     	; 0x1edc <__fp_splitA+0x30>
    1ecc:	16 16       	cp	r1, r22
    1ece:	17 06       	cpc	r1, r23
    1ed0:	18 06       	cpc	r1, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	f1 cf       	rjmp	.-30     	; 0x1eb8 <__fp_splitA+0xc>
    1ed6:	86 95       	lsr	r24
    1ed8:	71 05       	cpc	r23, r1
    1eda:	61 05       	cpc	r22, r1
    1edc:	08 94       	sec
    1ede:	08 95       	ret

00001ee0 <__fp_zero>:
    1ee0:	e8 94       	clt

00001ee2 <__fp_szero>:
    1ee2:	bb 27       	eor	r27, r27
    1ee4:	66 27       	eor	r22, r22
    1ee6:	77 27       	eor	r23, r23
    1ee8:	cb 01       	movw	r24, r22
    1eea:	97 f9       	bld	r25, 7
    1eec:	08 95       	ret

00001eee <__mulsf3>:
    1eee:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__mulsf3x>
    1ef2:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_round>
    1ef6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__fp_pscA>
    1efa:	38 f0       	brcs	.+14     	; 0x1f0a <__mulsf3+0x1c>
    1efc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fp_pscB>
    1f00:	20 f0       	brcs	.+8      	; 0x1f0a <__mulsf3+0x1c>
    1f02:	95 23       	and	r25, r21
    1f04:	11 f0       	breq	.+4      	; 0x1f0a <__mulsf3+0x1c>
    1f06:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>
    1f0a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__fp_nan>
    1f0e:	11 24       	eor	r1, r1
    1f10:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_szero>

00001f14 <__mulsf3x>:
    1f14:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__fp_split3>
    1f18:	70 f3       	brcs	.-36     	; 0x1ef6 <__mulsf3+0x8>

00001f1a <__mulsf3_pse>:
    1f1a:	95 9f       	mul	r25, r21
    1f1c:	c1 f3       	breq	.-16     	; 0x1f0e <__mulsf3+0x20>
    1f1e:	95 0f       	add	r25, r21
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	55 1f       	adc	r21, r21
    1f24:	62 9f       	mul	r22, r18
    1f26:	f0 01       	movw	r30, r0
    1f28:	72 9f       	mul	r23, r18
    1f2a:	bb 27       	eor	r27, r27
    1f2c:	f0 0d       	add	r31, r0
    1f2e:	b1 1d       	adc	r27, r1
    1f30:	63 9f       	mul	r22, r19
    1f32:	aa 27       	eor	r26, r26
    1f34:	f0 0d       	add	r31, r0
    1f36:	b1 1d       	adc	r27, r1
    1f38:	aa 1f       	adc	r26, r26
    1f3a:	64 9f       	mul	r22, r20
    1f3c:	66 27       	eor	r22, r22
    1f3e:	b0 0d       	add	r27, r0
    1f40:	a1 1d       	adc	r26, r1
    1f42:	66 1f       	adc	r22, r22
    1f44:	82 9f       	mul	r24, r18
    1f46:	22 27       	eor	r18, r18
    1f48:	b0 0d       	add	r27, r0
    1f4a:	a1 1d       	adc	r26, r1
    1f4c:	62 1f       	adc	r22, r18
    1f4e:	73 9f       	mul	r23, r19
    1f50:	b0 0d       	add	r27, r0
    1f52:	a1 1d       	adc	r26, r1
    1f54:	62 1f       	adc	r22, r18
    1f56:	83 9f       	mul	r24, r19
    1f58:	a0 0d       	add	r26, r0
    1f5a:	61 1d       	adc	r22, r1
    1f5c:	22 1f       	adc	r18, r18
    1f5e:	74 9f       	mul	r23, r20
    1f60:	33 27       	eor	r19, r19
    1f62:	a0 0d       	add	r26, r0
    1f64:	61 1d       	adc	r22, r1
    1f66:	23 1f       	adc	r18, r19
    1f68:	84 9f       	mul	r24, r20
    1f6a:	60 0d       	add	r22, r0
    1f6c:	21 1d       	adc	r18, r1
    1f6e:	82 2f       	mov	r24, r18
    1f70:	76 2f       	mov	r23, r22
    1f72:	6a 2f       	mov	r22, r26
    1f74:	11 24       	eor	r1, r1
    1f76:	9f 57       	subi	r25, 0x7F	; 127
    1f78:	50 40       	sbci	r21, 0x00	; 0
    1f7a:	9a f0       	brmi	.+38     	; 0x1fa2 <__mulsf3_pse+0x88>
    1f7c:	f1 f0       	breq	.+60     	; 0x1fba <__mulsf3_pse+0xa0>
    1f7e:	88 23       	and	r24, r24
    1f80:	4a f0       	brmi	.+18     	; 0x1f94 <__mulsf3_pse+0x7a>
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	bb 1f       	adc	r27, r27
    1f88:	66 1f       	adc	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	91 50       	subi	r25, 0x01	; 1
    1f90:	50 40       	sbci	r21, 0x00	; 0
    1f92:	a9 f7       	brne	.-22     	; 0x1f7e <__mulsf3_pse+0x64>
    1f94:	9e 3f       	cpi	r25, 0xFE	; 254
    1f96:	51 05       	cpc	r21, r1
    1f98:	80 f0       	brcs	.+32     	; 0x1fba <__mulsf3_pse+0xa0>
    1f9a:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>
    1f9e:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_szero>
    1fa2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa4:	e4 f3       	brlt	.-8      	; 0x1f9e <__mulsf3_pse+0x84>
    1fa6:	98 3e       	cpi	r25, 0xE8	; 232
    1fa8:	d4 f3       	brlt	.-12     	; 0x1f9e <__mulsf3_pse+0x84>
    1faa:	86 95       	lsr	r24
    1fac:	77 95       	ror	r23
    1fae:	67 95       	ror	r22
    1fb0:	b7 95       	ror	r27
    1fb2:	f7 95       	ror	r31
    1fb4:	e7 95       	ror	r30
    1fb6:	9f 5f       	subi	r25, 0xFF	; 255
    1fb8:	c1 f7       	brne	.-16     	; 0x1faa <__mulsf3_pse+0x90>
    1fba:	fe 2b       	or	r31, r30
    1fbc:	88 0f       	add	r24, r24
    1fbe:	91 1d       	adc	r25, r1
    1fc0:	96 95       	lsr	r25
    1fc2:	87 95       	ror	r24
    1fc4:	97 f9       	bld	r25, 7
    1fc6:	08 95       	ret

00001fc8 <pow>:
    1fc8:	fa 01       	movw	r30, r20
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	30 96       	adiw	r30, 0x00	; 0
    1fd0:	21 05       	cpc	r18, r1
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	a1 f1       	breq	.+104    	; 0x203e <pow+0x76>
    1fd6:	61 15       	cp	r22, r1
    1fd8:	71 05       	cpc	r23, r1
    1fda:	61 f4       	brne	.+24     	; 0x1ff4 <pow+0x2c>
    1fdc:	80 38       	cpi	r24, 0x80	; 128
    1fde:	bf e3       	ldi	r27, 0x3F	; 63
    1fe0:	9b 07       	cpc	r25, r27
    1fe2:	49 f1       	breq	.+82     	; 0x2036 <pow+0x6e>
    1fe4:	68 94       	set
    1fe6:	90 38       	cpi	r25, 0x80	; 128
    1fe8:	81 05       	cpc	r24, r1
    1fea:	61 f0       	breq	.+24     	; 0x2004 <pow+0x3c>
    1fec:	80 38       	cpi	r24, 0x80	; 128
    1fee:	bf ef       	ldi	r27, 0xFF	; 255
    1ff0:	9b 07       	cpc	r25, r27
    1ff2:	41 f0       	breq	.+16     	; 0x2004 <pow+0x3c>
    1ff4:	99 23       	and	r25, r25
    1ff6:	4a f5       	brpl	.+82     	; 0x204a <pow+0x82>
    1ff8:	ff 3f       	cpi	r31, 0xFF	; 255
    1ffa:	e1 05       	cpc	r30, r1
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	21 05       	cpc	r18, r1
    2000:	19 f1       	breq	.+70     	; 0x2048 <pow+0x80>
    2002:	e8 94       	clt
    2004:	08 94       	sec
    2006:	e7 95       	ror	r30
    2008:	d9 01       	movw	r26, r18
    200a:	aa 23       	and	r26, r26
    200c:	29 f4       	brne	.+10     	; 0x2018 <pow+0x50>
    200e:	ab 2f       	mov	r26, r27
    2010:	be 2f       	mov	r27, r30
    2012:	f8 5f       	subi	r31, 0xF8	; 248
    2014:	d0 f3       	brcs	.-12     	; 0x200a <pow+0x42>
    2016:	10 c0       	rjmp	.+32     	; 0x2038 <pow+0x70>
    2018:	ff 5f       	subi	r31, 0xFF	; 255
    201a:	70 f4       	brcc	.+28     	; 0x2038 <pow+0x70>
    201c:	a6 95       	lsr	r26
    201e:	e0 f7       	brcc	.-8      	; 0x2018 <pow+0x50>
    2020:	f7 39       	cpi	r31, 0x97	; 151
    2022:	50 f0       	brcs	.+20     	; 0x2038 <pow+0x70>
    2024:	19 f0       	breq	.+6      	; 0x202c <pow+0x64>
    2026:	ff 3a       	cpi	r31, 0xAF	; 175
    2028:	38 f4       	brcc	.+14     	; 0x2038 <pow+0x70>
    202a:	9f 77       	andi	r25, 0x7F	; 127
    202c:	9f 93       	push	r25
    202e:	0d d0       	rcall	.+26     	; 0x204a <pow+0x82>
    2030:	0f 90       	pop	r0
    2032:	07 fc       	sbrc	r0, 7
    2034:	90 58       	subi	r25, 0x80	; 128
    2036:	08 95       	ret
    2038:	46 f0       	brts	.+16     	; 0x204a <pow+0x82>
    203a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__fp_nan>
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	80 e8       	ldi	r24, 0x80	; 128
    2044:	9f e3       	ldi	r25, 0x3F	; 63
    2046:	08 95       	ret
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	9f 77       	andi	r25, 0x7F	; 127
    204c:	5f 93       	push	r21
    204e:	4f 93       	push	r20
    2050:	3f 93       	push	r19
    2052:	2f 93       	push	r18
    2054:	0e 94 df 10 	call	0x21be	; 0x21be <log>
    2058:	2f 91       	pop	r18
    205a:	3f 91       	pop	r19
    205c:	4f 91       	pop	r20
    205e:	5f 91       	pop	r21
    2060:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__mulsf3>
    2064:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <exp>
    2068:	29 f4       	brne	.+10     	; 0x2074 <pow+0xac>
    206a:	16 f0       	brts	.+4      	; 0x2070 <pow+0xa8>
    206c:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>
    2070:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__fp_zero>
    2074:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__fp_nan>

00002078 <exp>:
    2078:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_splitA>
    207c:	a8 f3       	brcs	.-22     	; 0x2068 <pow+0xa0>
    207e:	96 38       	cpi	r25, 0x86	; 134
    2080:	a0 f7       	brcc	.-24     	; 0x206a <pow+0xa2>
    2082:	07 f8       	bld	r0, 7
    2084:	0f 92       	push	r0
    2086:	e8 94       	clt
    2088:	2b e3       	ldi	r18, 0x3B	; 59
    208a:	3a ea       	ldi	r19, 0xAA	; 170
    208c:	48 eb       	ldi	r20, 0xB8	; 184
    208e:	5f e7       	ldi	r21, 0x7F	; 127
    2090:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__mulsf3_pse>
    2094:	0f 92       	push	r0
    2096:	0f 92       	push	r0
    2098:	0f 92       	push	r0
    209a:	4d b7       	in	r20, 0x3d	; 61
    209c:	5e b7       	in	r21, 0x3e	; 62
    209e:	0f 92       	push	r0
    20a0:	0e 94 27 11 	call	0x224e	; 0x224e <modf>
    20a4:	e8 e6       	ldi	r30, 0x68	; 104
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_powser>
    20ac:	4f 91       	pop	r20
    20ae:	5f 91       	pop	r21
    20b0:	ef 91       	pop	r30
    20b2:	ff 91       	pop	r31
    20b4:	e5 95       	asr	r30
    20b6:	ee 1f       	adc	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	49 f0       	breq	.+18     	; 0x20ce <exp+0x56>
    20bc:	fe 57       	subi	r31, 0x7E	; 126
    20be:	e0 68       	ori	r30, 0x80	; 128
    20c0:	44 27       	eor	r20, r20
    20c2:	ee 0f       	add	r30, r30
    20c4:	44 1f       	adc	r20, r20
    20c6:	fa 95       	dec	r31
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <exp+0x4a>
    20ca:	41 95       	neg	r20
    20cc:	55 0b       	sbc	r21, r21
    20ce:	0e 94 a1 10 	call	0x2142	; 0x2142 <ldexp>
    20d2:	0f 90       	pop	r0
    20d4:	07 fe       	sbrs	r0, 7
    20d6:	0c 94 95 10 	jmp	0x212a	; 0x212a <inverse>
    20da:	08 95       	ret

000020dc <__fp_powser>:
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	1f 93       	push	r17
    20e2:	0f 93       	push	r16
    20e4:	ff 92       	push	r15
    20e6:	ef 92       	push	r14
    20e8:	df 92       	push	r13
    20ea:	7b 01       	movw	r14, r22
    20ec:	8c 01       	movw	r16, r24
    20ee:	68 94       	set
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <__fp_powser+0x22>
    20f2:	da 2e       	mov	r13, r26
    20f4:	ef 01       	movw	r28, r30
    20f6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__mulsf3x>
    20fa:	fe 01       	movw	r30, r28
    20fc:	e8 94       	clt
    20fe:	a5 91       	lpm	r26, Z+
    2100:	25 91       	lpm	r18, Z+
    2102:	35 91       	lpm	r19, Z+
    2104:	45 91       	lpm	r20, Z+
    2106:	55 91       	lpm	r21, Z+
    2108:	a6 f3       	brts	.-24     	; 0x20f2 <__fp_powser+0x16>
    210a:	ef 01       	movw	r28, r30
    210c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3x>
    2110:	fe 01       	movw	r30, r28
    2112:	97 01       	movw	r18, r14
    2114:	a8 01       	movw	r20, r16
    2116:	da 94       	dec	r13
    2118:	69 f7       	brne	.-38     	; 0x20f4 <__fp_powser+0x18>
    211a:	df 90       	pop	r13
    211c:	ef 90       	pop	r14
    211e:	ff 90       	pop	r15
    2120:	0f 91       	pop	r16
    2122:	1f 91       	pop	r17
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <inverse>:
    212a:	9b 01       	movw	r18, r22
    212c:	ac 01       	movw	r20, r24
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	80 e8       	ldi	r24, 0x80	; 128
    2134:	9f e3       	ldi	r25, 0x3F	; 63
    2136:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__divsf3>
    213a:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>
    213e:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_mpack>

00002142 <ldexp>:
    2142:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_splitA>
    2146:	d8 f3       	brcs	.-10     	; 0x213e <inverse+0x14>
    2148:	99 23       	and	r25, r25
    214a:	c9 f3       	breq	.-14     	; 0x213e <inverse+0x14>
    214c:	94 0f       	add	r25, r20
    214e:	51 1d       	adc	r21, r1
    2150:	a3 f3       	brvs	.-24     	; 0x213a <inverse+0x10>
    2152:	91 50       	subi	r25, 0x01	; 1
    2154:	50 40       	sbci	r21, 0x00	; 0
    2156:	94 f0       	brlt	.+36     	; 0x217c <ldexp+0x3a>
    2158:	59 f0       	breq	.+22     	; 0x2170 <ldexp+0x2e>
    215a:	88 23       	and	r24, r24
    215c:	32 f0       	brmi	.+12     	; 0x216a <ldexp+0x28>
    215e:	66 0f       	add	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	91 50       	subi	r25, 0x01	; 1
    2166:	50 40       	sbci	r21, 0x00	; 0
    2168:	c1 f7       	brne	.-16     	; 0x215a <ldexp+0x18>
    216a:	9e 3f       	cpi	r25, 0xFE	; 254
    216c:	51 05       	cpc	r21, r1
    216e:	2c f7       	brge	.-54     	; 0x213a <inverse+0x10>
    2170:	88 0f       	add	r24, r24
    2172:	91 1d       	adc	r25, r1
    2174:	96 95       	lsr	r25
    2176:	87 95       	ror	r24
    2178:	97 f9       	bld	r25, 7
    217a:	08 95       	ret
    217c:	5f 3f       	cpi	r21, 0xFF	; 255
    217e:	ac f0       	brlt	.+42     	; 0x21aa <ldexp+0x68>
    2180:	98 3e       	cpi	r25, 0xE8	; 232
    2182:	9c f0       	brlt	.+38     	; 0x21aa <ldexp+0x68>
    2184:	bb 27       	eor	r27, r27
    2186:	86 95       	lsr	r24
    2188:	77 95       	ror	r23
    218a:	67 95       	ror	r22
    218c:	b7 95       	ror	r27
    218e:	08 f4       	brcc	.+2      	; 0x2192 <ldexp+0x50>
    2190:	b1 60       	ori	r27, 0x01	; 1
    2192:	93 95       	inc	r25
    2194:	c1 f7       	brne	.-16     	; 0x2186 <ldexp+0x44>
    2196:	bb 0f       	add	r27, r27
    2198:	58 f7       	brcc	.-42     	; 0x2170 <ldexp+0x2e>
    219a:	11 f4       	brne	.+4      	; 0x21a0 <ldexp+0x5e>
    219c:	60 ff       	sbrs	r22, 0
    219e:	e8 cf       	rjmp	.-48     	; 0x2170 <ldexp+0x2e>
    21a0:	6f 5f       	subi	r22, 0xFF	; 255
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	8f 4f       	sbci	r24, 0xFF	; 255
    21a6:	9f 4f       	sbci	r25, 0xFF	; 255
    21a8:	e3 cf       	rjmp	.-58     	; 0x2170 <ldexp+0x2e>
    21aa:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_szero>
    21ae:	16 f0       	brts	.+4      	; 0x21b4 <ldexp+0x72>
    21b0:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_mpack>
    21b4:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__fp_nan>
    21b8:	68 94       	set
    21ba:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__fp_inf>

000021be <log>:
    21be:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_splitA>
    21c2:	a8 f3       	brcs	.-22     	; 0x21ae <ldexp+0x6c>
    21c4:	99 23       	and	r25, r25
    21c6:	c1 f3       	breq	.-16     	; 0x21b8 <ldexp+0x76>
    21c8:	ae f3       	brts	.-22     	; 0x21b4 <ldexp+0x72>
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	1f 93       	push	r17
    21d0:	0f 93       	push	r16
    21d2:	ff 92       	push	r15
    21d4:	c9 2f       	mov	r28, r25
    21d6:	dd 27       	eor	r29, r29
    21d8:	88 23       	and	r24, r24
    21da:	2a f0       	brmi	.+10     	; 0x21e6 <log+0x28>
    21dc:	21 97       	sbiw	r28, 0x01	; 1
    21de:	66 0f       	add	r22, r22
    21e0:	77 1f       	adc	r23, r23
    21e2:	88 1f       	adc	r24, r24
    21e4:	da f7       	brpl	.-10     	; 0x21dc <log+0x1e>
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e8       	ldi	r20, 0x80	; 128
    21ec:	5f eb       	ldi	r21, 0xBF	; 191
    21ee:	9f e3       	ldi	r25, 0x3F	; 63
    21f0:	88 39       	cpi	r24, 0x98	; 152
    21f2:	20 f0       	brcs	.+8      	; 0x21fc <log+0x3e>
    21f4:	80 3e       	cpi	r24, 0xE0	; 224
    21f6:	38 f0       	brcs	.+14     	; 0x2206 <log+0x48>
    21f8:	21 96       	adiw	r28, 0x01	; 1
    21fa:	8f 77       	andi	r24, 0x7F	; 127
    21fc:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__addsf3>
    2200:	e0 e9       	ldi	r30, 0x90	; 144
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	04 c0       	rjmp	.+8      	; 0x220e <log+0x50>
    2206:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__addsf3>
    220a:	ed eb       	ldi	r30, 0xBD	; 189
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_powser>
    2212:	8b 01       	movw	r16, r22
    2214:	be 01       	movw	r22, r28
    2216:	ec 01       	movw	r28, r24
    2218:	fb 2e       	mov	r15, r27
    221a:	6f 57       	subi	r22, 0x7F	; 127
    221c:	71 09       	sbc	r23, r1
    221e:	75 95       	asr	r23
    2220:	77 1f       	adc	r23, r23
    2222:	88 0b       	sbc	r24, r24
    2224:	99 0b       	sbc	r25, r25
    2226:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__floatsisf>
    222a:	28 e1       	ldi	r18, 0x18	; 24
    222c:	32 e7       	ldi	r19, 0x72	; 114
    222e:	41 e3       	ldi	r20, 0x31	; 49
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__mulsf3x>
    2236:	af 2d       	mov	r26, r15
    2238:	98 01       	movw	r18, r16
    223a:	ae 01       	movw	r20, r28
    223c:	ff 90       	pop	r15
    223e:	0f 91       	pop	r16
    2240:	1f 91       	pop	r17
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3x>
    224a:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_round>

0000224e <modf>:
    224e:	fa 01       	movw	r30, r20
    2250:	dc 01       	movw	r26, r24
    2252:	aa 0f       	add	r26, r26
    2254:	bb 1f       	adc	r27, r27
    2256:	9b 01       	movw	r18, r22
    2258:	ac 01       	movw	r20, r24
    225a:	bf 57       	subi	r27, 0x7F	; 127
    225c:	28 f4       	brcc	.+10     	; 0x2268 <modf+0x1a>
    225e:	22 27       	eor	r18, r18
    2260:	33 27       	eor	r19, r19
    2262:	44 27       	eor	r20, r20
    2264:	50 78       	andi	r21, 0x80	; 128
    2266:	20 c0       	rjmp	.+64     	; 0x22a8 <modf+0x5a>
    2268:	b7 51       	subi	r27, 0x17	; 23
    226a:	90 f4       	brcc	.+36     	; 0x2290 <modf+0x42>
    226c:	ab 2f       	mov	r26, r27
    226e:	00 24       	eor	r0, r0
    2270:	46 95       	lsr	r20
    2272:	37 95       	ror	r19
    2274:	27 95       	ror	r18
    2276:	01 1c       	adc	r0, r1
    2278:	a3 95       	inc	r26
    227a:	d2 f3       	brmi	.-12     	; 0x2270 <modf+0x22>
    227c:	00 20       	and	r0, r0
    227e:	71 f0       	breq	.+28     	; 0x229c <modf+0x4e>
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	44 1f       	adc	r20, r20
    2286:	b3 95       	inc	r27
    2288:	da f3       	brmi	.-10     	; 0x2280 <modf+0x32>
    228a:	0e d0       	rcall	.+28     	; 0x22a8 <modf+0x5a>
    228c:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__subsf3>
    2290:	61 30       	cpi	r22, 0x01	; 1
    2292:	71 05       	cpc	r23, r1
    2294:	a0 e8       	ldi	r26, 0x80	; 128
    2296:	8a 07       	cpc	r24, r26
    2298:	b9 46       	sbci	r27, 0x69	; 105
    229a:	30 f4       	brcc	.+12     	; 0x22a8 <modf+0x5a>
    229c:	9b 01       	movw	r18, r22
    229e:	ac 01       	movw	r20, r24
    22a0:	66 27       	eor	r22, r22
    22a2:	77 27       	eor	r23, r23
    22a4:	88 27       	eor	r24, r24
    22a6:	90 78       	andi	r25, 0x80	; 128
    22a8:	30 96       	adiw	r30, 0x00	; 0
    22aa:	21 f0       	breq	.+8      	; 0x22b4 <modf+0x66>
    22ac:	20 83       	st	Z, r18
    22ae:	31 83       	std	Z+1, r19	; 0x01
    22b0:	42 83       	std	Z+2, r20	; 0x02
    22b2:	53 83       	std	Z+3, r21	; 0x03
    22b4:	08 95       	ret

000022b6 <__fp_mpack>:
    22b6:	9f 3f       	cpi	r25, 0xFF	; 255
    22b8:	31 f0       	breq	.+12     	; 0x22c6 <__fp_mpack_finite+0xc>

000022ba <__fp_mpack_finite>:
    22ba:	91 50       	subi	r25, 0x01	; 1
    22bc:	20 f4       	brcc	.+8      	; 0x22c6 <__fp_mpack_finite+0xc>
    22be:	87 95       	ror	r24
    22c0:	77 95       	ror	r23
    22c2:	67 95       	ror	r22
    22c4:	b7 95       	ror	r27
    22c6:	88 0f       	add	r24, r24
    22c8:	91 1d       	adc	r25, r1
    22ca:	96 95       	lsr	r25
    22cc:	87 95       	ror	r24
    22ce:	97 f9       	bld	r25, 7
    22d0:	08 95       	ret

000022d2 <__mulsi3>:
    22d2:	db 01       	movw	r26, r22
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__muluhisi3>
    22dc:	bf 91       	pop	r27
    22de:	af 91       	pop	r26
    22e0:	a2 9f       	mul	r26, r18
    22e2:	80 0d       	add	r24, r0
    22e4:	91 1d       	adc	r25, r1
    22e6:	a3 9f       	mul	r26, r19
    22e8:	90 0d       	add	r25, r0
    22ea:	b2 9f       	mul	r27, r18
    22ec:	90 0d       	add	r25, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	08 95       	ret

000022f2 <__divmodhi4>:
    22f2:	97 fb       	bst	r25, 7
    22f4:	07 2e       	mov	r0, r23
    22f6:	16 f4       	brtc	.+4      	; 0x22fc <__divmodhi4+0xa>
    22f8:	00 94       	com	r0
    22fa:	07 d0       	rcall	.+14     	; 0x230a <__divmodhi4_neg1>
    22fc:	77 fd       	sbrc	r23, 7
    22fe:	09 d0       	rcall	.+18     	; 0x2312 <__divmodhi4_neg2>
    2300:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__udivmodhi4>
    2304:	07 fc       	sbrc	r0, 7
    2306:	05 d0       	rcall	.+10     	; 0x2312 <__divmodhi4_neg2>
    2308:	3e f4       	brtc	.+14     	; 0x2318 <__divmodhi4_exit>

0000230a <__divmodhi4_neg1>:
    230a:	90 95       	com	r25
    230c:	81 95       	neg	r24
    230e:	9f 4f       	sbci	r25, 0xFF	; 255
    2310:	08 95       	ret

00002312 <__divmodhi4_neg2>:
    2312:	70 95       	com	r23
    2314:	61 95       	neg	r22
    2316:	7f 4f       	sbci	r23, 0xFF	; 255

00002318 <__divmodhi4_exit>:
    2318:	08 95       	ret

0000231a <__udivmodsi4>:
    231a:	a1 e2       	ldi	r26, 0x21	; 33
    231c:	1a 2e       	mov	r1, r26
    231e:	aa 1b       	sub	r26, r26
    2320:	bb 1b       	sub	r27, r27
    2322:	fd 01       	movw	r30, r26
    2324:	0d c0       	rjmp	.+26     	; 0x2340 <__udivmodsi4_ep>

00002326 <__udivmodsi4_loop>:
    2326:	aa 1f       	adc	r26, r26
    2328:	bb 1f       	adc	r27, r27
    232a:	ee 1f       	adc	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	a2 17       	cp	r26, r18
    2330:	b3 07       	cpc	r27, r19
    2332:	e4 07       	cpc	r30, r20
    2334:	f5 07       	cpc	r31, r21
    2336:	20 f0       	brcs	.+8      	; 0x2340 <__udivmodsi4_ep>
    2338:	a2 1b       	sub	r26, r18
    233a:	b3 0b       	sbc	r27, r19
    233c:	e4 0b       	sbc	r30, r20
    233e:	f5 0b       	sbc	r31, r21

00002340 <__udivmodsi4_ep>:
    2340:	66 1f       	adc	r22, r22
    2342:	77 1f       	adc	r23, r23
    2344:	88 1f       	adc	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	1a 94       	dec	r1
    234a:	69 f7       	brne	.-38     	; 0x2326 <__udivmodsi4_loop>
    234c:	60 95       	com	r22
    234e:	70 95       	com	r23
    2350:	80 95       	com	r24
    2352:	90 95       	com	r25
    2354:	9b 01       	movw	r18, r22
    2356:	ac 01       	movw	r20, r24
    2358:	bd 01       	movw	r22, r26
    235a:	cf 01       	movw	r24, r30
    235c:	08 95       	ret

0000235e <__divmodsi4>:
    235e:	05 2e       	mov	r0, r21
    2360:	97 fb       	bst	r25, 7
    2362:	1e f4       	brtc	.+6      	; 0x236a <__divmodsi4+0xc>
    2364:	00 94       	com	r0
    2366:	0e 94 c6 11 	call	0x238c	; 0x238c <__negsi2>
    236a:	57 fd       	sbrc	r21, 7
    236c:	07 d0       	rcall	.+14     	; 0x237c <__divmodsi4_neg2>
    236e:	0e 94 8d 11 	call	0x231a	; 0x231a <__udivmodsi4>
    2372:	07 fc       	sbrc	r0, 7
    2374:	03 d0       	rcall	.+6      	; 0x237c <__divmodsi4_neg2>
    2376:	4e f4       	brtc	.+18     	; 0x238a <__divmodsi4_exit>
    2378:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__negsi2>

0000237c <__divmodsi4_neg2>:
    237c:	50 95       	com	r21
    237e:	40 95       	com	r20
    2380:	30 95       	com	r19
    2382:	21 95       	neg	r18
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	4f 4f       	sbci	r20, 0xFF	; 255
    2388:	5f 4f       	sbci	r21, 0xFF	; 255

0000238a <__divmodsi4_exit>:
    238a:	08 95       	ret

0000238c <__negsi2>:
    238c:	90 95       	com	r25
    238e:	80 95       	com	r24
    2390:	70 95       	com	r23
    2392:	61 95       	neg	r22
    2394:	7f 4f       	sbci	r23, 0xFF	; 255
    2396:	8f 4f       	sbci	r24, 0xFF	; 255
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	08 95       	ret

0000239c <__umulhisi3>:
    239c:	a2 9f       	mul	r26, r18
    239e:	b0 01       	movw	r22, r0
    23a0:	b3 9f       	mul	r27, r19
    23a2:	c0 01       	movw	r24, r0
    23a4:	a3 9f       	mul	r26, r19
    23a6:	70 0d       	add	r23, r0
    23a8:	81 1d       	adc	r24, r1
    23aa:	11 24       	eor	r1, r1
    23ac:	91 1d       	adc	r25, r1
    23ae:	b2 9f       	mul	r27, r18
    23b0:	70 0d       	add	r23, r0
    23b2:	81 1d       	adc	r24, r1
    23b4:	11 24       	eor	r1, r1
    23b6:	91 1d       	adc	r25, r1
    23b8:	08 95       	ret

000023ba <__muluhisi3>:
    23ba:	0e 94 ce 11 	call	0x239c	; 0x239c <__umulhisi3>
    23be:	a5 9f       	mul	r26, r21
    23c0:	90 0d       	add	r25, r0
    23c2:	b4 9f       	mul	r27, r20
    23c4:	90 0d       	add	r25, r0
    23c6:	a4 9f       	mul	r26, r20
    23c8:	80 0d       	add	r24, r0
    23ca:	91 1d       	adc	r25, r1
    23cc:	11 24       	eor	r1, r1
    23ce:	08 95       	ret

000023d0 <__mulshisi3>:
    23d0:	b7 ff       	sbrs	r27, 7
    23d2:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__muluhisi3>

000023d6 <__mulohisi3>:
    23d6:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__muluhisi3>
    23da:	82 1b       	sub	r24, r18
    23dc:	93 0b       	sbc	r25, r19
    23de:	08 95       	ret

000023e0 <__udivmodhi4>:
    23e0:	aa 1b       	sub	r26, r26
    23e2:	bb 1b       	sub	r27, r27
    23e4:	51 e1       	ldi	r21, 0x11	; 17
    23e6:	07 c0       	rjmp	.+14     	; 0x23f6 <__udivmodhi4_ep>

000023e8 <__udivmodhi4_loop>:
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	a6 17       	cp	r26, r22
    23ee:	b7 07       	cpc	r27, r23
    23f0:	10 f0       	brcs	.+4      	; 0x23f6 <__udivmodhi4_ep>
    23f2:	a6 1b       	sub	r26, r22
    23f4:	b7 0b       	sbc	r27, r23

000023f6 <__udivmodhi4_ep>:
    23f6:	88 1f       	adc	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	5a 95       	dec	r21
    23fc:	a9 f7       	brne	.-22     	; 0x23e8 <__udivmodhi4_loop>
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	08 95       	ret

00002408 <strcat>:
    2408:	fb 01       	movw	r30, r22
    240a:	dc 01       	movw	r26, r24
    240c:	0d 90       	ld	r0, X+
    240e:	00 20       	and	r0, r0
    2410:	e9 f7       	brne	.-6      	; 0x240c <strcat+0x4>
    2412:	11 97       	sbiw	r26, 0x01	; 1
    2414:	01 90       	ld	r0, Z+
    2416:	0d 92       	st	X+, r0
    2418:	00 20       	and	r0, r0
    241a:	e1 f7       	brne	.-8      	; 0x2414 <strcat+0xc>
    241c:	08 95       	ret

0000241e <sprintf>:
    241e:	ae e0       	ldi	r26, 0x0E	; 14
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e5 e1       	ldi	r30, 0x15	; 21
    2424:	f2 e1       	ldi	r31, 0x12	; 18
    2426:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x1c>
    242a:	0d 89       	ldd	r16, Y+21	; 0x15
    242c:	1e 89       	ldd	r17, Y+22	; 0x16
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	8c 83       	std	Y+4, r24	; 0x04
    2432:	1a 83       	std	Y+2, r17	; 0x02
    2434:	09 83       	std	Y+1, r16	; 0x01
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	9f e7       	ldi	r25, 0x7F	; 127
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	ae 01       	movw	r20, r28
    2440:	47 5e       	subi	r20, 0xE7	; 231
    2442:	5f 4f       	sbci	r21, 0xFF	; 255
    2444:	6f 89       	ldd	r22, Y+23	; 0x17
    2446:	78 8d       	ldd	r23, Y+24	; 0x18
    2448:	ce 01       	movw	r24, r28
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	0e 94 31 12 	call	0x2462	; 0x2462 <vfprintf>
    2450:	ef 81       	ldd	r30, Y+7	; 0x07
    2452:	f8 85       	ldd	r31, Y+8	; 0x08
    2454:	e0 0f       	add	r30, r16
    2456:	f1 1f       	adc	r31, r17
    2458:	10 82       	st	Z, r1
    245a:	2e 96       	adiw	r28, 0x0e	; 14
    245c:	e4 e0       	ldi	r30, 0x04	; 4
    245e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x1c>

00002462 <vfprintf>:
    2462:	ab e0       	ldi	r26, 0x0B	; 11
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e3       	ldi	r30, 0x37	; 55
    2468:	f2 e1       	ldi	r31, 0x12	; 18
    246a:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__prologue_saves__>
    246e:	6c 01       	movw	r12, r24
    2470:	7b 01       	movw	r14, r22
    2472:	8a 01       	movw	r16, r20
    2474:	fc 01       	movw	r30, r24
    2476:	17 82       	std	Z+7, r1	; 0x07
    2478:	16 82       	std	Z+6, r1	; 0x06
    247a:	83 81       	ldd	r24, Z+3	; 0x03
    247c:	81 ff       	sbrs	r24, 1
    247e:	cc c1       	rjmp	.+920    	; 0x2818 <vfprintf+0x3b6>
    2480:	ce 01       	movw	r24, r28
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	3c 01       	movw	r6, r24
    2486:	f6 01       	movw	r30, r12
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	f7 01       	movw	r30, r14
    248c:	93 fd       	sbrc	r25, 3
    248e:	85 91       	lpm	r24, Z+
    2490:	93 ff       	sbrs	r25, 3
    2492:	81 91       	ld	r24, Z+
    2494:	7f 01       	movw	r14, r30
    2496:	88 23       	and	r24, r24
    2498:	09 f4       	brne	.+2      	; 0x249c <vfprintf+0x3a>
    249a:	ba c1       	rjmp	.+884    	; 0x2810 <vfprintf+0x3ae>
    249c:	85 32       	cpi	r24, 0x25	; 37
    249e:	39 f4       	brne	.+14     	; 0x24ae <vfprintf+0x4c>
    24a0:	93 fd       	sbrc	r25, 3
    24a2:	85 91       	lpm	r24, Z+
    24a4:	93 ff       	sbrs	r25, 3
    24a6:	81 91       	ld	r24, Z+
    24a8:	7f 01       	movw	r14, r30
    24aa:	85 32       	cpi	r24, 0x25	; 37
    24ac:	29 f4       	brne	.+10     	; 0x24b8 <vfprintf+0x56>
    24ae:	b6 01       	movw	r22, r12
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    24b6:	e7 cf       	rjmp	.-50     	; 0x2486 <vfprintf+0x24>
    24b8:	91 2c       	mov	r9, r1
    24ba:	21 2c       	mov	r2, r1
    24bc:	31 2c       	mov	r3, r1
    24be:	ff e1       	ldi	r31, 0x1F	; 31
    24c0:	f3 15       	cp	r31, r3
    24c2:	d8 f0       	brcs	.+54     	; 0x24fa <vfprintf+0x98>
    24c4:	8b 32       	cpi	r24, 0x2B	; 43
    24c6:	79 f0       	breq	.+30     	; 0x24e6 <vfprintf+0x84>
    24c8:	38 f4       	brcc	.+14     	; 0x24d8 <vfprintf+0x76>
    24ca:	80 32       	cpi	r24, 0x20	; 32
    24cc:	79 f0       	breq	.+30     	; 0x24ec <vfprintf+0x8a>
    24ce:	83 32       	cpi	r24, 0x23	; 35
    24d0:	a1 f4       	brne	.+40     	; 0x24fa <vfprintf+0x98>
    24d2:	23 2d       	mov	r18, r3
    24d4:	20 61       	ori	r18, 0x10	; 16
    24d6:	1d c0       	rjmp	.+58     	; 0x2512 <vfprintf+0xb0>
    24d8:	8d 32       	cpi	r24, 0x2D	; 45
    24da:	61 f0       	breq	.+24     	; 0x24f4 <vfprintf+0x92>
    24dc:	80 33       	cpi	r24, 0x30	; 48
    24de:	69 f4       	brne	.+26     	; 0x24fa <vfprintf+0x98>
    24e0:	23 2d       	mov	r18, r3
    24e2:	21 60       	ori	r18, 0x01	; 1
    24e4:	16 c0       	rjmp	.+44     	; 0x2512 <vfprintf+0xb0>
    24e6:	83 2d       	mov	r24, r3
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	38 2e       	mov	r3, r24
    24ec:	e3 2d       	mov	r30, r3
    24ee:	e4 60       	ori	r30, 0x04	; 4
    24f0:	3e 2e       	mov	r3, r30
    24f2:	2a c0       	rjmp	.+84     	; 0x2548 <vfprintf+0xe6>
    24f4:	f3 2d       	mov	r31, r3
    24f6:	f8 60       	ori	r31, 0x08	; 8
    24f8:	1d c0       	rjmp	.+58     	; 0x2534 <vfprintf+0xd2>
    24fa:	37 fc       	sbrc	r3, 7
    24fc:	2d c0       	rjmp	.+90     	; 0x2558 <vfprintf+0xf6>
    24fe:	20 ed       	ldi	r18, 0xD0	; 208
    2500:	28 0f       	add	r18, r24
    2502:	2a 30       	cpi	r18, 0x0A	; 10
    2504:	40 f0       	brcs	.+16     	; 0x2516 <vfprintf+0xb4>
    2506:	8e 32       	cpi	r24, 0x2E	; 46
    2508:	b9 f4       	brne	.+46     	; 0x2538 <vfprintf+0xd6>
    250a:	36 fc       	sbrc	r3, 6
    250c:	81 c1       	rjmp	.+770    	; 0x2810 <vfprintf+0x3ae>
    250e:	23 2d       	mov	r18, r3
    2510:	20 64       	ori	r18, 0x40	; 64
    2512:	32 2e       	mov	r3, r18
    2514:	19 c0       	rjmp	.+50     	; 0x2548 <vfprintf+0xe6>
    2516:	36 fe       	sbrs	r3, 6
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <vfprintf+0xc4>
    251a:	8a e0       	ldi	r24, 0x0A	; 10
    251c:	98 9e       	mul	r9, r24
    251e:	20 0d       	add	r18, r0
    2520:	11 24       	eor	r1, r1
    2522:	92 2e       	mov	r9, r18
    2524:	11 c0       	rjmp	.+34     	; 0x2548 <vfprintf+0xe6>
    2526:	ea e0       	ldi	r30, 0x0A	; 10
    2528:	2e 9e       	mul	r2, r30
    252a:	20 0d       	add	r18, r0
    252c:	11 24       	eor	r1, r1
    252e:	22 2e       	mov	r2, r18
    2530:	f3 2d       	mov	r31, r3
    2532:	f0 62       	ori	r31, 0x20	; 32
    2534:	3f 2e       	mov	r3, r31
    2536:	08 c0       	rjmp	.+16     	; 0x2548 <vfprintf+0xe6>
    2538:	8c 36       	cpi	r24, 0x6C	; 108
    253a:	21 f4       	brne	.+8      	; 0x2544 <vfprintf+0xe2>
    253c:	83 2d       	mov	r24, r3
    253e:	80 68       	ori	r24, 0x80	; 128
    2540:	38 2e       	mov	r3, r24
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <vfprintf+0xe6>
    2544:	88 36       	cpi	r24, 0x68	; 104
    2546:	41 f4       	brne	.+16     	; 0x2558 <vfprintf+0xf6>
    2548:	f7 01       	movw	r30, r14
    254a:	93 fd       	sbrc	r25, 3
    254c:	85 91       	lpm	r24, Z+
    254e:	93 ff       	sbrs	r25, 3
    2550:	81 91       	ld	r24, Z+
    2552:	7f 01       	movw	r14, r30
    2554:	81 11       	cpse	r24, r1
    2556:	b3 cf       	rjmp	.-154    	; 0x24be <vfprintf+0x5c>
    2558:	98 2f       	mov	r25, r24
    255a:	9f 7d       	andi	r25, 0xDF	; 223
    255c:	95 54       	subi	r25, 0x45	; 69
    255e:	93 30       	cpi	r25, 0x03	; 3
    2560:	28 f4       	brcc	.+10     	; 0x256c <vfprintf+0x10a>
    2562:	0c 5f       	subi	r16, 0xFC	; 252
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	9f e3       	ldi	r25, 0x3F	; 63
    2568:	99 83       	std	Y+1, r25	; 0x01
    256a:	0d c0       	rjmp	.+26     	; 0x2586 <vfprintf+0x124>
    256c:	83 36       	cpi	r24, 0x63	; 99
    256e:	31 f0       	breq	.+12     	; 0x257c <vfprintf+0x11a>
    2570:	83 37       	cpi	r24, 0x73	; 115
    2572:	71 f0       	breq	.+28     	; 0x2590 <vfprintf+0x12e>
    2574:	83 35       	cpi	r24, 0x53	; 83
    2576:	09 f0       	breq	.+2      	; 0x257a <vfprintf+0x118>
    2578:	59 c0       	rjmp	.+178    	; 0x262c <vfprintf+0x1ca>
    257a:	21 c0       	rjmp	.+66     	; 0x25be <vfprintf+0x15c>
    257c:	f8 01       	movw	r30, r16
    257e:	80 81       	ld	r24, Z
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	0e 5f       	subi	r16, 0xFE	; 254
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	88 24       	eor	r8, r8
    2588:	83 94       	inc	r8
    258a:	91 2c       	mov	r9, r1
    258c:	53 01       	movw	r10, r6
    258e:	13 c0       	rjmp	.+38     	; 0x25b6 <vfprintf+0x154>
    2590:	28 01       	movw	r4, r16
    2592:	f2 e0       	ldi	r31, 0x02	; 2
    2594:	4f 0e       	add	r4, r31
    2596:	51 1c       	adc	r5, r1
    2598:	f8 01       	movw	r30, r16
    259a:	a0 80       	ld	r10, Z
    259c:	b1 80       	ldd	r11, Z+1	; 0x01
    259e:	36 fe       	sbrs	r3, 6
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <vfprintf+0x146>
    25a2:	69 2d       	mov	r22, r9
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <vfprintf+0x14a>
    25a8:	6f ef       	ldi	r22, 0xFF	; 255
    25aa:	7f ef       	ldi	r23, 0xFF	; 255
    25ac:	c5 01       	movw	r24, r10
    25ae:	0e 94 1d 14 	call	0x283a	; 0x283a <strnlen>
    25b2:	4c 01       	movw	r8, r24
    25b4:	82 01       	movw	r16, r4
    25b6:	f3 2d       	mov	r31, r3
    25b8:	ff 77       	andi	r31, 0x7F	; 127
    25ba:	3f 2e       	mov	r3, r31
    25bc:	16 c0       	rjmp	.+44     	; 0x25ea <vfprintf+0x188>
    25be:	28 01       	movw	r4, r16
    25c0:	22 e0       	ldi	r18, 0x02	; 2
    25c2:	42 0e       	add	r4, r18
    25c4:	51 1c       	adc	r5, r1
    25c6:	f8 01       	movw	r30, r16
    25c8:	a0 80       	ld	r10, Z
    25ca:	b1 80       	ldd	r11, Z+1	; 0x01
    25cc:	36 fe       	sbrs	r3, 6
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <vfprintf+0x174>
    25d0:	69 2d       	mov	r22, r9
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <vfprintf+0x178>
    25d6:	6f ef       	ldi	r22, 0xFF	; 255
    25d8:	7f ef       	ldi	r23, 0xFF	; 255
    25da:	c5 01       	movw	r24, r10
    25dc:	0e 94 12 14 	call	0x2824	; 0x2824 <strnlen_P>
    25e0:	4c 01       	movw	r8, r24
    25e2:	f3 2d       	mov	r31, r3
    25e4:	f0 68       	ori	r31, 0x80	; 128
    25e6:	3f 2e       	mov	r3, r31
    25e8:	82 01       	movw	r16, r4
    25ea:	33 fc       	sbrc	r3, 3
    25ec:	1b c0       	rjmp	.+54     	; 0x2624 <vfprintf+0x1c2>
    25ee:	82 2d       	mov	r24, r2
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	88 16       	cp	r8, r24
    25f4:	99 06       	cpc	r9, r25
    25f6:	b0 f4       	brcc	.+44     	; 0x2624 <vfprintf+0x1c2>
    25f8:	b6 01       	movw	r22, r12
    25fa:	80 e2       	ldi	r24, 0x20	; 32
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    2602:	2a 94       	dec	r2
    2604:	f4 cf       	rjmp	.-24     	; 0x25ee <vfprintf+0x18c>
    2606:	f5 01       	movw	r30, r10
    2608:	37 fc       	sbrc	r3, 7
    260a:	85 91       	lpm	r24, Z+
    260c:	37 fe       	sbrs	r3, 7
    260e:	81 91       	ld	r24, Z+
    2610:	5f 01       	movw	r10, r30
    2612:	b6 01       	movw	r22, r12
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    261a:	21 10       	cpse	r2, r1
    261c:	2a 94       	dec	r2
    261e:	21 e0       	ldi	r18, 0x01	; 1
    2620:	82 1a       	sub	r8, r18
    2622:	91 08       	sbc	r9, r1
    2624:	81 14       	cp	r8, r1
    2626:	91 04       	cpc	r9, r1
    2628:	71 f7       	brne	.-36     	; 0x2606 <vfprintf+0x1a4>
    262a:	e8 c0       	rjmp	.+464    	; 0x27fc <vfprintf+0x39a>
    262c:	84 36       	cpi	r24, 0x64	; 100
    262e:	11 f0       	breq	.+4      	; 0x2634 <vfprintf+0x1d2>
    2630:	89 36       	cpi	r24, 0x69	; 105
    2632:	41 f5       	brne	.+80     	; 0x2684 <vfprintf+0x222>
    2634:	f8 01       	movw	r30, r16
    2636:	37 fe       	sbrs	r3, 7
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <vfprintf+0x1e6>
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	0c 5f       	subi	r16, 0xFC	; 252
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	08 c0       	rjmp	.+16     	; 0x2658 <vfprintf+0x1f6>
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	07 2e       	mov	r0, r23
    264e:	00 0c       	add	r0, r0
    2650:	88 0b       	sbc	r24, r24
    2652:	99 0b       	sbc	r25, r25
    2654:	0e 5f       	subi	r16, 0xFE	; 254
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	f3 2d       	mov	r31, r3
    265a:	ff 76       	andi	r31, 0x6F	; 111
    265c:	3f 2e       	mov	r3, r31
    265e:	97 ff       	sbrs	r25, 7
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <vfprintf+0x212>
    2662:	90 95       	com	r25
    2664:	80 95       	com	r24
    2666:	70 95       	com	r23
    2668:	61 95       	neg	r22
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	8f 4f       	sbci	r24, 0xFF	; 255
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	f0 68       	ori	r31, 0x80	; 128
    2672:	3f 2e       	mov	r3, r31
    2674:	2a e0       	ldi	r18, 0x0A	; 10
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	a3 01       	movw	r20, r6
    267a:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__ultoa_invert>
    267e:	88 2e       	mov	r8, r24
    2680:	86 18       	sub	r8, r6
    2682:	45 c0       	rjmp	.+138    	; 0x270e <vfprintf+0x2ac>
    2684:	85 37       	cpi	r24, 0x75	; 117
    2686:	31 f4       	brne	.+12     	; 0x2694 <vfprintf+0x232>
    2688:	23 2d       	mov	r18, r3
    268a:	2f 7e       	andi	r18, 0xEF	; 239
    268c:	b2 2e       	mov	r11, r18
    268e:	2a e0       	ldi	r18, 0x0A	; 10
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	25 c0       	rjmp	.+74     	; 0x26de <vfprintf+0x27c>
    2694:	93 2d       	mov	r25, r3
    2696:	99 7f       	andi	r25, 0xF9	; 249
    2698:	b9 2e       	mov	r11, r25
    269a:	8f 36       	cpi	r24, 0x6F	; 111
    269c:	c1 f0       	breq	.+48     	; 0x26ce <vfprintf+0x26c>
    269e:	18 f4       	brcc	.+6      	; 0x26a6 <vfprintf+0x244>
    26a0:	88 35       	cpi	r24, 0x58	; 88
    26a2:	79 f0       	breq	.+30     	; 0x26c2 <vfprintf+0x260>
    26a4:	b5 c0       	rjmp	.+362    	; 0x2810 <vfprintf+0x3ae>
    26a6:	80 37       	cpi	r24, 0x70	; 112
    26a8:	19 f0       	breq	.+6      	; 0x26b0 <vfprintf+0x24e>
    26aa:	88 37       	cpi	r24, 0x78	; 120
    26ac:	21 f0       	breq	.+8      	; 0x26b6 <vfprintf+0x254>
    26ae:	b0 c0       	rjmp	.+352    	; 0x2810 <vfprintf+0x3ae>
    26b0:	e9 2f       	mov	r30, r25
    26b2:	e0 61       	ori	r30, 0x10	; 16
    26b4:	be 2e       	mov	r11, r30
    26b6:	b4 fe       	sbrs	r11, 4
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <vfprintf+0x272>
    26ba:	fb 2d       	mov	r31, r11
    26bc:	f4 60       	ori	r31, 0x04	; 4
    26be:	bf 2e       	mov	r11, r31
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <vfprintf+0x272>
    26c2:	34 fe       	sbrs	r3, 4
    26c4:	0a c0       	rjmp	.+20     	; 0x26da <vfprintf+0x278>
    26c6:	29 2f       	mov	r18, r25
    26c8:	26 60       	ori	r18, 0x06	; 6
    26ca:	b2 2e       	mov	r11, r18
    26cc:	06 c0       	rjmp	.+12     	; 0x26da <vfprintf+0x278>
    26ce:	28 e0       	ldi	r18, 0x08	; 8
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	05 c0       	rjmp	.+10     	; 0x26de <vfprintf+0x27c>
    26d4:	20 e1       	ldi	r18, 0x10	; 16
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <vfprintf+0x27c>
    26da:	20 e1       	ldi	r18, 0x10	; 16
    26dc:	32 e0       	ldi	r19, 0x02	; 2
    26de:	f8 01       	movw	r30, r16
    26e0:	b7 fe       	sbrs	r11, 7
    26e2:	07 c0       	rjmp	.+14     	; 0x26f2 <vfprintf+0x290>
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	0c 5f       	subi	r16, 0xFC	; 252
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	06 c0       	rjmp	.+12     	; 0x26fe <vfprintf+0x29c>
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 5f       	subi	r16, 0xFE	; 254
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	a3 01       	movw	r20, r6
    2700:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__ultoa_invert>
    2704:	88 2e       	mov	r8, r24
    2706:	86 18       	sub	r8, r6
    2708:	fb 2d       	mov	r31, r11
    270a:	ff 77       	andi	r31, 0x7F	; 127
    270c:	3f 2e       	mov	r3, r31
    270e:	36 fe       	sbrs	r3, 6
    2710:	0d c0       	rjmp	.+26     	; 0x272c <vfprintf+0x2ca>
    2712:	23 2d       	mov	r18, r3
    2714:	2e 7f       	andi	r18, 0xFE	; 254
    2716:	a2 2e       	mov	r10, r18
    2718:	89 14       	cp	r8, r9
    271a:	58 f4       	brcc	.+22     	; 0x2732 <vfprintf+0x2d0>
    271c:	34 fe       	sbrs	r3, 4
    271e:	0b c0       	rjmp	.+22     	; 0x2736 <vfprintf+0x2d4>
    2720:	32 fc       	sbrc	r3, 2
    2722:	09 c0       	rjmp	.+18     	; 0x2736 <vfprintf+0x2d4>
    2724:	83 2d       	mov	r24, r3
    2726:	8e 7e       	andi	r24, 0xEE	; 238
    2728:	a8 2e       	mov	r10, r24
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <vfprintf+0x2d4>
    272c:	b8 2c       	mov	r11, r8
    272e:	a3 2c       	mov	r10, r3
    2730:	03 c0       	rjmp	.+6      	; 0x2738 <vfprintf+0x2d6>
    2732:	b8 2c       	mov	r11, r8
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <vfprintf+0x2d6>
    2736:	b9 2c       	mov	r11, r9
    2738:	a4 fe       	sbrs	r10, 4
    273a:	0f c0       	rjmp	.+30     	; 0x275a <vfprintf+0x2f8>
    273c:	fe 01       	movw	r30, r28
    273e:	e8 0d       	add	r30, r8
    2740:	f1 1d       	adc	r31, r1
    2742:	80 81       	ld	r24, Z
    2744:	80 33       	cpi	r24, 0x30	; 48
    2746:	21 f4       	brne	.+8      	; 0x2750 <vfprintf+0x2ee>
    2748:	9a 2d       	mov	r25, r10
    274a:	99 7e       	andi	r25, 0xE9	; 233
    274c:	a9 2e       	mov	r10, r25
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <vfprintf+0x300>
    2750:	a2 fe       	sbrs	r10, 2
    2752:	06 c0       	rjmp	.+12     	; 0x2760 <vfprintf+0x2fe>
    2754:	b3 94       	inc	r11
    2756:	b3 94       	inc	r11
    2758:	04 c0       	rjmp	.+8      	; 0x2762 <vfprintf+0x300>
    275a:	8a 2d       	mov	r24, r10
    275c:	86 78       	andi	r24, 0x86	; 134
    275e:	09 f0       	breq	.+2      	; 0x2762 <vfprintf+0x300>
    2760:	b3 94       	inc	r11
    2762:	a3 fc       	sbrc	r10, 3
    2764:	11 c0       	rjmp	.+34     	; 0x2788 <vfprintf+0x326>
    2766:	a0 fe       	sbrs	r10, 0
    2768:	06 c0       	rjmp	.+12     	; 0x2776 <vfprintf+0x314>
    276a:	b2 14       	cp	r11, r2
    276c:	88 f4       	brcc	.+34     	; 0x2790 <vfprintf+0x32e>
    276e:	28 0c       	add	r2, r8
    2770:	92 2c       	mov	r9, r2
    2772:	9b 18       	sub	r9, r11
    2774:	0e c0       	rjmp	.+28     	; 0x2792 <vfprintf+0x330>
    2776:	b2 14       	cp	r11, r2
    2778:	60 f4       	brcc	.+24     	; 0x2792 <vfprintf+0x330>
    277a:	b6 01       	movw	r22, r12
    277c:	80 e2       	ldi	r24, 0x20	; 32
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    2784:	b3 94       	inc	r11
    2786:	f7 cf       	rjmp	.-18     	; 0x2776 <vfprintf+0x314>
    2788:	b2 14       	cp	r11, r2
    278a:	18 f4       	brcc	.+6      	; 0x2792 <vfprintf+0x330>
    278c:	2b 18       	sub	r2, r11
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <vfprintf+0x332>
    2790:	98 2c       	mov	r9, r8
    2792:	21 2c       	mov	r2, r1
    2794:	a4 fe       	sbrs	r10, 4
    2796:	10 c0       	rjmp	.+32     	; 0x27b8 <vfprintf+0x356>
    2798:	b6 01       	movw	r22, r12
    279a:	80 e3       	ldi	r24, 0x30	; 48
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    27a2:	a2 fe       	sbrs	r10, 2
    27a4:	17 c0       	rjmp	.+46     	; 0x27d4 <vfprintf+0x372>
    27a6:	a1 fc       	sbrc	r10, 1
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <vfprintf+0x34e>
    27aa:	88 e7       	ldi	r24, 0x78	; 120
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <vfprintf+0x352>
    27b0:	88 e5       	ldi	r24, 0x58	; 88
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	b6 01       	movw	r22, r12
    27b6:	0c c0       	rjmp	.+24     	; 0x27d0 <vfprintf+0x36e>
    27b8:	8a 2d       	mov	r24, r10
    27ba:	86 78       	andi	r24, 0x86	; 134
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <vfprintf+0x372>
    27be:	a1 fe       	sbrs	r10, 1
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <vfprintf+0x364>
    27c2:	8b e2       	ldi	r24, 0x2B	; 43
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <vfprintf+0x366>
    27c6:	80 e2       	ldi	r24, 0x20	; 32
    27c8:	a7 fc       	sbrc	r10, 7
    27ca:	8d e2       	ldi	r24, 0x2D	; 45
    27cc:	b6 01       	movw	r22, r12
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    27d4:	89 14       	cp	r8, r9
    27d6:	38 f4       	brcc	.+14     	; 0x27e6 <vfprintf+0x384>
    27d8:	b6 01       	movw	r22, r12
    27da:	80 e3       	ldi	r24, 0x30	; 48
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    27e2:	9a 94       	dec	r9
    27e4:	f7 cf       	rjmp	.-18     	; 0x27d4 <vfprintf+0x372>
    27e6:	8a 94       	dec	r8
    27e8:	f3 01       	movw	r30, r6
    27ea:	e8 0d       	add	r30, r8
    27ec:	f1 1d       	adc	r31, r1
    27ee:	80 81       	ld	r24, Z
    27f0:	b6 01       	movw	r22, r12
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    27f8:	81 10       	cpse	r8, r1
    27fa:	f5 cf       	rjmp	.-22     	; 0x27e6 <vfprintf+0x384>
    27fc:	22 20       	and	r2, r2
    27fe:	09 f4       	brne	.+2      	; 0x2802 <vfprintf+0x3a0>
    2800:	42 ce       	rjmp	.-892    	; 0x2486 <vfprintf+0x24>
    2802:	b6 01       	movw	r22, r12
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 28 14 	call	0x2850	; 0x2850 <fputc>
    280c:	2a 94       	dec	r2
    280e:	f6 cf       	rjmp	.-20     	; 0x27fc <vfprintf+0x39a>
    2810:	f6 01       	movw	r30, r12
    2812:	86 81       	ldd	r24, Z+6	; 0x06
    2814:	97 81       	ldd	r25, Z+7	; 0x07
    2816:	02 c0       	rjmp	.+4      	; 0x281c <vfprintf+0x3ba>
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	9f ef       	ldi	r25, 0xFF	; 255
    281c:	2b 96       	adiw	r28, 0x0b	; 11
    281e:	e2 e1       	ldi	r30, 0x12	; 18
    2820:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__epilogue_restores__>

00002824 <strnlen_P>:
    2824:	fc 01       	movw	r30, r24
    2826:	05 90       	lpm	r0, Z+
    2828:	61 50       	subi	r22, 0x01	; 1
    282a:	70 40       	sbci	r23, 0x00	; 0
    282c:	01 10       	cpse	r0, r1
    282e:	d8 f7       	brcc	.-10     	; 0x2826 <strnlen_P+0x2>
    2830:	80 95       	com	r24
    2832:	90 95       	com	r25
    2834:	8e 0f       	add	r24, r30
    2836:	9f 1f       	adc	r25, r31
    2838:	08 95       	ret

0000283a <strnlen>:
    283a:	fc 01       	movw	r30, r24
    283c:	61 50       	subi	r22, 0x01	; 1
    283e:	70 40       	sbci	r23, 0x00	; 0
    2840:	01 90       	ld	r0, Z+
    2842:	01 10       	cpse	r0, r1
    2844:	d8 f7       	brcc	.-10     	; 0x283c <strnlen+0x2>
    2846:	80 95       	com	r24
    2848:	90 95       	com	r25
    284a:	8e 0f       	add	r24, r30
    284c:	9f 1f       	adc	r25, r31
    284e:	08 95       	ret

00002850 <fputc>:
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	fb 01       	movw	r30, r22
    285a:	23 81       	ldd	r18, Z+3	; 0x03
    285c:	21 fd       	sbrc	r18, 1
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <fputc+0x16>
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	9f ef       	ldi	r25, 0xFF	; 255
    2864:	2c c0       	rjmp	.+88     	; 0x28be <fputc+0x6e>
    2866:	22 ff       	sbrs	r18, 2
    2868:	16 c0       	rjmp	.+44     	; 0x2896 <fputc+0x46>
    286a:	46 81       	ldd	r20, Z+6	; 0x06
    286c:	57 81       	ldd	r21, Z+7	; 0x07
    286e:	24 81       	ldd	r18, Z+4	; 0x04
    2870:	35 81       	ldd	r19, Z+5	; 0x05
    2872:	42 17       	cp	r20, r18
    2874:	53 07       	cpc	r21, r19
    2876:	44 f4       	brge	.+16     	; 0x2888 <fputc+0x38>
    2878:	a0 81       	ld	r26, Z
    287a:	b1 81       	ldd	r27, Z+1	; 0x01
    287c:	9d 01       	movw	r18, r26
    287e:	2f 5f       	subi	r18, 0xFF	; 255
    2880:	3f 4f       	sbci	r19, 0xFF	; 255
    2882:	31 83       	std	Z+1, r19	; 0x01
    2884:	20 83       	st	Z, r18
    2886:	8c 93       	st	X, r24
    2888:	26 81       	ldd	r18, Z+6	; 0x06
    288a:	37 81       	ldd	r19, Z+7	; 0x07
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	3f 4f       	sbci	r19, 0xFF	; 255
    2890:	37 83       	std	Z+7, r19	; 0x07
    2892:	26 83       	std	Z+6, r18	; 0x06
    2894:	14 c0       	rjmp	.+40     	; 0x28be <fputc+0x6e>
    2896:	8b 01       	movw	r16, r22
    2898:	ec 01       	movw	r28, r24
    289a:	fb 01       	movw	r30, r22
    289c:	00 84       	ldd	r0, Z+8	; 0x08
    289e:	f1 85       	ldd	r31, Z+9	; 0x09
    28a0:	e0 2d       	mov	r30, r0
    28a2:	09 95       	icall
    28a4:	89 2b       	or	r24, r25
    28a6:	e1 f6       	brne	.-72     	; 0x2860 <fputc+0x10>
    28a8:	d8 01       	movw	r26, r16
    28aa:	16 96       	adiw	r26, 0x06	; 6
    28ac:	8d 91       	ld	r24, X+
    28ae:	9c 91       	ld	r25, X
    28b0:	17 97       	sbiw	r26, 0x07	; 7
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	17 96       	adiw	r26, 0x07	; 7
    28b6:	9c 93       	st	X, r25
    28b8:	8e 93       	st	-X, r24
    28ba:	16 97       	sbiw	r26, 0x06	; 6
    28bc:	ce 01       	movw	r24, r28
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	08 95       	ret

000028c8 <__ultoa_invert>:
    28c8:	fa 01       	movw	r30, r20
    28ca:	aa 27       	eor	r26, r26
    28cc:	28 30       	cpi	r18, 0x08	; 8
    28ce:	51 f1       	breq	.+84     	; 0x2924 <__ultoa_invert+0x5c>
    28d0:	20 31       	cpi	r18, 0x10	; 16
    28d2:	81 f1       	breq	.+96     	; 0x2934 <__ultoa_invert+0x6c>
    28d4:	e8 94       	clt
    28d6:	6f 93       	push	r22
    28d8:	6e 7f       	andi	r22, 0xFE	; 254
    28da:	6e 5f       	subi	r22, 0xFE	; 254
    28dc:	7f 4f       	sbci	r23, 0xFF	; 255
    28de:	8f 4f       	sbci	r24, 0xFF	; 255
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	af 4f       	sbci	r26, 0xFF	; 255
    28e4:	b1 e0       	ldi	r27, 0x01	; 1
    28e6:	3e d0       	rcall	.+124    	; 0x2964 <__ultoa_invert+0x9c>
    28e8:	b4 e0       	ldi	r27, 0x04	; 4
    28ea:	3c d0       	rcall	.+120    	; 0x2964 <__ultoa_invert+0x9c>
    28ec:	67 0f       	add	r22, r23
    28ee:	78 1f       	adc	r23, r24
    28f0:	89 1f       	adc	r24, r25
    28f2:	9a 1f       	adc	r25, r26
    28f4:	a1 1d       	adc	r26, r1
    28f6:	68 0f       	add	r22, r24
    28f8:	79 1f       	adc	r23, r25
    28fa:	8a 1f       	adc	r24, r26
    28fc:	91 1d       	adc	r25, r1
    28fe:	a1 1d       	adc	r26, r1
    2900:	6a 0f       	add	r22, r26
    2902:	71 1d       	adc	r23, r1
    2904:	81 1d       	adc	r24, r1
    2906:	91 1d       	adc	r25, r1
    2908:	a1 1d       	adc	r26, r1
    290a:	20 d0       	rcall	.+64     	; 0x294c <__ultoa_invert+0x84>
    290c:	09 f4       	brne	.+2      	; 0x2910 <__ultoa_invert+0x48>
    290e:	68 94       	set
    2910:	3f 91       	pop	r19
    2912:	2a e0       	ldi	r18, 0x0A	; 10
    2914:	26 9f       	mul	r18, r22
    2916:	11 24       	eor	r1, r1
    2918:	30 19       	sub	r19, r0
    291a:	30 5d       	subi	r19, 0xD0	; 208
    291c:	31 93       	st	Z+, r19
    291e:	de f6       	brtc	.-74     	; 0x28d6 <__ultoa_invert+0xe>
    2920:	cf 01       	movw	r24, r30
    2922:	08 95       	ret
    2924:	46 2f       	mov	r20, r22
    2926:	47 70       	andi	r20, 0x07	; 7
    2928:	40 5d       	subi	r20, 0xD0	; 208
    292a:	41 93       	st	Z+, r20
    292c:	b3 e0       	ldi	r27, 0x03	; 3
    292e:	0f d0       	rcall	.+30     	; 0x294e <__ultoa_invert+0x86>
    2930:	c9 f7       	brne	.-14     	; 0x2924 <__ultoa_invert+0x5c>
    2932:	f6 cf       	rjmp	.-20     	; 0x2920 <__ultoa_invert+0x58>
    2934:	46 2f       	mov	r20, r22
    2936:	4f 70       	andi	r20, 0x0F	; 15
    2938:	40 5d       	subi	r20, 0xD0	; 208
    293a:	4a 33       	cpi	r20, 0x3A	; 58
    293c:	18 f0       	brcs	.+6      	; 0x2944 <__ultoa_invert+0x7c>
    293e:	49 5d       	subi	r20, 0xD9	; 217
    2940:	31 fd       	sbrc	r19, 1
    2942:	40 52       	subi	r20, 0x20	; 32
    2944:	41 93       	st	Z+, r20
    2946:	02 d0       	rcall	.+4      	; 0x294c <__ultoa_invert+0x84>
    2948:	a9 f7       	brne	.-22     	; 0x2934 <__ultoa_invert+0x6c>
    294a:	ea cf       	rjmp	.-44     	; 0x2920 <__ultoa_invert+0x58>
    294c:	b4 e0       	ldi	r27, 0x04	; 4
    294e:	a6 95       	lsr	r26
    2950:	97 95       	ror	r25
    2952:	87 95       	ror	r24
    2954:	77 95       	ror	r23
    2956:	67 95       	ror	r22
    2958:	ba 95       	dec	r27
    295a:	c9 f7       	brne	.-14     	; 0x294e <__ultoa_invert+0x86>
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	61 05       	cpc	r22, r1
    2960:	71 05       	cpc	r23, r1
    2962:	08 95       	ret
    2964:	9b 01       	movw	r18, r22
    2966:	ac 01       	movw	r20, r24
    2968:	0a 2e       	mov	r0, r26
    296a:	06 94       	lsr	r0
    296c:	57 95       	ror	r21
    296e:	47 95       	ror	r20
    2970:	37 95       	ror	r19
    2972:	27 95       	ror	r18
    2974:	ba 95       	dec	r27
    2976:	c9 f7       	brne	.-14     	; 0x296a <__ultoa_invert+0xa2>
    2978:	62 0f       	add	r22, r18
    297a:	73 1f       	adc	r23, r19
    297c:	84 1f       	adc	r24, r20
    297e:	95 1f       	adc	r25, r21
    2980:	a0 1d       	adc	r26, r0
    2982:	08 95       	ret

00002984 <__prologue_saves__>:
    2984:	2f 92       	push	r2
    2986:	3f 92       	push	r3
    2988:	4f 92       	push	r4
    298a:	5f 92       	push	r5
    298c:	6f 92       	push	r6
    298e:	7f 92       	push	r7
    2990:	8f 92       	push	r8
    2992:	9f 92       	push	r9
    2994:	af 92       	push	r10
    2996:	bf 92       	push	r11
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	ca 1b       	sub	r28, r26
    29ae:	db 0b       	sbc	r29, r27
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	09 94       	ijmp

000029bc <__epilogue_restores__>:
    29bc:	2a 88       	ldd	r2, Y+18	; 0x12
    29be:	39 88       	ldd	r3, Y+17	; 0x11
    29c0:	48 88       	ldd	r4, Y+16	; 0x10
    29c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    29cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ce:	b9 84       	ldd	r11, Y+9	; 0x09
    29d0:	c8 84       	ldd	r12, Y+8	; 0x08
    29d2:	df 80       	ldd	r13, Y+7	; 0x07
    29d4:	ee 80       	ldd	r14, Y+6	; 0x06
    29d6:	fd 80       	ldd	r15, Y+5	; 0x05
    29d8:	0c 81       	ldd	r16, Y+4	; 0x04
    29da:	1b 81       	ldd	r17, Y+3	; 0x03
    29dc:	aa 81       	ldd	r26, Y+2	; 0x02
    29de:	b9 81       	ldd	r27, Y+1	; 0x01
    29e0:	ce 0f       	add	r28, r30
    29e2:	d1 1d       	adc	r29, r1
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	ed 01       	movw	r28, r26
    29f0:	08 95       	ret

000029f2 <_exit>:
    29f2:	f8 94       	cli

000029f4 <__stop_program>:
    29f4:	ff cf       	rjmp	.-2      	; 0x29f4 <__stop_program>
