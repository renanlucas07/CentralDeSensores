
Central de Sensores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  00002b0e  00002ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000235  008002bc  008002bc  00002d5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000300d  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a40  00000000  00000000  00005f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e2  00000000  00000000  000069b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00007f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f9  00000000  00000000  000083f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f9f  00000000  00000000  00008aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <dhtRead+0xac>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ee e0       	ldi	r30, 0x0E	; 14
      fe:	fb e2       	ldi	r31, 0x2B	; 43
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ac 3b       	cpi	r26, 0xBC	; 188
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	ac eb       	ldi	r26, 0xBC	; 188
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a1 3f       	cpi	r26, 0xF1	; 241
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <main>
     120:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <i2cInit>:
*************************************************************************/
unsigned char i2cRepStart(unsigned char address)
{
    return i2cStart( address );

}/* i2cRepStart */
     128:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     12c:	88 e4       	ldi	r24, 0x48	; 72
     12e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     132:	88 e6       	ldi	r24, 0x68	; 104
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
     13a:	08 95       	ret

0000013c <i2cStart>:
     13c:	94 ea       	ldi	r25, 0xA4	; 164
     13e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     142:	ec eb       	ldi	r30, 0xBC	; 188
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	90 81       	ld	r25, Z
     148:	99 23       	and	r25, r25
     14a:	ec f7       	brge	.-6      	; 0x146 <i2cStart+0xa>
     14c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     150:	98 7f       	andi	r25, 0xF8	; 248
     152:	98 30       	cpi	r25, 0x08	; 8
     154:	11 f0       	breq	.+4      	; 0x15a <i2cStart+0x1e>
     156:	90 31       	cpi	r25, 0x10	; 16
     158:	a1 f4       	brne	.+40     	; 0x182 <i2cStart+0x46>
     15a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     15e:	84 e8       	ldi	r24, 0x84	; 132
     160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     164:	ec eb       	ldi	r30, 0xBC	; 188
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	88 23       	and	r24, r24
     16c:	ec f7       	brge	.-6      	; 0x168 <i2cStart+0x2c>
     16e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     172:	98 7f       	andi	r25, 0xF8	; 248
     174:	98 31       	cpi	r25, 0x18	; 24
     176:	39 f0       	breq	.+14     	; 0x186 <i2cStart+0x4a>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 34       	cpi	r25, 0x40	; 64
     17c:	29 f4       	brne	.+10     	; 0x188 <i2cStart+0x4c>
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	08 95       	ret
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	08 95       	ret
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 95       	ret

0000018a <i2cStop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2cStop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     18a:	84 e9       	ldi	r24, 0x94	; 148
     18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     190:	ec eb       	ldi	r30, 0xBC	; 188
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	84 fd       	sbrc	r24, 4
     198:	fd cf       	rjmp	.-6      	; 0x194 <i2cStop+0xa>

}/* i2cStop */
     19a:	08 95       	ret

0000019c <i2cWrite>:
unsigned char i2cWrite( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     19c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     1a0:	84 e8       	ldi	r24, 0x84	; 132
     1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1a6:	ec eb       	ldi	r30, 0xBC	; 188
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	88 23       	and	r24, r24
     1ae:	ec f7       	brge	.-6      	; 0x1aa <i2cWrite+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1b4:	98 7f       	andi	r25, 0xF8	; 248
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	98 32       	cpi	r25, 0x28	; 40
     1ba:	09 f4       	brne	.+2      	; 0x1be <i2cWrite+0x22>
     1bc:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2cWrite */
     1be:	08 95       	ret

000001c0 <i2cReadAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2cReadAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     1c0:	84 ec       	ldi	r24, 0xC4	; 196
     1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
     1c6:	ec eb       	ldi	r30, 0xBC	; 188
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	88 23       	and	r24, r24
     1ce:	ec f7       	brge	.-6      	; 0x1ca <i2cReadAck+0xa>

    return TWDR;
     1d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2cReadAck */
     1d4:	08 95       	ret

000001d6 <i2cReadNack>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2cReadNack(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1d6:	84 e8       	ldi	r24, 0x84	; 132
     1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1dc:	ec eb       	ldi	r30, 0xBC	; 188
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	88 23       	and	r24, r24
     1e4:	ec f7       	brge	.-6      	; 0x1e0 <i2cReadNack+0xa>
	
    return TWDR;
     1e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2cReadNack */
     1ea:	08 95       	ret

000001ec <serialStart>:
	return TP;
}

uint8_t checkSum(){
	return SUM;
}
     1ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     1f0:	87 e6       	ldi	r24, 0x67	; 103
     1f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     1f6:	e1 ec       	ldi	r30, 0xC1	; 193
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 68       	ori	r24, 0x80	; 128
     1fe:	80 83       	st	Z, r24
     200:	80 81       	ld	r24, Z
     202:	88 61       	ori	r24, 0x18	; 24
     204:	80 83       	st	Z, r24
     206:	e2 ec       	ldi	r30, 0xC2	; 194
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	86 60       	ori	r24, 0x06	; 6
     20e:	80 83       	st	Z, r24
     210:	08 95       	ret

00000212 <serialSend>:
     212:	e0 ec       	ldi	r30, 0xC0	; 192
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	95 ff       	sbrs	r25, 5
     21a:	fd cf       	rjmp	.-6      	; 0x216 <serialSend+0x4>
     21c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     220:	08 95       	ret

00000222 <serialString>:
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	59 f0       	breq	.+22     	; 0x246 <serialString+0x24>
     230:	8f 01       	movw	r16, r30
     232:	c0 e0       	ldi	r28, 0x00	; 0
     234:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
     238:	cf 5f       	subi	r28, 0xFF	; 255
     23a:	f8 01       	movw	r30, r16
     23c:	ec 0f       	add	r30, r28
     23e:	f1 1d       	adc	r31, r1
     240:	80 81       	ld	r24, Z
     242:	81 11       	cpse	r24, r1
     244:	f7 cf       	rjmp	.-18     	; 0x234 <serialString+0x12>
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <serialStringLN>:
     24e:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
     252:	8d e0       	ldi	r24, 0x0D	; 13
     254:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
     25e:	08 95       	ret

00000260 <serialSendInt>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	2a 97       	sbiw	r28, 0x0a	; 10
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	12 2f       	mov	r17, r18
     278:	4a 30       	cpi	r20, 0x0A	; 10
     27a:	29 f0       	breq	.+10     	; 0x286 <serialSendInt+0x26>
     27c:	40 31       	cpi	r20, 0x10	; 16
     27e:	59 f1       	breq	.+86     	; 0x2d6 <serialSendInt+0x76>
     280:	48 30       	cpi	r20, 0x08	; 8
     282:	e1 f5       	brne	.+120    	; 0x2fc <serialSendInt+0x9c>
     284:	14 c0       	rjmp	.+40     	; 0x2ae <serialSendInt+0x4e>
     286:	9f 93       	push	r25
     288:	8f 93       	push	r24
     28a:	7f 93       	push	r23
     28c:	6f 93       	push	r22
     28e:	8a e7       	ldi	r24, 0x7A	; 122
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	9f 93       	push	r25
     294:	8f 93       	push	r24
     296:	ce 01       	movw	r24, r28
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	9f 93       	push	r25
     29c:	8f 93       	push	r24
     29e:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <serialSendInt+0x9c>
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	7f 93       	push	r23
     2b4:	6f 93       	push	r22
     2b6:	8e e7       	ldi	r24, 0x7E	; 126
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	ce 01       	movw	r24, r28
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	13 c0       	rjmp	.+38     	; 0x2fc <serialSendInt+0x9c>
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	7f 93       	push	r23
     2dc:	6f 93       	push	r22
     2de:	84 e8       	ldi	r24, 0x84	; 132
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	ce 01       	movw	r24, r28
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	11 23       	and	r17, r17
     2fe:	29 f0       	breq	.+10     	; 0x30a <serialSendInt+0xaa>
     300:	ce 01       	movw	r24, r28
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
     308:	04 c0       	rjmp	.+8      	; 0x312 <serialSendInt+0xb2>
     30a:	ce 01       	movw	r24, r28
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
     312:	2a 96       	adiw	r28, 0x0a	; 10
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	08 95       	ret

00000326 <wiz5200Write>:
     326:	2a 98       	cbi	0x05, 2	; 5
     328:	9e bd       	out	0x2e, r25	; 46
     32a:	0d b4       	in	r0, 0x2d	; 45
     32c:	07 fe       	sbrs	r0, 7
     32e:	fd cf       	rjmp	.-6      	; 0x32a <wiz5200Write+0x4>
     330:	9e b5       	in	r25, 0x2e	; 46
     332:	8e bd       	out	0x2e, r24	; 46
     334:	0d b4       	in	r0, 0x2d	; 45
     336:	07 fe       	sbrs	r0, 7
     338:	fd cf       	rjmp	.-6      	; 0x334 <wiz5200Write+0xe>
     33a:	8e b5       	in	r24, 0x2e	; 46
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	8e bd       	out	0x2e, r24	; 46
     340:	0d b4       	in	r0, 0x2d	; 45
     342:	07 fe       	sbrs	r0, 7
     344:	fd cf       	rjmp	.-6      	; 0x340 <wiz5200Write+0x1a>
     346:	8e b5       	in	r24, 0x2e	; 46
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8e bd       	out	0x2e, r24	; 46
     34c:	0d b4       	in	r0, 0x2d	; 45
     34e:	07 fe       	sbrs	r0, 7
     350:	fd cf       	rjmp	.-6      	; 0x34c <wiz5200Write+0x26>
     352:	8e b5       	in	r24, 0x2e	; 46
     354:	6e bd       	out	0x2e, r22	; 46
     356:	0d b4       	in	r0, 0x2d	; 45
     358:	07 fe       	sbrs	r0, 7
     35a:	fd cf       	rjmp	.-6      	; 0x356 <wiz5200Write+0x30>
     35c:	8e b5       	in	r24, 0x2e	; 46
     35e:	2a 9a       	sbi	0x05, 2	; 5
     360:	08 95       	ret

00000362 <wiz5200Read>:
     362:	2a 98       	cbi	0x05, 2	; 5
     364:	9e bd       	out	0x2e, r25	; 46
     366:	0d b4       	in	r0, 0x2d	; 45
     368:	07 fe       	sbrs	r0, 7
     36a:	fd cf       	rjmp	.-6      	; 0x366 <wiz5200Read+0x4>
     36c:	9e b5       	in	r25, 0x2e	; 46
     36e:	8e bd       	out	0x2e, r24	; 46
     370:	0d b4       	in	r0, 0x2d	; 45
     372:	07 fe       	sbrs	r0, 7
     374:	fd cf       	rjmp	.-6      	; 0x370 <wiz5200Read+0xe>
     376:	8e b5       	in	r24, 0x2e	; 46
     378:	1e bc       	out	0x2e, r1	; 46
     37a:	0d b4       	in	r0, 0x2d	; 45
     37c:	07 fe       	sbrs	r0, 7
     37e:	fd cf       	rjmp	.-6      	; 0x37a <wiz5200Read+0x18>
     380:	8e b5       	in	r24, 0x2e	; 46
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	8e bd       	out	0x2e, r24	; 46
     386:	0d b4       	in	r0, 0x2d	; 45
     388:	07 fe       	sbrs	r0, 7
     38a:	fd cf       	rjmp	.-6      	; 0x386 <wiz5200Read+0x24>
     38c:	8e b5       	in	r24, 0x2e	; 46
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	8e bd       	out	0x2e, r24	; 46
     392:	0d b4       	in	r0, 0x2d	; 45
     394:	07 fe       	sbrs	r0, 7
     396:	fd cf       	rjmp	.-6      	; 0x392 <wiz5200Read+0x30>
     398:	8e b5       	in	r24, 0x2e	; 46
     39a:	2a 9a       	sbi	0x05, 2	; 5
     39c:	08 95       	ret

0000039e <wiz5200Init>:
     39e:	af 92       	push	r10
     3a0:	bf 92       	push	r11
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	c8 2e       	mov	r12, r24
     3b4:	d9 2e       	mov	r13, r25
     3b6:	d6 2f       	mov	r29, r22
     3b8:	c7 2f       	mov	r28, r23
     3ba:	a4 2e       	mov	r10, r20
     3bc:	b5 2e       	mov	r11, r21
     3be:	e2 2e       	mov	r14, r18
     3c0:	f3 2e       	mov	r15, r19
     3c2:	60 e8       	ldi	r22, 0x80	; 128
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     3cc:	0d 2f       	mov	r16, r29
     3ce:	1c 2f       	mov	r17, r28
     3d0:	c9 e0       	ldi	r28, 0x09	; 9
     3d2:	d0 e0       	ldi	r29, 0x00	; 0
     3d4:	f8 01       	movw	r30, r16
     3d6:	61 91       	ld	r22, Z+
     3d8:	8f 01       	movw	r16, r30
     3da:	ce 01       	movw	r24, r28
     3dc:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     3e0:	21 96       	adiw	r28, 0x01	; 1
     3e2:	cf 30       	cpi	r28, 0x0F	; 15
     3e4:	d1 05       	cpc	r29, r1
     3e6:	b1 f7       	brne	.-20     	; 0x3d4 <wiz5200Init+0x36>
     3e8:	0c 2d       	mov	r16, r12
     3ea:	1d 2d       	mov	r17, r13
     3ec:	f8 01       	movw	r30, r16
     3ee:	61 91       	ld	r22, Z+
     3f0:	8f 01       	movw	r16, r30
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     3f8:	21 96       	adiw	r28, 0x01	; 1
     3fa:	c3 31       	cpi	r28, 0x13	; 19
     3fc:	d1 05       	cpc	r29, r1
     3fe:	b1 f7       	brne	.-20     	; 0x3ec <wiz5200Init+0x4e>
     400:	0a 2d       	mov	r16, r10
     402:	1b 2d       	mov	r17, r11
     404:	c0 e0       	ldi	r28, 0x00	; 0
     406:	d0 e0       	ldi	r29, 0x00	; 0
     408:	f8 01       	movw	r30, r16
     40a:	61 91       	ld	r22, Z+
     40c:	8f 01       	movw	r16, r30
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	ce 01       	movw	r24, r28
     412:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     416:	c4 30       	cpi	r28, 0x04	; 4
     418:	d1 05       	cpc	r29, r1
     41a:	b1 f7       	brne	.-20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     41c:	0e 2d       	mov	r16, r14
     41e:	1f 2d       	mov	r17, r15
     420:	c5 e0       	ldi	r28, 0x05	; 5
     422:	d0 e0       	ldi	r29, 0x00	; 0
     424:	f8 01       	movw	r30, r16
     426:	61 91       	ld	r22, Z+
     428:	8f 01       	movw	r16, r30
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     430:	21 96       	adiw	r28, 0x01	; 1
     432:	c9 30       	cpi	r28, 0x09	; 9
     434:	d1 05       	cpc	r29, r1
     436:	b1 f7       	brne	.-20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 ec       	ldi	r25, 0xC0	; 192
     43e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     442:	65 e0       	ldi	r22, 0x05	; 5
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e8       	ldi	r25, 0x80	; 128
     448:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	08 95       	ret

00000464 <close>:
     464:	60 e1       	ldi	r22, 0x10	; 16
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e4       	ldi	r25, 0x40	; 64
     46a:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e4       	ldi	r25, 0x40	; 64
     472:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     476:	81 11       	cpse	r24, r1
     478:	fa cf       	rjmp	.-12     	; 0x46e <close+0xa>
     47a:	08 95       	ret

0000047c <disconnect>:
     47c:	68 e0       	ldi	r22, 0x08	; 8
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e4       	ldi	r25, 0x40	; 64
     482:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e4       	ldi	r25, 0x40	; 64
     48a:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     48e:	81 11       	cpse	r24, r1
     490:	fa cf       	rjmp	.-12     	; 0x486 <disconnect+0xa>
     492:	08 95       	ret

00000494 <listen>:
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e4       	ldi	r25, 0x40	; 64
     498:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     49c:	83 31       	cpi	r24, 0x13	; 19
     49e:	a9 f4       	brne	.+42     	; 0x4ca <listen+0x36>
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e4       	ldi	r25, 0x40	; 64
     4a6:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e4       	ldi	r25, 0x40	; 64
     4ae:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     4b2:	81 11       	cpse	r24, r1
     4b4:	fa cf       	rjmp	.-12     	; 0x4aa <listen+0x16>
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	90 e4       	ldi	r25, 0x40	; 64
     4ba:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     4be:	84 31       	cpi	r24, 0x14	; 20
     4c0:	31 f0       	breq	.+12     	; 0x4ce <listen+0x3a>
     4c2:	0e 94 32 02 	call	0x464	; 0x464 <close>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	08 95       	ret
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	08 95       	ret
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	08 95       	ret

000004d2 <send>:
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	7c 01       	movw	r14, r24
     4e8:	8b 01       	movw	r16, r22
     4ea:	67 2b       	or	r22, r23
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <send+0x1e>
     4ee:	5c c0       	rjmp	.+184    	; 0x5a8 <send+0xd6>
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	90 e4       	ldi	r25, 0x40	; 64
     4f4:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     4f8:	c8 2f       	mov	r28, r24
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
     4fc:	dc 2f       	mov	r29, r28
     4fe:	cc 27       	eor	r28, r28
     500:	81 e2       	ldi	r24, 0x21	; 33
     502:	90 e4       	ldi	r25, 0x40	; 64
     504:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     508:	c8 0f       	add	r28, r24
     50a:	d1 1d       	adc	r29, r1
     50c:	c0 17       	cp	r28, r16
     50e:	d1 07       	cpc	r29, r17
     510:	08 f4       	brcc	.+2      	; 0x514 <send+0x42>
     512:	5e c0       	rjmp	.+188    	; 0x5d0 <send+0xfe>
     514:	4c c0       	rjmp	.+152    	; 0x5ae <send+0xdc>
     516:	8f e9       	ldi	r24, 0x9F	; 159
     518:	9f e0       	ldi	r25, 0x0F	; 15
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <send+0x48>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <send+0x4e>
     520:	00 00       	nop
     522:	80 e2       	ldi	r24, 0x20	; 32
     524:	90 e4       	ldi	r25, 0x40	; 64
     526:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	d8 2f       	mov	r29, r24
     52e:	cc 27       	eor	r28, r28
     530:	81 e2       	ldi	r24, 0x21	; 33
     532:	90 e4       	ldi	r25, 0x40	; 64
     534:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     538:	fe 01       	movw	r30, r28
     53a:	e8 0f       	add	r30, r24
     53c:	f1 1d       	adc	r31, r1
     53e:	cf 01       	movw	r24, r30
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	cf 1a       	sub	r12, r31
     544:	d1 08       	sbc	r13, r1
     546:	19 f4       	brne	.+6      	; 0x54e <send+0x7c>
     548:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
     54c:	5d c0       	rjmp	.+186    	; 0x608 <send+0x136>
     54e:	80 17       	cp	r24, r16
     550:	91 07       	cpc	r25, r17
     552:	08 f3       	brcs	.-62     	; 0x516 <send+0x44>
     554:	2c c0       	rjmp	.+88     	; 0x5ae <send+0xdc>
     556:	21 97       	sbiw	r28, 0x01	; 1
     558:	c6 01       	movw	r24, r12
     55a:	97 70       	andi	r25, 0x07	; 7
     55c:	f7 01       	movw	r30, r14
     55e:	61 91       	ld	r22, Z+
     560:	7f 01       	movw	r14, r30
     562:	90 58       	subi	r25, 0x80	; 128
     564:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     568:	ff ef       	ldi	r31, 0xFF	; 255
     56a:	cf 1a       	sub	r12, r31
     56c:	df 0a       	sbc	r13, r31
     56e:	20 97       	sbiw	r28, 0x00	; 0
     570:	91 f7       	brne	.-28     	; 0x556 <send+0x84>
     572:	0a 0d       	add	r16, r10
     574:	1b 1d       	adc	r17, r11
     576:	61 2f       	mov	r22, r17
     578:	84 e2       	ldi	r24, 0x24	; 36
     57a:	90 e4       	ldi	r25, 0x40	; 64
     57c:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     580:	60 2f       	mov	r22, r16
     582:	85 e2       	ldi	r24, 0x25	; 37
     584:	90 e4       	ldi	r25, 0x40	; 64
     586:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     58a:	60 e2       	ldi	r22, 0x20	; 32
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e4       	ldi	r25, 0x40	; 64
     590:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e4       	ldi	r25, 0x40	; 64
     598:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     59c:	81 11       	cpse	r24, r1
     59e:	fa cf       	rjmp	.-12     	; 0x594 <send+0xc2>
     5a0:	cc 24       	eor	r12, r12
     5a2:	c3 94       	inc	r12
     5a4:	d1 2c       	mov	r13, r1
     5a6:	30 c0       	rjmp	.+96     	; 0x608 <send+0x136>
     5a8:	c1 2c       	mov	r12, r1
     5aa:	d1 2c       	mov	r13, r1
     5ac:	2d c0       	rjmp	.+90     	; 0x608 <send+0x136>
     5ae:	84 e2       	ldi	r24, 0x24	; 36
     5b0:	90 e4       	ldi	r25, 0x40	; 64
     5b2:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5b6:	a8 2e       	mov	r10, r24
     5b8:	85 e2       	ldi	r24, 0x25	; 37
     5ba:	90 e4       	ldi	r25, 0x40	; 64
     5bc:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5c0:	b1 2c       	mov	r11, r1
     5c2:	ba 2c       	mov	r11, r10
     5c4:	aa 24       	eor	r10, r10
     5c6:	a8 0e       	add	r10, r24
     5c8:	b1 1c       	adc	r11, r1
     5ca:	65 01       	movw	r12, r10
     5cc:	e8 01       	movw	r28, r16
     5ce:	c3 cf       	rjmp	.-122    	; 0x556 <send+0x84>
     5d0:	8f e9       	ldi	r24, 0x9F	; 159
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <send+0x102>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <send+0x108>
     5da:	00 00       	nop
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	90 e4       	ldi	r25, 0x40	; 64
     5e0:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	d8 2f       	mov	r29, r24
     5e8:	cc 27       	eor	r28, r28
     5ea:	81 e2       	ldi	r24, 0x21	; 33
     5ec:	90 e4       	ldi	r25, 0x40	; 64
     5ee:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     5f2:	fe 01       	movw	r30, r28
     5f4:	e8 0f       	add	r30, r24
     5f6:	f1 1d       	adc	r31, r1
     5f8:	cf 01       	movw	r24, r30
     5fa:	0f 2e       	mov	r0, r31
     5fc:	f9 ee       	ldi	r31, 0xE9	; 233
     5fe:	cf 2e       	mov	r12, r31
     600:	f3 e0       	ldi	r31, 0x03	; 3
     602:	df 2e       	mov	r13, r31
     604:	f0 2d       	mov	r31, r0
     606:	a3 cf       	rjmp	.-186    	; 0x54e <send+0x7c>
     608:	c6 01       	movw	r24, r12
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	08 95       	ret

00000620 <receive>:
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	5c 01       	movw	r10, r24
     63a:	6b 01       	movw	r12, r22
     63c:	61 15       	cp	r22, r1
     63e:	71 05       	cpc	r23, r1
     640:	09 f4       	brne	.+2      	; 0x644 <receive+0x24>
     642:	44 c0       	rjmp	.+136    	; 0x6cc <receive+0xac>
     644:	61 30       	cpi	r22, 0x01	; 1
     646:	72 40       	sbci	r23, 0x02	; 2
     648:	78 f1       	brcs	.+94     	; 0x6a8 <receive+0x88>
     64a:	0f 2e       	mov	r0, r31
     64c:	fe ef       	ldi	r31, 0xFE	; 254
     64e:	cf 2e       	mov	r12, r31
     650:	dd 24       	eor	r13, r13
     652:	d3 94       	inc	r13
     654:	f0 2d       	mov	r31, r0
     656:	28 c0       	rjmp	.+80     	; 0x6a8 <receive+0x88>
     658:	21 97       	sbiw	r28, 0x01	; 1
     65a:	c4 01       	movw	r24, r8
     65c:	97 70       	andi	r25, 0x07	; 7
     65e:	90 54       	subi	r25, 0x40	; 64
     660:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     664:	f8 01       	movw	r30, r16
     666:	81 93       	st	Z+, r24
     668:	8f 01       	movw	r16, r30
     66a:	ff ef       	ldi	r31, 0xFF	; 255
     66c:	8f 1a       	sub	r8, r31
     66e:	9f 0a       	sbc	r9, r31
     670:	20 97       	sbiw	r28, 0x00	; 0
     672:	91 f7       	brne	.-28     	; 0x658 <receive+0x38>
     674:	ec 0c       	add	r14, r12
     676:	fd 1c       	adc	r15, r13
     678:	f5 01       	movw	r30, r10
     67a:	ec 0d       	add	r30, r12
     67c:	fd 1d       	adc	r31, r13
     67e:	10 82       	st	Z, r1
     680:	6f 2d       	mov	r22, r15
     682:	88 e2       	ldi	r24, 0x28	; 40
     684:	90 e4       	ldi	r25, 0x40	; 64
     686:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     68a:	6e 2d       	mov	r22, r14
     68c:	89 e2       	ldi	r24, 0x29	; 41
     68e:	90 e4       	ldi	r25, 0x40	; 64
     690:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     694:	60 e4       	ldi	r22, 0x40	; 64
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e4       	ldi	r25, 0x40	; 64
     69a:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     69e:	8a e1       	ldi	r24, 0x1A	; 26
     6a0:	8a 95       	dec	r24
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <receive+0x80>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <receive+0x86>
     6a6:	12 c0       	rjmp	.+36     	; 0x6cc <receive+0xac>
     6a8:	88 e2       	ldi	r24, 0x28	; 40
     6aa:	90 e4       	ldi	r25, 0x40	; 64
     6ac:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6b0:	e8 2e       	mov	r14, r24
     6b2:	89 e2       	ldi	r24, 0x29	; 41
     6b4:	90 e4       	ldi	r25, 0x40	; 64
     6b6:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6ba:	f1 2c       	mov	r15, r1
     6bc:	fe 2c       	mov	r15, r14
     6be:	ee 24       	eor	r14, r14
     6c0:	e8 0e       	add	r14, r24
     6c2:	f1 1c       	adc	r15, r1
     6c4:	47 01       	movw	r8, r14
     6c6:	e6 01       	movw	r28, r12
     6c8:	85 01       	movw	r16, r10
     6ca:	c6 cf       	rjmp	.-116    	; 0x658 <receive+0x38>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	bf 90       	pop	r11
     6e2:	af 90       	pop	r10
     6e4:	9f 90       	pop	r9
     6e6:	8f 90       	pop	r8
     6e8:	08 95       	ret

000006ea <receiveSize>:
     6ea:	cf 93       	push	r28
     6ec:	86 e2       	ldi	r24, 0x26	; 38
     6ee:	90 e4       	ldi	r25, 0x40	; 64
     6f0:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6f4:	c8 2f       	mov	r28, r24
     6f6:	87 e2       	ldi	r24, 0x27	; 39
     6f8:	90 e4       	ldi	r25, 0x40	; 64
     6fa:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     6fe:	2c 2f       	mov	r18, r28
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	32 2f       	mov	r19, r18
     704:	22 27       	eor	r18, r18
     706:	a9 01       	movw	r20, r18
     708:	48 0f       	add	r20, r24
     70a:	51 1d       	adc	r21, r1
     70c:	ca 01       	movw	r24, r20
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <connect>:
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	f6 2e       	mov	r15, r22
     722:	e7 2e       	mov	r14, r23
     724:	d4 2e       	mov	r13, r20
     726:	c5 2e       	mov	r12, r21
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e4       	ldi	r25, 0x40	; 64
     72e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     732:	6c 2d       	mov	r22, r12
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	90 e4       	ldi	r25, 0x40	; 64
     738:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     73c:	6d 2d       	mov	r22, r13
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	90 e4       	ldi	r25, 0x40	; 64
     742:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     746:	68 81       	ld	r22, Y
     748:	8c e0       	ldi	r24, 0x0C	; 12
     74a:	90 e4       	ldi	r25, 0x40	; 64
     74c:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	8d e0       	ldi	r24, 0x0D	; 13
     754:	90 e4       	ldi	r25, 0x40	; 64
     756:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     75a:	6a 81       	ldd	r22, Y+2	; 0x02
     75c:	8e e0       	ldi	r24, 0x0E	; 14
     75e:	90 e4       	ldi	r25, 0x40	; 64
     760:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     764:	6b 81       	ldd	r22, Y+3	; 0x03
     766:	8f e0       	ldi	r24, 0x0F	; 15
     768:	90 e4       	ldi	r25, 0x40	; 64
     76a:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     76e:	6e 2d       	mov	r22, r14
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	90 e4       	ldi	r25, 0x40	; 64
     774:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     778:	6f 2d       	mov	r22, r15
     77a:	81 e1       	ldi	r24, 0x11	; 17
     77c:	90 e4       	ldi	r25, 0x40	; 64
     77e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e4       	ldi	r25, 0x40	; 64
     788:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	90 e4       	ldi	r25, 0x40	; 64
     790:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     794:	83 31       	cpi	r24, 0x13	; 19
     796:	d1 f7       	brne	.-12     	; 0x78c <connect+0x7a>
     798:	64 e0       	ldi	r22, 0x04	; 4
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e4       	ldi	r25, 0x40	; 64
     79e:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	90 e4       	ldi	r25, 0x40	; 64
     7a6:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     7aa:	87 31       	cpi	r24, 0x17	; 23
     7ac:	d1 f1       	breq	.+116    	; 0x822 <connect+0x110>
     7ae:	c1 2c       	mov	r12, r1
     7b0:	d1 2c       	mov	r13, r1
     7b2:	76 01       	movw	r14, r12
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e4       	ldi	r25, 0x40	; 64
     7ba:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	90 e4       	ldi	r25, 0x40	; 64
     7c2:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     7c6:	83 31       	cpi	r24, 0x13	; 19
     7c8:	d1 f7       	brne	.-12     	; 0x7be <connect+0xac>
     7ca:	64 e0       	ldi	r22, 0x04	; 4
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e4       	ldi	r25, 0x40	; 64
     7d0:	0e 94 93 01 	call	0x326	; 0x326 <wiz5200Write>
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	80 e7       	ldi	r24, 0x70	; 112
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <connect+0xc8>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <connect+0xd2>
     7e4:	00 00       	nop
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	90 e4       	ldi	r25, 0x40	; 64
     7ea:	0e 94 b1 01 	call	0x362	; 0x362 <wiz5200Read>
     7ee:	c8 2f       	mov	r28, r24
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	4a e0       	ldi	r20, 0x0A	; 10
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
     7f8:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
     7fc:	24 e6       	ldi	r18, 0x64	; 100
     7fe:	c2 16       	cp	r12, r18
     800:	d1 04       	cpc	r13, r1
     802:	e1 04       	cpc	r14, r1
     804:	f1 04       	cpc	r15, r1
     806:	21 f4       	brne	.+8      	; 0x810 <connect+0xfe>
     808:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0a c0       	rjmp	.+20     	; 0x824 <connect+0x112>
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	c8 1a       	sub	r12, r24
     814:	d8 0a       	sbc	r13, r24
     816:	e8 0a       	sbc	r14, r24
     818:	f8 0a       	sbc	r15, r24
     81a:	c7 31       	cpi	r28, 0x17	; 23
     81c:	59 f6       	brne	.-106    	; 0x7b4 <connect+0xa2>
     81e:	87 e1       	ldi	r24, 0x17	; 23
     820:	01 c0       	rjmp	.+2      	; 0x824 <connect+0x112>
     822:	87 e1       	ldi	r24, 0x17	; 23
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <dhtStart>:
     832:	57 9a       	sbi	0x0a, 7	; 10
     834:	5f 9a       	sbi	0x0b, 7	; 11
     836:	08 95       	ret

00000838 <dhtRead>:
     838:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <HM+0x1>
     83c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <HM>
     840:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <TP+0x1>
     844:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <TP>
     848:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <SUM>
     84c:	5f 98       	cbi	0x0b, 7	; 11
     84e:	8f e3       	ldi	r24, 0x3F	; 63
     850:	9f e1       	ldi	r25, 0x1F	; 31
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <dhtRead+0x1a>
     856:	00 c0       	rjmp	.+0      	; 0x858 <dhtRead+0x20>
     858:	00 00       	nop
     85a:	5f 9a       	sbi	0x0b, 7	; 11
     85c:	57 98       	cbi	0x0a, 7	; 10
     85e:	9a e6       	ldi	r25, 0x6A	; 106
     860:	9a 95       	dec	r25
     862:	f1 f7       	brne	.-4      	; 0x860 <dhtRead+0x28>
     864:	00 c0       	rjmp	.+0      	; 0x866 <dhtRead+0x2e>
     866:	4f 9b       	sbis	0x09, 7	; 9
     868:	0c c0       	rjmp	.+24     	; 0x882 <dhtRead+0x4a>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	9a e1       	ldi	r25, 0x1A	; 26
     86e:	9a 95       	dec	r25
     870:	f1 f7       	brne	.-4      	; 0x86e <dhtRead+0x36>
     872:	00 c0       	rjmp	.+0      	; 0x874 <dhtRead+0x3c>
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	4f 9b       	sbis	0x09, 7	; 9
     878:	05 c0       	rjmp	.+10     	; 0x884 <dhtRead+0x4c>
     87a:	88 30       	cpi	r24, 0x08	; 8
     87c:	b9 f7       	brne	.-18     	; 0x86c <dhtRead+0x34>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	88 30       	cpi	r24, 0x08	; 8
     886:	08 f0       	brcs	.+2      	; 0x88a <dhtRead+0x52>
     888:	75 c0       	rjmp	.+234    	; 0x974 <__stack+0x75>
     88a:	4f 9b       	sbis	0x09, 7	; 9
     88c:	fe cf       	rjmp	.-4      	; 0x88a <dhtRead+0x52>
     88e:	4f 99       	sbic	0x09, 7	; 9
     890:	fe cf       	rjmp	.-4      	; 0x88e <dhtRead+0x56>
     892:	2f e0       	ldi	r18, 0x0F	; 15
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	4f 9b       	sbis	0x09, 7	; 9
     89c:	fe cf       	rjmp	.-4      	; 0x89a <dhtRead+0x62>
     89e:	4f 9b       	sbis	0x09, 7	; 9
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <dhtRead+0xa0>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	9a e0       	ldi	r25, 0x0A	; 10
     8a6:	9a 95       	dec	r25
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <dhtRead+0x6e>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <dhtRead+0x74>
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	4f 99       	sbic	0x09, 7	; 9
     8b0:	f9 cf       	rjmp	.-14     	; 0x8a4 <dhtRead+0x6c>
     8b2:	80 31       	cpi	r24, 0x10	; 16
     8b4:	88 f0       	brcs	.+34     	; 0x8d8 <dhtRead+0xa0>
     8b6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <HM>
     8ba:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <HM+0x1>
     8be:	ab 01       	movw	r20, r22
     8c0:	02 2e       	mov	r0, r18
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <dhtRead+0x90>
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	0a 94       	dec	r0
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <dhtRead+0x8c>
     8cc:	84 2b       	or	r24, r20
     8ce:	95 2b       	or	r25, r21
     8d0:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <HM+0x1>
     8d4:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <HM>
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	31 09       	sbc	r19, r1
     8dc:	f0 f6       	brcc	.-68     	; 0x89a <dhtRead+0x62>
     8de:	2f e0       	ldi	r18, 0x0F	; 15
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	4f 9b       	sbis	0x09, 7	; 9
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <dhtRead+0xae>
     8ea:	4f 9b       	sbis	0x09, 7	; 9
     8ec:	1b c0       	rjmp	.+54     	; 0x924 <__stack+0x25>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	9a e0       	ldi	r25, 0x0A	; 10
     8f2:	9a 95       	dec	r25
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <dhtRead+0xba>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <dhtRead+0xc0>
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	4f 99       	sbic	0x09, 7	; 9
     8fc:	f9 cf       	rjmp	.-14     	; 0x8f0 <dhtRead+0xb8>
     8fe:	80 31       	cpi	r24, 0x10	; 16
     900:	88 f0       	brcs	.+34     	; 0x924 <__stack+0x25>
     902:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <TP>
     906:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <TP+0x1>
     90a:	ab 01       	movw	r20, r22
     90c:	02 2e       	mov	r0, r18
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
     910:	44 0f       	add	r20, r20
     912:	55 1f       	adc	r21, r21
     914:	0a 94       	dec	r0
     916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0x11>
     918:	84 2b       	or	r24, r20
     91a:	95 2b       	or	r25, r21
     91c:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <TP+0x1>
     920:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <TP>
     924:	21 50       	subi	r18, 0x01	; 1
     926:	31 09       	sbc	r19, r1
     928:	f0 f6       	brcc	.-68     	; 0x8e6 <dhtRead+0xae>
     92a:	27 e0       	ldi	r18, 0x07	; 7
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	4f 9b       	sbis	0x09, 7	; 9
     934:	fe cf       	rjmp	.-4      	; 0x932 <__stack+0x33>
     936:	4f 9b       	sbis	0x09, 7	; 9
     938:	16 c0       	rjmp	.+44     	; 0x966 <__stack+0x67>
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	9a e0       	ldi	r25, 0x0A	; 10
     93e:	9a 95       	dec	r25
     940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0x3f>
     942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0x45>
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	4f 99       	sbic	0x09, 7	; 9
     948:	f9 cf       	rjmp	.-14     	; 0x93c <__stack+0x3d>
     94a:	80 31       	cpi	r24, 0x10	; 16
     94c:	60 f0       	brcs	.+24     	; 0x966 <__stack+0x67>
     94e:	40 91 ee 04 	lds	r20, 0x04EE	; 0x8004ee <SUM>
     952:	cb 01       	movw	r24, r22
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0x59>
     960:	84 2b       	or	r24, r20
     962:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <SUM>
     966:	21 50       	subi	r18, 0x01	; 1
     968:	31 09       	sbc	r19, r1
     96a:	18 f7       	brcc	.-58     	; 0x932 <__stack+0x33>
     96c:	57 9a       	sbi	0x0a, 7	; 10
     96e:	5f 9a       	sbi	0x0b, 7	; 11
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	08 95       	ret
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret

00000978 <begin>:
uint32_t readRawPressure(void);
int32_t readPressure(void);
float readAbsAltitude(void);

// Reads the constants and Returns 0 if succeeds, 1 if fails
uint8_t begin(uint8_t mode) {
     978:	cf 93       	push	r28
	oversampling = mode;
     97a:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <oversampling>
	i2cInit();
     97e:	0e 94 94 00 	call	0x128	; 0x128 <i2cInit>
	// 
	if(i2cStart(I2CADDR+I2C_WRITE)){
     982:	8e ee       	ldi	r24, 0xEE	; 238
     984:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
     988:	c8 2f       	mov	r28, r24
     98a:	88 23       	and	r24, r24
     98c:	31 f0       	breq	.+12     	; 0x99a <begin+0x22>
		serialString("\nAddress registering failed\n");
     98e:	88 e8       	ldi	r24, 0x88	; 136
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		return 1;
     996:	c1 e0       	ldi	r28, 0x01	; 1
     998:	47 c1       	rjmp	.+654    	; 0xc28 <begin+0x2b0>
	}
	i2cWrite(AC1);
     99a:	8a ea       	ldi	r24, 0xAA	; 170
     99c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     9a0:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     9a4:	8f ee       	ldi	r24, 0xEF	; 239
     9a6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac1 = i2cReadAck();
     9aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac1 <<= 8;
     9ae:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <ac1>
     9b2:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <ac1+0x1>
	ac1 |= i2cReadNack();
     9b6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     9ba:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <ac1>
     9be:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <ac1+0x1>
     9c2:	28 2b       	or	r18, r24
     9c4:	30 93 dc 02 	sts	0x02DC, r19	; 0x8002dc <ac1+0x1>
     9c8:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <ac1>
	i2cStop();
     9cc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     9d0:	8e ee       	ldi	r24, 0xEE	; 238
     9d2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC2);
     9d6:	8c ea       	ldi	r24, 0xAC	; 172
     9d8:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     9dc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     9e0:	8f ee       	ldi	r24, 0xEF	; 239
     9e2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac2 = i2cReadAck();
     9e6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac2 <<= 8;
     9ea:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <ac2>
     9ee:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ac2+0x1>
	ac2 |= i2cReadNack();
     9f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     9f6:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <ac2>
     9fa:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <ac2+0x1>
     9fe:	28 2b       	or	r18, r24
     a00:	30 93 e4 02 	sts	0x02E4, r19	; 0x8002e4 <ac2+0x1>
     a04:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <ac2>
	i2cStop();
     a08:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     a0c:	8e ee       	ldi	r24, 0xEE	; 238
     a0e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC3);
     a12:	8e ea       	ldi	r24, 0xAE	; 174
     a14:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     a18:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     a1c:	8f ee       	ldi	r24, 0xEF	; 239
     a1e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac3 = i2cReadAck();
     a22:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac3 <<= 8;
     a26:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <ac3>
     a2a:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <ac3+0x1>
	ac3 |= i2cReadNack();
     a2e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     a32:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <ac3>
     a36:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <ac3+0x1>
     a3a:	28 2b       	or	r18, r24
     a3c:	30 93 f0 04 	sts	0x04F0, r19	; 0x8004f0 <ac3+0x1>
     a40:	20 93 ef 04 	sts	0x04EF, r18	; 0x8004ef <ac3>
	i2cStop();
     a44:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     a48:	8e ee       	ldi	r24, 0xEE	; 238
     a4a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC4);
     a4e:	80 eb       	ldi	r24, 0xB0	; 176
     a50:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     a54:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     a58:	8f ee       	ldi	r24, 0xEF	; 239
     a5a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac4 = i2cReadAck();
     a5e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac4 <<= 8;
     a62:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <ac4>
     a66:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <ac4+0x1>
	ac4 |= i2cReadNack();
     a6a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     a6e:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <ac4>
     a72:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <ac4+0x1>
     a76:	28 2b       	or	r18, r24
     a78:	30 93 e8 02 	sts	0x02E8, r19	; 0x8002e8 <ac4+0x1>
     a7c:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <ac4>
	i2cStop();
     a80:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     a84:	8e ee       	ldi	r24, 0xEE	; 238
     a86:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC5);
     a8a:	82 eb       	ldi	r24, 0xB2	; 178
     a8c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     a90:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     a94:	8f ee       	ldi	r24, 0xEF	; 239
     a96:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac5 = i2cReadAck();
     a9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac5 <<= 8;
     a9e:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <ac5>
     aa2:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <ac5+0x1>
	ac5 |= i2cReadNack();
     aa6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     aaa:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <ac5>
     aae:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <ac5+0x1>
     ab2:	28 2b       	or	r18, r24
     ab4:	30 93 e2 02 	sts	0x02E2, r19	; 0x8002e2 <ac5+0x1>
     ab8:	20 93 e1 02 	sts	0x02E1, r18	; 0x8002e1 <ac5>
	i2cStop();
     abc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     ac0:	8e ee       	ldi	r24, 0xEE	; 238
     ac2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(AC6);
     ac6:	84 eb       	ldi	r24, 0xB4	; 180
     ac8:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     acc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     ad0:	8f ee       	ldi	r24, 0xEF	; 239
     ad2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	ac6 = i2cReadAck();
     ad6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	ac6 <<= 8;
     ada:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <ac6>
     ade:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <ac6+0x1>
	ac6 |= i2cReadNack();
     ae2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     ae6:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <ac6>
     aea:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <ac6+0x1>
     aee:	28 2b       	or	r18, r24
     af0:	30 93 e0 02 	sts	0x02E0, r19	; 0x8002e0 <ac6+0x1>
     af4:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <ac6>
	i2cStop();
     af8:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     afc:	8e ee       	ldi	r24, 0xEE	; 238
     afe:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(B1);
     b02:	86 eb       	ldi	r24, 0xB6	; 182
     b04:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     b08:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     b0c:	8f ee       	ldi	r24, 0xEF	; 239
     b0e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	b1 = i2cReadAck();
     b12:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	b1 <<= 8;
     b16:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <b1>
     b1a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <b1+0x1>
	b1 |= i2cReadNack();
     b1e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     b22:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <b1>
     b26:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <b1+0x1>
     b2a:	28 2b       	or	r18, r24
     b2c:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <b1+0x1>
     b30:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <b1>
	i2cStop();
     b34:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     b38:	8e ee       	ldi	r24, 0xEE	; 238
     b3a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(B2);
     b3e:	88 eb       	ldi	r24, 0xB8	; 184
     b40:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     b44:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     b48:	8f ee       	ldi	r24, 0xEF	; 239
     b4a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	b2 = i2cReadAck();
     b4e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	b2 <<= 8;
     b52:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <b2>
     b56:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <b2+0x1>
	b2 |= i2cReadNack();
     b5a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     b5e:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <b2>
     b62:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <b2+0x1>
     b66:	28 2b       	or	r18, r24
     b68:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <b2+0x1>
     b6c:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <b2>
	i2cStop();
     b70:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     b74:	8e ee       	ldi	r24, 0xEE	; 238
     b76:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(MB);
     b7a:	8a eb       	ldi	r24, 0xBA	; 186
     b7c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     b80:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     b84:	8f ee       	ldi	r24, 0xEF	; 239
     b86:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	mb = i2cReadAck();
     b8a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	mb <<= 8;
     b8e:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <mb>
     b92:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <mb+0x1>
	mb |= i2cReadNack();
     b96:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     b9a:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <mb>
     b9e:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <mb+0x1>
     ba2:	28 2b       	or	r18, r24
     ba4:	30 93 da 02 	sts	0x02DA, r19	; 0x8002da <mb+0x1>
     ba8:	20 93 d9 02 	sts	0x02D9, r18	; 0x8002d9 <mb>
	i2cStop();
     bac:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     bb0:	8e ee       	ldi	r24, 0xEE	; 238
     bb2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(MC);
     bb6:	8c eb       	ldi	r24, 0xBC	; 188
     bb8:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     bbc:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     bc0:	8f ee       	ldi	r24, 0xEF	; 239
     bc2:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	mc = i2cReadAck();
     bc6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	mc <<= 8;
     bca:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <mc>
     bce:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <mc+0x1>
	mc |= i2cReadNack();
     bd2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     bd6:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <mc>
     bda:	30 91 eb 04 	lds	r19, 0x04EB	; 0x8004eb <mc+0x1>
     bde:	28 2b       	or	r18, r24
     be0:	30 93 eb 04 	sts	0x04EB, r19	; 0x8004eb <mc+0x1>
     be4:	20 93 ea 04 	sts	0x04EA, r18	; 0x8004ea <mc>
	i2cStop();
     be8:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	
	i2cStart(I2CADDR+I2C_WRITE);
     bec:	8e ee       	ldi	r24, 0xEE	; 238
     bee:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(MD);
     bf2:	8e eb       	ldi	r24, 0xBE	; 190
     bf4:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     bf8:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     bfc:	8f ee       	ldi	r24, 0xEF	; 239
     bfe:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	md = i2cReadAck();
     c02:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
	md <<= 8;
     c06:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <md>
     c0a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <md+0x1>
	md |= i2cReadNack();
     c0e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     c12:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <md>
     c16:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <md+0x1>
     c1a:	28 2b       	or	r18, r24
     c1c:	30 93 e6 02 	sts	0x02E6, r19	; 0x8002e6 <md+0x1>
     c20:	20 93 e5 02 	sts	0x02E5, r18	; 0x8002e5 <md>
	i2cStop();
     c24:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	serialString ("\nMB = %d\n",mb);
	serialString ("\nMC = %d\n",mc);
	serialString ("\nMD = %d\n",md);*/
	
	return 0;
}
     c28:	8c 2f       	mov	r24, r28
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <readRawTemperature>:

// Reads the raw temperature value
uint16_t readRawTemperature(void) {
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
	uint16_t UT;
	i2cStart(I2CADDR+I2C_WRITE);
     c32:	8e ee       	ldi	r24, 0xEE	; 238
     c34:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(CONTROL);
     c38:	84 ef       	ldi	r24, 0xF4	; 244
     c3a:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cWrite(READTEMPCMD);
     c3e:	8e e2       	ldi	r24, 0x2E	; 46
     c40:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     c44:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c48:	8f e4       	ldi	r24, 0x4F	; 79
     c4a:	96 e4       	ldi	r25, 0x46	; 70
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <readRawTemperature+0x1e>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <readRawTemperature+0x24>
     c52:	00 00       	nop
	_delay_us(4500);
	i2cStart(I2CADDR+I2C_WRITE);
     c54:	8e ee       	ldi	r24, 0xEE	; 238
     c56:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(DATA);
     c5a:	86 ef       	ldi	r24, 0xF6	; 246
     c5c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     c60:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     c64:	8f ee       	ldi	r24, 0xEF	; 239
     c66:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	UT = i2cReadAck();
     c6a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
     c6e:	c8 2f       	mov	r28, r24
     c70:	d0 e0       	ldi	r29, 0x00	; 0
	UT <<= 8;
     c72:	dc 2f       	mov	r29, r28
     c74:	cc 27       	eor	r28, r28
	UT |= i2cReadNack();
     c76:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
	return UT;
}
     c7a:	9e 01       	movw	r18, r28
     c7c:	28 2b       	or	r18, r24
     c7e:	c9 01       	movw	r24, r18
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <readTemperature>:

// Reads the true temperature value in oC
int readTemperature(void) {
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
	uint16_t UT;
	int32_t X1,X2;
	int temp;
	UT = readRawTemperature();
     c92:	0e 94 17 06 	call	0xc2e	; 0xc2e <readRawTemperature>
	//serialString("\nUT = %u",UT);
	X1 = ((UT - (int32_t)ac6) * ((int32_t)ac5) >> 15);
     c96:	ac 01       	movw	r20, r24
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <ac6>
     ca0:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <ac6+0x1>
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	28 1b       	sub	r18, r24
     caa:	39 0b       	sbc	r19, r25
     cac:	41 09       	sbc	r20, r1
     cae:	51 09       	sbc	r21, r1
     cb0:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <ac5>
     cb4:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <ac5+0x1>
     cb8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__muluhisi3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
     cc0:	0b 2e       	mov	r0, r27
     cc2:	bf e0       	ldi	r27, 0x0F	; 15
     cc4:	f5 94       	asr	r15
     cc6:	e7 94       	ror	r14
     cc8:	d7 94       	ror	r13
     cca:	c7 94       	ror	r12
     ccc:	ba 95       	dec	r27
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <readTemperature+0x3e>
     cd0:	b0 2d       	mov	r27, r0
	X2 = (((int32_t)mc << 11) / (X1 + (int32_t)md));
	//serialString("\nx1 = %ld, x2= %ld, B5 = %ld",X1, X2,X1+X2);
	//serialString("\nRaw Temp = %ld",((X1 + X2 + 8) >> 4));
	temp = ((X1 + X2 + 8) >> 4);
	//temp /= 10.0;
	return temp;
     cd2:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <mc>
     cd6:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <mc+0x1>
     cda:	cb 01       	movw	r24, r22
     cdc:	77 0f       	add	r23, r23
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	05 2e       	mov	r0, r21
     ce8:	5b e0       	ldi	r21, 0x0B	; 11
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	5a 95       	dec	r21
     cf4:	d1 f7       	brne	.-12     	; 0xcea <readTemperature+0x64>
     cf6:	50 2d       	mov	r21, r0
     cf8:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <md>
     cfc:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <md+0x1>
     d00:	89 01       	movw	r16, r18
     d02:	33 0f       	add	r19, r19
     d04:	22 0b       	sbc	r18, r18
     d06:	33 0b       	sbc	r19, r19
     d08:	a9 01       	movw	r20, r18
     d0a:	98 01       	movw	r18, r16
     d0c:	2c 0d       	add	r18, r12
     d0e:	3d 1d       	adc	r19, r13
     d10:	4e 1d       	adc	r20, r14
     d12:	5f 1d       	adc	r21, r15
     d14:	0e 94 3b 12 	call	0x2476	; 0x2476 <__divmodsi4>
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8c 0d       	add	r24, r12
     d1e:	9d 1d       	adc	r25, r13
     d20:	ae 1d       	adc	r26, r14
     d22:	bf 1d       	adc	r27, r15
     d24:	08 96       	adiw	r24, 0x08	; 8
     d26:	a1 1d       	adc	r26, r1
     d28:	b1 1d       	adc	r27, r1
     d2a:	68 94       	set
     d2c:	13 f8       	bld	r1, 3
     d2e:	b5 95       	asr	r27
     d30:	a7 95       	ror	r26
     d32:	97 95       	ror	r25
     d34:	87 95       	ror	r24
     d36:	16 94       	lsr	r1
     d38:	d1 f7       	brne	.-12     	; 0xd2e <readTemperature+0xa8>
} 
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	08 95       	ret

00000d48 <readRawPressure>:

// Reads the raw pressure value
uint32_t readRawPressure(void) {
     d48:	cf 92       	push	r12
     d4a:	df 92       	push	r13
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	cf 93       	push	r28
	uint32_t UP;
	i2cStart(I2CADDR+I2C_WRITE);
     d52:	8e ee       	ldi	r24, 0xEE	; 238
     d54:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(CONTROL);
     d58:	84 ef       	ldi	r24, 0xF4	; 244
     d5a:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cWrite(READPRESSURECMD + (oversampling << 6));
     d5e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <oversampling>
     d62:	82 95       	swap	r24
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	80 7c       	andi	r24, 0xC0	; 192
     d6a:	8c 5c       	subi	r24, 0xCC	; 204
     d6c:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     d70:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	switch (oversampling) {
     d74:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <oversampling>
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	69 f0       	breq	.+26     	; 0xd96 <readRawPressure+0x4e>
     d7c:	28 f0       	brcs	.+10     	; 0xd88 <readRawPressure+0x40>
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	89 f0       	breq	.+34     	; 0xda4 <readRawPressure+0x5c>
     d82:	83 30       	cpi	r24, 0x03	; 3
     d84:	b1 f0       	breq	.+44     	; 0xdb2 <readRawPressure+0x6a>
     d86:	1e c0       	rjmp	.+60     	; 0xdc4 <readRawPressure+0x7c>
     d88:	8f e4       	ldi	r24, 0x4F	; 79
     d8a:	96 e4       	ldi	r25, 0x46	; 70
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <readRawPressure+0x44>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <readRawPressure+0x4a>
     d92:	00 00       	nop
     d94:	17 c0       	rjmp	.+46     	; 0xdc4 <readRawPressure+0x7c>
     d96:	8f e2       	ldi	r24, 0x2F	; 47
     d98:	95 e7       	ldi	r25, 0x75	; 117
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <readRawPressure+0x52>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <readRawPressure+0x58>
     da0:	00 00       	nop
     da2:	10 c0       	rjmp	.+32     	; 0xdc4 <readRawPressure+0x7c>
     da4:	8f ee       	ldi	r24, 0xEF	; 239
     da6:	92 ed       	ldi	r25, 0xD2	; 210
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <readRawPressure+0x60>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <readRawPressure+0x66>
     dae:	00 00       	nop
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <readRawPressure+0x7c>
     db2:	9f eb       	ldi	r25, 0xBF	; 191
     db4:	2e e3       	ldi	r18, 0x3E	; 62
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	91 50       	subi	r25, 0x01	; 1
     dba:	20 40       	sbci	r18, 0x00	; 0
     dbc:	80 40       	sbci	r24, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <readRawPressure+0x70>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <readRawPressure+0x7a>
     dc2:	00 00       	nop
			_delay_us(25500);
			break;
		default:
			break;
	}
	i2cStart(I2CADDR+I2C_WRITE);
     dc4:	8e ee       	ldi	r24, 0xEE	; 238
     dc6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	i2cWrite(DATA);
     dca:	86 ef       	ldi	r24, 0xF6	; 246
     dcc:	0e 94 ce 00 	call	0x19c	; 0x19c <i2cWrite>
	i2cStop();
     dd0:	0e 94 c5 00 	call	0x18a	; 0x18a <i2cStop>
	i2cStart(I2CADDR+I2C_READ);
     dd4:	8f ee       	ldi	r24, 0xEF	; 239
     dd6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2cStart>
	UP = i2cReadAck();
     dda:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
     dde:	c8 2e       	mov	r12, r24
     de0:	d1 2c       	mov	r13, r1
     de2:	e1 2c       	mov	r14, r1
     de4:	f1 2c       	mov	r15, r1
	UP <<= 16;
	UP |= (i2cReadAck() << 8);
     de6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2cReadAck>
     dea:	c8 2f       	mov	r28, r24
	UP |= i2cReadNack();
     dec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2cReadNack>
     df0:	76 01       	movw	r14, r12
     df2:	dd 24       	eor	r13, r13
     df4:	cc 24       	eor	r12, r12
     df6:	c8 2a       	or	r12, r24
     df8:	6c 2f       	mov	r22, r28
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	76 2f       	mov	r23, r22
     dfe:	66 27       	eor	r22, r22
     e00:	cb 01       	movw	r24, r22
     e02:	77 0f       	add	r23, r23
     e04:	aa 0b       	sbc	r26, r26
     e06:	bb 0b       	sbc	r27, r27
     e08:	8c 29       	or	r24, r12
     e0a:	9d 29       	or	r25, r13
     e0c:	ae 29       	or	r26, r14
     e0e:	bf 29       	or	r27, r15
	UP >>= (8-oversampling);
	return UP;
     e10:	40 91 e9 02 	lds	r20, 0x02E9	; 0x8002e9 <oversampling>
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	24 1b       	sub	r18, r20
     e1a:	31 09       	sbc	r19, r1
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <readRawPressure+0xe2>
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	2a 95       	dec	r18
     e2c:	d2 f7       	brpl	.-12     	; 0xe22 <readRawPressure+0xda>
}
     e2e:	cf 91       	pop	r28
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	08 95       	ret

00000e3a <readPressure>:

// Reads the true pressure value in Pa
int32_t readPressure(void) {
     e3a:	4f 92       	push	r4
     e3c:	5f 92       	push	r5
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	28 97       	sbiw	r28, 0x08	; 8
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
	int32_t UT, UP, B3, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	
	UT = readRawTemperature();
     e6a:	0e 94 17 06 	call	0xc2e	; 0xc2e <readRawTemperature>
     e6e:	5c 01       	movw	r10, r24
	UP = readRawPressure();
     e70:	0e 94 a4 06 	call	0xd48	; 0xd48 <readRawPressure>
     e74:	69 83       	std	Y+1, r22	; 0x01
     e76:	7a 83       	std	Y+2, r23	; 0x02
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	9c 83       	std	Y+4, r25	; 0x04
	X1 = ((UT - (int32_t)ac6) * ((int32_t)ac5) >> 15);
     e7c:	a5 01       	movw	r20, r10
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <ac6>
     e86:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <ac6+0x1>
     e8a:	9a 01       	movw	r18, r20
     e8c:	ab 01       	movw	r20, r22
     e8e:	28 1b       	sub	r18, r24
     e90:	39 0b       	sbc	r19, r25
     e92:	41 09       	sbc	r20, r1
     e94:	51 09       	sbc	r21, r1
     e96:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <ac5>
     e9a:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <ac5+0x1>
     e9e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__muluhisi3>
     ea2:	2b 01       	movw	r4, r22
     ea4:	3c 01       	movw	r6, r24
     ea6:	03 2e       	mov	r0, r19
     ea8:	3f e0       	ldi	r19, 0x0F	; 15
     eaa:	75 94       	asr	r7
     eac:	67 94       	ror	r6
     eae:	57 94       	ror	r5
     eb0:	47 94       	ror	r4
     eb2:	3a 95       	dec	r19
     eb4:	d1 f7       	brne	.-12     	; 0xeaa <readPressure+0x70>
     eb6:	30 2d       	mov	r19, r0
	X2 = (((int32_t)mc << 11) / (X1 + (int32_t)md));
	B6 = (X1 + X2) - 4000;
     eb8:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <mc>
     ebc:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <mc+0x1>
     ec0:	cb 01       	movw	r24, r22
     ec2:	77 0f       	add	r23, r23
     ec4:	aa 0b       	sbc	r26, r26
     ec6:	bb 0b       	sbc	r27, r27
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	05 2e       	mov	r0, r21
     ece:	5b e0       	ldi	r21, 0x0B	; 11
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	5a 95       	dec	r21
     eda:	d1 f7       	brne	.-12     	; 0xed0 <readPressure+0x96>
     edc:	50 2d       	mov	r21, r0
     ede:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <md>
     ee2:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <md+0x1>
     ee6:	89 01       	movw	r16, r18
     ee8:	33 0f       	add	r19, r19
     eea:	22 0b       	sbc	r18, r18
     eec:	33 0b       	sbc	r19, r19
     eee:	a9 01       	movw	r20, r18
     ef0:	98 01       	movw	r18, r16
     ef2:	24 0d       	add	r18, r4
     ef4:	35 1d       	adc	r19, r5
     ef6:	46 1d       	adc	r20, r6
     ef8:	57 1d       	adc	r21, r7
     efa:	0e 94 3b 12 	call	0x2476	; 0x2476 <__divmodsi4>
     efe:	42 0e       	add	r4, r18
     f00:	53 1e       	adc	r5, r19
     f02:	64 1e       	adc	r6, r20
     f04:	75 1e       	adc	r7, r21
     f06:	20 ea       	ldi	r18, 0xA0	; 160
     f08:	42 1a       	sub	r4, r18
     f0a:	2f e0       	ldi	r18, 0x0F	; 15
     f0c:	52 0a       	sbc	r5, r18
     f0e:	61 08       	sbc	r6, r1
     f10:	71 08       	sbc	r7, r1
	X1 = ((int32_t)b2 * ((B6 * B6) >> 12 )) >> 11;
     f12:	a3 01       	movw	r20, r6
     f14:	92 01       	movw	r18, r4
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__mulsi3>
     f1e:	6b 01       	movw	r12, r22
     f20:	7c 01       	movw	r14, r24
     f22:	0b 2e       	mov	r0, r27
     f24:	bc e0       	ldi	r27, 0x0C	; 12
     f26:	f5 94       	asr	r15
     f28:	e7 94       	ror	r14
     f2a:	d7 94       	ror	r13
     f2c:	c7 94       	ror	r12
     f2e:	ba 95       	dec	r27
     f30:	d1 f7       	brne	.-12     	; 0xf26 <readPressure+0xec>
     f32:	b0 2d       	mov	r27, r0
	X2 = ((int32_t)ac2 * B6) >> 11;
	X3 = X1 + X2;
	B3 = ((((int32_t)ac1 * 4 + X3) << oversampling) + 2) / 4;
     f34:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <oversampling>
	X1 = ((int32_t) ac3 * B6) >> 13;
	X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
	X3 = ((X1 + X2) + 2) >> 2;
	B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
     f38:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <ac3>
     f3c:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <ac3+0x1>
     f40:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__mulshisi3>
     f44:	4b 01       	movw	r8, r22
     f46:	5c 01       	movw	r10, r24
     f48:	07 2e       	mov	r0, r23
     f4a:	7d e0       	ldi	r23, 0x0D	; 13
     f4c:	b5 94       	asr	r11
     f4e:	a7 94       	ror	r10
     f50:	97 94       	ror	r9
     f52:	87 94       	ror	r8
     f54:	7a 95       	dec	r23
     f56:	d1 f7       	brne	.-12     	; 0xf4c <readPressure+0x112>
     f58:	70 2d       	mov	r23, r0
     f5a:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <b1>
     f5e:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <b1+0x1>
     f62:	a7 01       	movw	r20, r14
     f64:	96 01       	movw	r18, r12
     f66:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__mulshisi3>
     f6a:	bb 27       	eor	r27, r27
     f6c:	97 fd       	sbrc	r25, 7
     f6e:	b0 95       	com	r27
     f70:	ab 2f       	mov	r26, r27
     f72:	88 0d       	add	r24, r8
     f74:	99 1d       	adc	r25, r9
     f76:	aa 1d       	adc	r26, r10
     f78:	bb 1d       	adc	r27, r11
     f7a:	02 96       	adiw	r24, 0x02	; 2
     f7c:	a1 1d       	adc	r26, r1
     f7e:	b1 1d       	adc	r27, r1
     f80:	b5 95       	asr	r27
     f82:	a7 95       	ror	r26
     f84:	97 95       	ror	r25
     f86:	87 95       	ror	r24
     f88:	b5 95       	asr	r27
     f8a:	a7 95       	ror	r26
     f8c:	97 95       	ror	r25
     f8e:	87 95       	ror	r24
     f90:	9c 01       	movw	r18, r24
     f92:	ad 01       	movw	r20, r26
     f94:	30 58       	subi	r19, 0x80	; 128
     f96:	4f 4f       	sbci	r20, 0xFF	; 255
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <ac4>
     f9e:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <ac4+0x1>
     fa2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__muluhisi3>
     fa6:	9b 01       	movw	r18, r22
     fa8:	ac 01       	movw	r20, r24
     faa:	01 2e       	mov	r0, r17
     fac:	1f e0       	ldi	r17, 0x0F	; 15
     fae:	56 95       	lsr	r21
     fb0:	47 95       	ror	r20
     fb2:	37 95       	ror	r19
     fb4:	27 95       	ror	r18
     fb6:	1a 95       	dec	r17
     fb8:	d1 f7       	brne	.-12     	; 0xfae <readPressure+0x174>
     fba:	10 2d       	mov	r17, r0
     fbc:	2d 83       	std	Y+5, r18	; 0x05
     fbe:	3e 83       	std	Y+6, r19	; 0x06
     fc0:	4f 83       	std	Y+7, r20	; 0x07
     fc2:	58 87       	std	Y+8, r21	; 0x08
	B7 = ((uint32_t)UP - B3) * (uint32_t)(50000UL >> oversampling);
     fc4:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <b2>
     fc8:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <b2+0x1>
     fcc:	a7 01       	movw	r20, r14
     fce:	96 01       	movw	r18, r12
     fd0:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__mulshisi3>
     fd4:	4b 01       	movw	r8, r22
     fd6:	5c 01       	movw	r10, r24
     fd8:	07 2e       	mov	r0, r23
     fda:	7b e0       	ldi	r23, 0x0B	; 11
     fdc:	b5 94       	asr	r11
     fde:	a7 94       	ror	r10
     fe0:	97 94       	ror	r9
     fe2:	87 94       	ror	r8
     fe4:	7a 95       	dec	r23
     fe6:	d1 f7       	brne	.-12     	; 0xfdc <readPressure+0x1a2>
     fe8:	70 2d       	mov	r23, r0
     fea:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <ac2>
     fee:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <ac2+0x1>
     ff2:	a3 01       	movw	r20, r6
     ff4:	92 01       	movw	r18, r4
     ff6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__mulshisi3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	07 2e       	mov	r0, r23
    1000:	7b e0       	ldi	r23, 0x0B	; 11
    1002:	b5 95       	asr	r27
    1004:	a7 95       	ror	r26
    1006:	97 95       	ror	r25
    1008:	87 95       	ror	r24
    100a:	7a 95       	dec	r23
    100c:	d1 f7       	brne	.-12     	; 0x1002 <readPressure+0x1c8>
    100e:	70 2d       	mov	r23, r0
    1010:	88 0d       	add	r24, r8
    1012:	99 1d       	adc	r25, r9
    1014:	aa 1d       	adc	r26, r10
    1016:	bb 1d       	adc	r27, r11
    1018:	40 91 db 02 	lds	r20, 0x02DB	; 0x8002db <ac1>
    101c:	50 91 dc 02 	lds	r21, 0x02DC	; 0x8002dc <ac1+0x1>
    1020:	05 2e       	mov	r0, r21
    1022:	00 0c       	add	r0, r0
    1024:	66 0b       	sbc	r22, r22
    1026:	77 0b       	sbc	r23, r23
    1028:	44 0f       	add	r20, r20
    102a:	55 1f       	adc	r21, r21
    102c:	66 1f       	adc	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	44 0f       	add	r20, r20
    1032:	55 1f       	adc	r21, r21
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	84 0f       	add	r24, r20
    103a:	95 1f       	adc	r25, r21
    103c:	a6 1f       	adc	r26, r22
    103e:	b7 1f       	adc	r27, r23
    1040:	0e 2e       	mov	r0, r30
    1042:	04 c0       	rjmp	.+8      	; 0x104c <readPressure+0x212>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	aa 1f       	adc	r26, r26
    104a:	bb 1f       	adc	r27, r27
    104c:	0a 94       	dec	r0
    104e:	d2 f7       	brpl	.-12     	; 0x1044 <readPressure+0x20a>
    1050:	02 96       	adiw	r24, 0x02	; 2
    1052:	a1 1d       	adc	r26, r1
    1054:	b1 1d       	adc	r27, r1
    1056:	ac 01       	movw	r20, r24
    1058:	bd 01       	movw	r22, r26
    105a:	bb 23       	and	r27, r27
    105c:	24 f4       	brge	.+8      	; 0x1066 <readPressure+0x22c>
    105e:	4d 5f       	subi	r20, 0xFD	; 253
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	6f 4f       	sbci	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	75 95       	asr	r23
    1068:	67 95       	ror	r22
    106a:	57 95       	ror	r21
    106c:	47 95       	ror	r20
    106e:	75 95       	asr	r23
    1070:	67 95       	ror	r22
    1072:	57 95       	ror	r21
    1074:	47 95       	ror	r20
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	ab 81       	ldd	r26, Y+3	; 0x03
    107c:	bc 81       	ldd	r27, Y+4	; 0x04
    107e:	84 1b       	sub	r24, r20
    1080:	95 0b       	sbc	r25, r21
    1082:	a6 0b       	sbc	r26, r22
    1084:	b7 0b       	sbc	r27, r23
    1086:	9c 01       	movw	r18, r24
    1088:	ad 01       	movw	r20, r26
    108a:	80 e5       	ldi	r24, 0x50	; 80
    108c:	93 ec       	ldi	r25, 0xC3	; 195
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <readPressure+0x266>
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	ea 95       	dec	r30
    10a2:	d2 f7       	brpl	.-12     	; 0x1098 <readPressure+0x25e>
    10a4:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__mulsi3>
	if (B7 < 0x80000000) {
    10a8:	99 23       	and	r25, r25
    10aa:	6c f0       	brlt	.+26     	; 0x10c6 <readPressure+0x28c>
		p = (B7 * 2)/B4;
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	2d 81       	ldd	r18, Y+5	; 0x05
    10b6:	3e 81       	ldd	r19, Y+6	; 0x06
    10b8:	4f 81       	ldd	r20, Y+7	; 0x07
    10ba:	58 85       	ldd	r21, Y+8	; 0x08
    10bc:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodsi4>
    10c0:	49 01       	movw	r8, r18
    10c2:	5a 01       	movw	r10, r20
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <readPressure+0x2a4>
	} else {
		p = (B7/B4) * 2;
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	4f 81       	ldd	r20, Y+7	; 0x07
    10cc:	58 85       	ldd	r21, Y+8	; 0x08
    10ce:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodsi4>
    10d2:	49 01       	movw	r8, r18
    10d4:	5a 01       	movw	r10, r20
    10d6:	88 0c       	add	r8, r8
    10d8:	99 1c       	adc	r9, r9
    10da:	aa 1c       	adc	r10, r10
    10dc:	bb 1c       	adc	r11, r11
	}
	X1 = (p >> 8) * (p >> 8);
    10de:	99 27       	eor	r25, r25
    10e0:	b7 fc       	sbrc	r11, 7
    10e2:	9a 95       	dec	r25
    10e4:	8b 2d       	mov	r24, r11
    10e6:	7a 2d       	mov	r23, r10
    10e8:	69 2d       	mov	r22, r9
	X1 = (X1 * 3038) >> 16;
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__mulsi3>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	ae ed       	ldi	r26, 0xDE	; 222
    10f8:	bb e0       	ldi	r27, 0x0B	; 11
    10fa:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__muluhisi3>
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
	X2 = (-7357 * p) >> 16;
	p = p + ((X1 + X2 + (int32_t)3791) >> 4);
    1102:	a3 e4       	ldi	r26, 0x43	; 67
    1104:	b3 ee       	ldi	r27, 0xE3	; 227
    1106:	a5 01       	movw	r20, r10
    1108:	94 01       	movw	r18, r8
    110a:	0e 94 77 12 	call	0x24ee	; 0x24ee <__mulohisi3>
    110e:	bb 27       	eor	r27, r27
    1110:	97 fd       	sbrc	r25, 7
    1112:	b0 95       	com	r27
    1114:	ab 2f       	mov	r26, r27
    1116:	67 01       	movw	r12, r14
    1118:	ff 24       	eor	r15, r15
    111a:	d7 fc       	sbrc	r13, 7
    111c:	f0 94       	com	r15
    111e:	ef 2c       	mov	r14, r15
    1120:	8c 0d       	add	r24, r12
    1122:	9d 1d       	adc	r25, r13
    1124:	ae 1d       	adc	r26, r14
    1126:	bf 1d       	adc	r27, r15
    1128:	81 53       	subi	r24, 0x31	; 49
    112a:	91 4f       	sbci	r25, 0xF1	; 241
    112c:	af 4f       	sbci	r26, 0xFF	; 255
    112e:	bf 4f       	sbci	r27, 0xFF	; 255
    1130:	68 94       	set
    1132:	13 f8       	bld	r1, 3
    1134:	b5 95       	asr	r27
    1136:	a7 95       	ror	r26
    1138:	97 95       	ror	r25
    113a:	87 95       	ror	r24
    113c:	16 94       	lsr	r1
    113e:	d1 f7       	brne	.-12     	; 0x1134 <readPressure+0x2fa>
	return p;
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	68 0d       	add	r22, r8
    1146:	79 1d       	adc	r23, r9
    1148:	8a 1d       	adc	r24, r10
    114a:	9b 1d       	adc	r25, r11
}
    114c:	28 96       	adiw	r28, 0x08	; 8
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	08 95       	ret

0000117a <readAbsAltitude>:

// Estimates the Absolute Altitude in meters, based on the pressure value
float readAbsAltitude(void) {
	float p = readPressure();
    117a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <readPressure>
	return (44330 * (1.0 - pow((p/101325), 0.1903)));
    117e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatsisf>
    1182:	20 e8       	ldi	r18, 0x80	; 128
    1184:	36 ee       	ldi	r19, 0xE6	; 230
    1186:	45 ec       	ldi	r20, 0xC5	; 197
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__divsf3>
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	3e ed       	ldi	r19, 0xDE	; 222
    1192:	42 e4       	ldi	r20, 0x42	; 66
    1194:	5e e3       	ldi	r21, 0x3E	; 62
    1196:	0e 94 70 10 	call	0x20e0	; 0x20e0 <pow>
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	80 e8       	ldi	r24, 0x80	; 128
    11a4:	9f e3       	ldi	r25, 0x3F	; 63
    11a6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3a e2       	ldi	r19, 0x2A	; 42
    11ae:	4d e2       	ldi	r20, 0x2D	; 45
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3>
}
    11b6:	08 95       	ret

000011b8 <main>:
					  "5a66049763a3911",	// Temperatura BMP085
					  "5a66055576b2612"		// Altitude BMP085
					};
uint16_t size;

int main(void){
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	28 97       	sbiw	r28, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    serialStart();
    11cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <serialStart>
    serialString("Serial Iniciada @ ");
    11d0:	85 ea       	ldi	r24, 0xA5	; 165
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
    serialSendInt(BAUD,DEC,1);
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	4a e0       	ldi	r20, 0x0A	; 10
    11dc:	60 e8       	ldi	r22, 0x80	; 128
    11de:	75 e2       	ldi	r23, 0x25	; 37
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
	dhtStart();
    11e8:	0e 94 19 04 	call	0x832	; 0x832 <dhtStart>
    if(dhtRead()){
    11ec:	0e 94 1c 04 	call	0x838	; 0x838 <dhtRead>
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <main+0x3e>
    11f4:	95 c0       	rjmp	.+298    	; 0x1320 <main+0x168>
        serialStringLN("DHT22 iniciado");
    11f6:	88 eb       	ldi	r24, 0xB8	; 184
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
        serialString("Temperatura: ");
    11fe:	87 ec       	ldi	r24, 0xC7	; 199
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
uint16_t humidity(){
	return HM;
}

uint16_t temperature(){
	return TP;
    1206:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <TP>
    120a:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <TP+0x1>
        serialSendInt(temperature()/10,DEC,0);
    120e:	ad ec       	ldi	r26, 0xCD	; 205
    1210:	bc ec       	ldi	r27, 0xCC	; 204
    1212:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    1216:	96 95       	lsr	r25
    1218:	87 95       	ror	r24
    121a:	96 95       	lsr	r25
    121c:	87 95       	ror	r24
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	bc 01       	movw	r22, r24
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	4a e0       	ldi	r20, 0x0A	; 10
    122c:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialString(".");
    1230:	85 ed       	ldi	r24, 0xD5	; 213
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
    1238:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <TP>
    123c:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <TP+0x1>
        serialSendInt(temperature()%10,DEC,0);
    1240:	9a 01       	movw	r18, r20
    1242:	ad ec       	ldi	r26, 0xCD	; 205
    1244:	bc ec       	ldi	r27, 0xCC	; 204
    1246:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    124a:	96 95       	lsr	r25
    124c:	87 95       	ror	r24
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	9c 01       	movw	r18, r24
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	ba 01       	movw	r22, r20
    126e:	68 1b       	sub	r22, r24
    1270:	79 0b       	sbc	r23, r25
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	4a e0       	ldi	r20, 0x0A	; 10
    127a:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialStringLN("C");
    127e:	87 ed       	ldi	r24, 0xD7	; 215
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
        serialString("Umidade: ");
    1286:	89 ed       	ldi	r24, 0xD9	; 217
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
   return 1;
}


uint16_t humidity(){
	return HM;
    128e:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <HM>
    1292:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <HM+0x1>
        serialSendInt(humidity()/10,DEC,0);
    1296:	ad ec       	ldi	r26, 0xCD	; 205
    1298:	bc ec       	ldi	r27, 0xCC	; 204
    129a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	96 95       	lsr	r25
    12a4:	87 95       	ror	r24
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	bc 01       	movw	r22, r24
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	4a e0       	ldi	r20, 0x0A	; 10
    12b4:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialSend('.');
    12b8:	8e e2       	ldi	r24, 0x2E	; 46
    12ba:	0e 94 09 01 	call	0x212	; 0x212 <serialSend>
    12be:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <HM>
    12c2:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <HM+0x1>
        serialSendInt(humidity()%10,DEC,0);
    12c6:	9a 01       	movw	r18, r20
    12c8:	ad ec       	ldi	r26, 0xCD	; 205
    12ca:	bc ec       	ldi	r27, 0xCC	; 204
    12cc:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	9c 01       	movw	r18, r24
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	ba 01       	movw	r22, r20
    12f4:	68 1b       	sub	r22, r24
    12f6:	79 0b       	sbc	r23, r25
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	4a e0       	ldi	r20, 0x0A	; 10
    1300:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
        serialStringLN("%");
    1304:	83 ee       	ldi	r24, 0xE3	; 227
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	83 ec       	ldi	r24, 0xC3	; 195
    1310:	99 e0       	ldi	r25, 0x09	; 9
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	80 40       	sbci	r24, 0x00	; 0
    1316:	90 40       	sbci	r25, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <main+0x15a>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <main+0x164>
    131c:	00 00       	nop
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <main+0x170>
        _delay_ms(200);
    }else{
        serialStringLN("ERRO NO DHT22");
    1320:	85 ee       	ldi	r24, 0xE5	; 229
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
    }
	
	if(!begin(ULTRAHIGHRES)) {
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	0e 94 bc 04 	call	0x978	; 0x978 <begin>
    132e:	81 11       	cpse	r24, r1
    1330:	53 c0       	rjmp	.+166    	; 0x13d8 <main+0x220>
    1332:	ef ef       	ldi	r30, 0xFF	; 255
    1334:	f3 ec       	ldi	r31, 0xC3	; 195
    1336:	29 e0       	ldi	r18, 0x09	; 9
    1338:	e1 50       	subi	r30, 0x01	; 1
    133a:	f0 40       	sbci	r31, 0x00	; 0
    133c:	20 40       	sbci	r18, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <main+0x180>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <main+0x18a>
    1342:	00 00       	nop
		_delay_ms(200);
		serialStringLN("BMP085 Iniciado");
    1344:	83 ef       	ldi	r24, 0xF3	; 243
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
		serialString("Pressão: ");
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readPressure(),DEC,0);
    1354:	0e 94 1d 07 	call	0xe3a	; 0xe3a <readPressure>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	4a e0       	ldi	r20, 0x0A	; 10
    135c:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialStringLN("Pa");
    1360:	8e e0       	ldi	r24, 0x0E	; 14
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
		serialString("Temperatura: ");
    1368:	87 ec       	ldi	r24, 0xC7	; 199
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readTemperature()/10,DEC,0);
    1370:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    1374:	6a e0       	ldi	r22, 0x0A	; 10
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 05 12 	call	0x240a	; 0x240a <__divmodhi4>
    137c:	07 2e       	mov	r0, r23
    137e:	00 0c       	add	r0, r0
    1380:	88 0b       	sbc	r24, r24
    1382:	99 0b       	sbc	r25, r25
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	4a e0       	ldi	r20, 0x0A	; 10
    1388:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialString(".");
    138c:	85 ed       	ldi	r24, 0xD5	; 213
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readTemperature()%10,DEC,0);
    1394:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	0e 94 05 12 	call	0x240a	; 0x240a <__divmodhi4>
    13a0:	bc 01       	movw	r22, r24
    13a2:	99 0f       	add	r25, r25
    13a4:	88 0b       	sbc	r24, r24
    13a6:	99 0b       	sbc	r25, r25
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	4a e0       	ldi	r20, 0x0A	; 10
    13ac:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialStringLN("C");
    13b0:	87 ed       	ldi	r24, 0xD7	; 215
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
		serialString("Altitude: ");
    13b8:	81 e1       	ldi	r24, 0x11	; 17
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 11 01 	call	0x222	; 0x222 <serialString>
		serialSendInt(readAbsAltitude(),DEC,0);
    13c0:	0e 94 bd 08 	call	0x117a	; 0x117a <readAbsAltitude>
    13c4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fixsfsi>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	4a e0       	ldi	r20, 0x0A	; 10
    13cc:	0e 94 30 01 	call	0x260	; 0x260 <serialSendInt>
		serialStringLN("m");
    13d0:	8c e1       	ldi	r24, 0x1C	; 28
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>

uint8_t static inline spiSend(uint8_t data); //Envia um byte de dado e retorna um byte seguindo o funcionamento do SPI


void static inline spiStart(uint8_t SPICLOCKPRESCALER){
    outputPin(DDR_SPI,SS);    //USAMOS O SS SEMPRE PARA EVITAR PROBLEMAS DE INCOMPATIBILIDADE
    13d8:	22 9a       	sbi	0x04, 2	; 4
    setPin(PORTB,SS);         //ATENÇÃO SE USAR SPI JAMAIS DEIXAR DE USAR O PINO SS PRINCIPALMENTE SE FOR USADO COMO ENTRADA
    13da:	2a 9a       	sbi	0x05, 2	; 5
    outputPin(DDR_SPI,MOSI);  //MOSI SAIDA
    13dc:	23 9a       	sbi	0x04, 3	; 4
    outputPin(DDR_SPI,SCK);   //SCK SAIDA
    13de:	25 9a       	sbi	0x04, 5	; 4
    setPin(SPCR,MSTR);        //MODO MASTER
    13e0:	8c b5       	in	r24, 0x2c	; 44
    13e2:	80 61       	ori	r24, 0x10	; 16
    13e4:	8c bd       	out	0x2c, r24	; 44
    SPCR|=SPICLOCKPRESCALER;  //SETA PRESCALER
    13e6:	8c b5       	in	r24, 0x2c	; 44
    13e8:	8c bd       	out	0x2c, r24	; 44
    setPin(SPCR,SPE);         //ATIVA SPI
    13ea:	8c b5       	in	r24, 0x2c	; 44
    13ec:	80 64       	ori	r24, 0x40	; 64
    13ee:	8c bd       	out	0x2c, r24	; 44
	}

    spiStart(SPICLOCKPRESCALER4);
    serialStringLN("SPI iniciado");
    13f0:	8e e1       	ldi	r24, 0x1E	; 30
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>

    if(wiz5200Init(ip,mac,gtw,submask)){
    13f8:	22 e5       	ldi	r18, 0x52	; 82
    13fa:	31 e0       	ldi	r19, 0x01	; 1
    13fc:	4a e5       	ldi	r20, 0x5A	; 90
    13fe:	51 e0       	ldi	r21, 0x01	; 1
    1400:	62 e6       	ldi	r22, 0x62	; 98
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	8e e5       	ldi	r24, 0x5E	; 94
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 cf 01 	call	0x39e	; 0x39e <wiz5200Init>
    140c:	88 23       	and	r24, r24
    140e:	21 f0       	breq	.+8      	; 0x1418 <main+0x260>
        serialStringLN("WIZ5200 iniciado");
    1410:	8b e2       	ldi	r24, 0x2B	; 43
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
    }
	sprintf(ipString, "%d.%d.%d.%d",ip[0],ip[1],ip[2],ip[3]);
    1418:	ee e5       	ldi	r30, 0x5E	; 94
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	83 81       	ldd	r24, Z+3	; 0x03
    141e:	1f 92       	push	r1
    1420:	8f 93       	push	r24
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	1f 92       	push	r1
    1426:	8f 93       	push	r24
    1428:	81 81       	ldd	r24, Z+1	; 0x01
    142a:	1f 92       	push	r1
    142c:	8f 93       	push	r24
    142e:	80 81       	ld	r24, Z
    1430:	1f 92       	push	r1
    1432:	8f 93       	push	r24
    1434:	8c e3       	ldi	r24, 0x3C	; 60
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	8c eb       	ldi	r24, 0xBC	; 188
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	9f 93       	push	r25
    1442:	8f 93       	push	r24
    1444:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
			// Temperatura DHT22
			
            strcat(buffer,"POST /API/dados/real/");
			strcat(buffer, token[0]);
			strcat(buffer, "?valor=");
            sprintf(bufferTemp,"%d.%d",temperature()/10,temperature()%10);
    1452:	0f 2e       	mov	r0, r31
    1454:	f2 e4       	ldi	r31, 0x42	; 66
    1456:	4f 2e       	mov	r4, r31
    1458:	f2 e0       	ldi	r31, 0x02	; 2
    145a:	5f 2e       	mov	r5, r31
    145c:	f0 2d       	mov	r31, r0
    145e:	09 ec       	ldi	r16, 0xC9	; 201
    1460:	12 e0       	ldi	r17, 0x02	; 2
            strcat(buffer,bufferTemp);
            strcat(buffer," HTTP/1.1\r\n");
            strcat(buffer,"Host: ");
			strcat(buffer, ipString);
			strcat(buffer, "\r\n");
    1462:	0f 2e       	mov	r0, r31
    1464:	fd e0       	ldi	r31, 0x0D	; 13
    1466:	6f 2e       	mov	r6, r31
    1468:	fa e0       	ldi	r31, 0x0A	; 10
    146a:	7f 2e       	mov	r7, r31
    146c:	f0 2d       	mov	r31, r0
		if(connect(server,SERVER_PORT,port)) {
			// Pressão BMP085
			strcat(buffer,"POST /API/dados/real/");
			strcat(buffer, token[2]);
			strcat(buffer, "?valor=");
			sprintf(bufferTemp,"%ld",readPressure());
    146e:	0f 2e       	mov	r0, r31
    1470:	fa e7       	ldi	r31, 0x7A	; 122
    1472:	af 2e       	mov	r10, r31
    1474:	f1 e0       	ldi	r31, 0x01	; 1
    1476:	bf 2e       	mov	r11, r31
    1478:	f0 2d       	mov	r31, r0
		if(connect(server,SERVER_PORT,port)) {
			// Temperatura BMP85
			strcat(buffer,"POST /API/dados/real/");
			strcat(buffer, token[3]);
			strcat(buffer, "?valor=");
			sprintf(bufferTemp,"%d.%d",readTemperature()/10,readTemperature()%10);
    147a:	0f 2e       	mov	r0, r31
    147c:	fa e0       	ldi	r31, 0x0A	; 10
    147e:	ef 2e       	mov	r14, r31
    1480:	f1 2c       	mov	r15, r1
    1482:	f0 2d       	mov	r31, r0
        //port++;
		dhtRead();
        if(connect(server,SERVER_PORT,port)){
			// Temperatura DHT22
			
            strcat(buffer,"POST /API/dados/real/");
    1484:	ea ee       	ldi	r30, 0xEA	; 234
    1486:	f2 e0       	ldi	r31, 0x02	; 2
    1488:	2e 2e       	mov	r2, r30
    148a:	3f 2e       	mov	r3, r31
			strcat(buffer, token[0]);
			strcat(buffer, "?valor=");
            sprintf(bufferTemp,"%d.%d",temperature()/10,temperature()%10);
    148c:	c0 2e       	mov	r12, r16
    148e:	d1 2e       	mov	r13, r17
    }
	sprintf(ipString, "%d.%d.%d.%d",ip[0],ip[1],ip[2],ip[3]);

    for(;;){
        //port++;
		dhtRead();
    1490:	0e 94 1c 04 	call	0x838	; 0x838 <dhtRead>
        if(connect(server,SERVER_PORT,port)){
    1494:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <port>
    1498:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <port+0x1>
    149c:	60 e4       	ldi	r22, 0x40	; 64
    149e:	7f e1       	ldi	r23, 0x1F	; 31
    14a0:	86 e5       	ldi	r24, 0x56	; 86
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	0e 94 89 03 	call	0x712	; 0x712 <connect>
    14a8:	88 23       	and	r24, r24
    14aa:	09 f4       	brne	.+2      	; 0x14ae <main+0x2f6>
    14ac:	c2 c0       	rjmp	.+388    	; 0x1632 <main+0x47a>
			// Temperatura DHT22
			
            strcat(buffer,"POST /API/dados/real/");
    14ae:	aa ee       	ldi	r26, 0xEA	; 234
    14b0:	b2 e0       	ldi	r27, 0x02	; 2
    14b2:	0d 90       	ld	r0, X+
    14b4:	00 20       	and	r0, r0
    14b6:	e9 f7       	brne	.-6      	; 0x14b2 <main+0x2fa>
    14b8:	11 97       	sbiw	r26, 0x01	; 1
    14ba:	86 e1       	ldi	r24, 0x16	; 22
    14bc:	e8 e4       	ldi	r30, 0x48	; 72
    14be:	f2 e0       	ldi	r31, 0x02	; 2
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	8a 95       	dec	r24
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <main+0x308>
			strcat(buffer, token[0]);
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	71 e0       	ldi	r23, 0x01	; 1
    14cc:	82 2d       	mov	r24, r2
    14ce:	93 2d       	mov	r25, r3
    14d0:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "?valor=");
    14d4:	aa ee       	ldi	r26, 0xEA	; 234
    14d6:	b2 e0       	ldi	r27, 0x02	; 2
    14d8:	0d 90       	ld	r0, X+
    14da:	00 20       	and	r0, r0
    14dc:	e9 f7       	brne	.-6      	; 0x14d8 <main+0x320>
    14de:	11 97       	sbiw	r26, 0x01	; 1
    14e0:	88 e0       	ldi	r24, 0x08	; 8
    14e2:	ee e5       	ldi	r30, 0x5E	; 94
    14e4:	f2 e0       	ldi	r31, 0x02	; 2
    14e6:	01 90       	ld	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	8a 95       	dec	r24
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <main+0x32e>
}

uint16_t temperature(){
	return TP;
    14ee:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <TP>
    14f2:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <TP+0x1>
    14f6:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <TP>
    14fa:	f0 91 d4 02 	lds	r31, 0x02D4	; 0x8002d4 <TP+0x1>
            sprintf(bufferTemp,"%d.%d",temperature()/10,temperature()%10);
    14fe:	9a 01       	movw	r18, r20
    1500:	ad ec       	ldi	r26, 0xCD	; 205
    1502:	bc ec       	ldi	r27, 0xCC	; 204
    1504:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    1508:	96 95       	lsr	r25
    150a:	87 95       	ror	r24
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	96 95       	lsr	r25
    1512:	87 95       	ror	r24
    1514:	9c 01       	movw	r18, r24
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	48 1b       	sub	r20, r24
    152c:	59 0b       	sbc	r21, r25
    152e:	5f 93       	push	r21
    1530:	4f 93       	push	r20
    1532:	9f 01       	movw	r18, r30
    1534:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	9f 93       	push	r25
    1546:	8f 93       	push	r24
    1548:	5f 92       	push	r5
    154a:	4f 92       	push	r4
    154c:	1f 93       	push	r17
    154e:	0f 93       	push	r16
    1550:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
            strcat(buffer,bufferTemp);
    1554:	6c 2d       	mov	r22, r12
    1556:	7d 2d       	mov	r23, r13
    1558:	82 2d       	mov	r24, r2
    155a:	93 2d       	mov	r25, r3
    155c:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
            strcat(buffer," HTTP/1.1\r\n");
    1560:	aa ee       	ldi	r26, 0xEA	; 234
    1562:	b2 e0       	ldi	r27, 0x02	; 2
    1564:	0d 90       	ld	r0, X+
    1566:	00 20       	and	r0, r0
    1568:	e9 f7       	brne	.-6      	; 0x1564 <main+0x3ac>
    156a:	11 97       	sbiw	r26, 0x01	; 1
    156c:	8c e0       	ldi	r24, 0x0C	; 12
    156e:	e6 e6       	ldi	r30, 0x66	; 102
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	01 90       	ld	r0, Z+
    1574:	0d 92       	st	X+, r0
    1576:	8a 95       	dec	r24
    1578:	e1 f7       	brne	.-8      	; 0x1572 <main+0x3ba>
            strcat(buffer,"Host: ");
    157a:	aa ee       	ldi	r26, 0xEA	; 234
    157c:	b2 e0       	ldi	r27, 0x02	; 2
    157e:	0d 90       	ld	r0, X+
    1580:	00 20       	and	r0, r0
    1582:	e9 f7       	brne	.-6      	; 0x157e <main+0x3c6>
    1584:	11 97       	sbiw	r26, 0x01	; 1
    1586:	87 e0       	ldi	r24, 0x07	; 7
    1588:	e2 e7       	ldi	r30, 0x72	; 114
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	01 90       	ld	r0, Z+
    158e:	0d 92       	st	X+, r0
    1590:	8a 95       	dec	r24
    1592:	e1 f7       	brne	.-8      	; 0x158c <main+0x3d4>
			strcat(buffer, ipString);
    1594:	6c eb       	ldi	r22, 0xBC	; 188
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	82 2d       	mov	r24, r2
    159a:	93 2d       	mov	r25, r3
    159c:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "\r\n");
    15a0:	ea ee       	ldi	r30, 0xEA	; 234
    15a2:	f2 e0       	ldi	r31, 0x02	; 2
    15a4:	01 90       	ld	r0, Z+
    15a6:	00 20       	and	r0, r0
    15a8:	e9 f7       	brne	.-6      	; 0x15a4 <main+0x3ec>
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	71 82       	std	Z+1, r7	; 0x01
    15ae:	60 82       	st	Z, r6
    15b0:	12 82       	std	Z+2, r1	; 0x02
            strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    15b2:	aa ee       	ldi	r26, 0xEA	; 234
    15b4:	b2 e0       	ldi	r27, 0x02	; 2
    15b6:	0d 90       	ld	r0, X+
    15b8:	00 20       	and	r0, r0
    15ba:	e9 f7       	brne	.-6      	; 0x15b6 <main+0x3fe>
    15bc:	11 97       	sbiw	r26, 0x01	; 1
    15be:	80 e2       	ldi	r24, 0x20	; 32
    15c0:	e9 e7       	ldi	r30, 0x79	; 121
    15c2:	f2 e0       	ldi	r31, 0x02	; 2
    15c4:	01 90       	ld	r0, Z+
    15c6:	0d 92       	st	X+, r0
    15c8:	8a 95       	dec	r24
    15ca:	e1 f7       	brne	.-8      	; 0x15c4 <main+0x40c>
            serialStringLN(buffer);
    15cc:	82 2d       	mov	r24, r2
    15ce:	93 2d       	mov	r25, r3
    15d0:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
            send(buffer,strlen(buffer));
    15d4:	ea ee       	ldi	r30, 0xEA	; 234
    15d6:	f2 e0       	ldi	r31, 0x02	; 2
    15d8:	01 90       	ld	r0, Z+
    15da:	00 20       	and	r0, r0
    15dc:	e9 f7       	brne	.-6      	; 0x15d8 <main+0x420>
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	bf 01       	movw	r22, r30
    15e2:	6a 5e       	subi	r22, 0xEA	; 234
    15e4:	72 40       	sbci	r23, 0x02	; 2
    15e6:	82 2d       	mov	r24, r2
    15e8:	93 2d       	mov	r25, r3
    15ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
            listen();
    15ee:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
            while(receiveSize()<=0);
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1600:	89 2b       	or	r24, r25
    1602:	e1 f3       	breq	.-8      	; 0x15fc <main+0x444>
            size=receiveSize();
    1604:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1608:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <size+0x1>
    160c:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <size>
            receive(buffer,size);
    1610:	bc 01       	movw	r22, r24
    1612:	82 2d       	mov	r24, r2
    1614:	93 2d       	mov	r25, r3
    1616:	0e 94 10 03 	call	0x620	; 0x620 <receive>
            //serialStringLN(buffer);
            serialStringLN("ok");
    161a:	89 e9       	ldi	r24, 0x99	; 153
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
            strcpy(buffer,"");
    1622:	ea ee       	ldi	r30, 0xEA	; 234
    1624:	f2 e0       	ldi	r31, 0x02	; 2
    1626:	10 82       	st	Z, r1
            strcpy(bufferTemp,"");
    1628:	f8 01       	movw	r30, r16
    162a:	10 82       	st	Z, r1
            disconnect();
    162c:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1630:	06 c0       	rjmp	.+12     	; 0x163e <main+0x486>
        } else{
            serialStringLN("Erro de conexão em execução");
    1632:	8c e9       	ldi	r24, 0x9C	; 156
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
            disconnect();
    163a:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    163e:	ff ef       	ldi	r31, 0xFF	; 255
    1640:	27 ea       	ldi	r18, 0xA7	; 167
    1642:	81 e6       	ldi	r24, 0x61	; 97
    1644:	f1 50       	subi	r31, 0x01	; 1
    1646:	20 40       	sbci	r18, 0x00	; 0
    1648:	80 40       	sbci	r24, 0x00	; 0
    164a:	e1 f7       	brne	.-8      	; 0x1644 <main+0x48c>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <main+0x496>
    164e:	00 00       	nop
        }
		_delay_ms(2000);
		//dhtRead();
		if (connect(server,SERVER_PORT,port)) {
    1650:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <port>
    1654:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <port+0x1>
    1658:	60 e4       	ldi	r22, 0x40	; 64
    165a:	7f e1       	ldi	r23, 0x1F	; 31
    165c:	86 e5       	ldi	r24, 0x56	; 86
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	0e 94 89 03 	call	0x712	; 0x712 <connect>
    1664:	88 23       	and	r24, r24
    1666:	09 f4       	brne	.+2      	; 0x166a <main+0x4b2>
    1668:	c2 c0       	rjmp	.+388    	; 0x17ee <main+0x636>
			// Umidade DHT22
			
			strcat(buffer,"POST /API/dados/real/");
    166a:	aa ee       	ldi	r26, 0xEA	; 234
    166c:	b2 e0       	ldi	r27, 0x02	; 2
    166e:	0d 90       	ld	r0, X+
    1670:	00 20       	and	r0, r0
    1672:	e9 f7       	brne	.-6      	; 0x166e <main+0x4b6>
    1674:	11 97       	sbiw	r26, 0x01	; 1
    1676:	86 e1       	ldi	r24, 0x16	; 22
    1678:	e8 e4       	ldi	r30, 0x48	; 72
    167a:	f2 e0       	ldi	r31, 0x02	; 2
    167c:	01 90       	ld	r0, Z+
    167e:	0d 92       	st	X+, r0
    1680:	8a 95       	dec	r24
    1682:	e1 f7       	brne	.-8      	; 0x167c <main+0x4c4>
			strcat(buffer, token[1]);
    1684:	60 e1       	ldi	r22, 0x10	; 16
    1686:	71 e0       	ldi	r23, 0x01	; 1
    1688:	82 2d       	mov	r24, r2
    168a:	93 2d       	mov	r25, r3
    168c:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "?valor=");
    1690:	aa ee       	ldi	r26, 0xEA	; 234
    1692:	b2 e0       	ldi	r27, 0x02	; 2
    1694:	0d 90       	ld	r0, X+
    1696:	00 20       	and	r0, r0
    1698:	e9 f7       	brne	.-6      	; 0x1694 <main+0x4dc>
    169a:	11 97       	sbiw	r26, 0x01	; 1
    169c:	88 e0       	ldi	r24, 0x08	; 8
    169e:	ee e5       	ldi	r30, 0x5E	; 94
    16a0:	f2 e0       	ldi	r31, 0x02	; 2
    16a2:	01 90       	ld	r0, Z+
    16a4:	0d 92       	st	X+, r0
    16a6:	8a 95       	dec	r24
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <main+0x4ea>
   return 1;
}


uint16_t humidity(){
	return HM;
    16aa:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <HM>
    16ae:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <HM+0x1>
    16b2:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <HM>
    16b6:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <HM+0x1>
			sprintf(bufferTemp,"%d.%d",humidity()/10, humidity()%10);
    16ba:	9a 01       	movw	r18, r20
    16bc:	ad ec       	ldi	r26, 0xCD	; 205
    16be:	bc ec       	ldi	r27, 0xCC	; 204
    16c0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    16c4:	96 95       	lsr	r25
    16c6:	87 95       	ror	r24
    16c8:	96 95       	lsr	r25
    16ca:	87 95       	ror	r24
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	9c 01       	movw	r18, r24
    16d2:	22 0f       	add	r18, r18
    16d4:	33 1f       	adc	r19, r19
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	82 0f       	add	r24, r18
    16e4:	93 1f       	adc	r25, r19
    16e6:	48 1b       	sub	r20, r24
    16e8:	59 0b       	sbc	r21, r25
    16ea:	5f 93       	push	r21
    16ec:	4f 93       	push	r20
    16ee:	9f 01       	movw	r18, r30
    16f0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    16f4:	96 95       	lsr	r25
    16f6:	87 95       	ror	r24
    16f8:	96 95       	lsr	r25
    16fa:	87 95       	ror	r24
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	5f 92       	push	r5
    1706:	4f 92       	push	r4
    1708:	1f 93       	push	r17
    170a:	0f 93       	push	r16
    170c:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
			strcat(buffer,bufferTemp);
    1710:	6c 2d       	mov	r22, r12
    1712:	7d 2d       	mov	r23, r13
    1714:	82 2d       	mov	r24, r2
    1716:	93 2d       	mov	r25, r3
    1718:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    171c:	aa ee       	ldi	r26, 0xEA	; 234
    171e:	b2 e0       	ldi	r27, 0x02	; 2
    1720:	0d 90       	ld	r0, X+
    1722:	00 20       	and	r0, r0
    1724:	e9 f7       	brne	.-6      	; 0x1720 <main+0x568>
    1726:	11 97       	sbiw	r26, 0x01	; 1
    1728:	8c e0       	ldi	r24, 0x0C	; 12
    172a:	e6 e6       	ldi	r30, 0x66	; 102
    172c:	f2 e0       	ldi	r31, 0x02	; 2
    172e:	01 90       	ld	r0, Z+
    1730:	0d 92       	st	X+, r0
    1732:	8a 95       	dec	r24
    1734:	e1 f7       	brne	.-8      	; 0x172e <main+0x576>
			strcat(buffer,"Host: ");
    1736:	aa ee       	ldi	r26, 0xEA	; 234
    1738:	b2 e0       	ldi	r27, 0x02	; 2
    173a:	0d 90       	ld	r0, X+
    173c:	00 20       	and	r0, r0
    173e:	e9 f7       	brne	.-6      	; 0x173a <main+0x582>
    1740:	11 97       	sbiw	r26, 0x01	; 1
    1742:	87 e0       	ldi	r24, 0x07	; 7
    1744:	e2 e7       	ldi	r30, 0x72	; 114
    1746:	f2 e0       	ldi	r31, 0x02	; 2
    1748:	01 90       	ld	r0, Z+
    174a:	0d 92       	st	X+, r0
    174c:	8a 95       	dec	r24
    174e:	e1 f7       	brne	.-8      	; 0x1748 <main+0x590>
			strcat(buffer, ipString);
    1750:	6c eb       	ldi	r22, 0xBC	; 188
    1752:	72 e0       	ldi	r23, 0x02	; 2
    1754:	82 2d       	mov	r24, r2
    1756:	93 2d       	mov	r25, r3
    1758:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "\r\n");
    175c:	ea ee       	ldi	r30, 0xEA	; 234
    175e:	f2 e0       	ldi	r31, 0x02	; 2
    1760:	01 90       	ld	r0, Z+
    1762:	00 20       	and	r0, r0
    1764:	e9 f7       	brne	.-6      	; 0x1760 <main+0x5a8>
    1766:	31 97       	sbiw	r30, 0x01	; 1
    1768:	71 82       	std	Z+1, r7	; 0x01
    176a:	60 82       	st	Z, r6
    176c:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    176e:	aa ee       	ldi	r26, 0xEA	; 234
    1770:	b2 e0       	ldi	r27, 0x02	; 2
    1772:	0d 90       	ld	r0, X+
    1774:	00 20       	and	r0, r0
    1776:	e9 f7       	brne	.-6      	; 0x1772 <main+0x5ba>
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	e9 e7       	ldi	r30, 0x79	; 121
    177e:	f2 e0       	ldi	r31, 0x02	; 2
    1780:	01 90       	ld	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	8a 95       	dec	r24
    1786:	e1 f7       	brne	.-8      	; 0x1780 <main+0x5c8>
			serialStringLN(buffer);
    1788:	82 2d       	mov	r24, r2
    178a:	93 2d       	mov	r25, r3
    178c:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    1790:	ea ee       	ldi	r30, 0xEA	; 234
    1792:	f2 e0       	ldi	r31, 0x02	; 2
    1794:	01 90       	ld	r0, Z+
    1796:	00 20       	and	r0, r0
    1798:	e9 f7       	brne	.-6      	; 0x1794 <main+0x5dc>
    179a:	31 97       	sbiw	r30, 0x01	; 1
    179c:	bf 01       	movw	r22, r30
    179e:	6a 5e       	subi	r22, 0xEA	; 234
    17a0:	72 40       	sbci	r23, 0x02	; 2
    17a2:	82 2d       	mov	r24, r2
    17a4:	93 2d       	mov	r25, r3
    17a6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    17aa:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    17bc:	89 2b       	or	r24, r25
    17be:	e1 f3       	breq	.-8      	; 0x17b8 <main+0x600>
			size=receiveSize();
    17c0:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    17c4:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <size+0x1>
    17c8:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <size>
			receive(buffer,size);
    17cc:	bc 01       	movw	r22, r24
    17ce:	82 2d       	mov	r24, r2
    17d0:	93 2d       	mov	r25, r3
    17d2:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    17d6:	89 e9       	ldi	r24, 0x99	; 153
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    17de:	ea ee       	ldi	r30, 0xEA	; 234
    17e0:	f2 e0       	ldi	r31, 0x02	; 2
    17e2:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    17e4:	f8 01       	movw	r30, r16
    17e6:	10 82       	st	Z, r1
			disconnect();
    17e8:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <main+0x642>
		} else {
			serialStringLN("Erro de conexão em execução");
    17ee:	8c e9       	ldi	r24, 0x9C	; 156
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			disconnect();
    17f6:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    17fa:	ff ef       	ldi	r31, 0xFF	; 255
    17fc:	27 ea       	ldi	r18, 0xA7	; 167
    17fe:	81 e6       	ldi	r24, 0x61	; 97
    1800:	f1 50       	subi	r31, 0x01	; 1
    1802:	20 40       	sbci	r18, 0x00	; 0
    1804:	80 40       	sbci	r24, 0x00	; 0
    1806:	e1 f7       	brne	.-8      	; 0x1800 <main+0x648>
    1808:	00 c0       	rjmp	.+0      	; 0x180a <main+0x652>
    180a:	00 00       	nop
		}
		_delay_ms(2000);
		
		if(connect(server,SERVER_PORT,port)) {
    180c:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <port>
    1810:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <port+0x1>
    1814:	60 e4       	ldi	r22, 0x40	; 64
    1816:	7f e1       	ldi	r23, 0x1F	; 31
    1818:	86 e5       	ldi	r24, 0x56	; 86
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 89 03 	call	0x712	; 0x712 <connect>
    1820:	88 23       	and	r24, r24
    1822:	09 f4       	brne	.+2      	; 0x1826 <main+0x66e>
    1824:	9b c0       	rjmp	.+310    	; 0x195c <main+0x7a4>
			// Pressão BMP085
			strcat(buffer,"POST /API/dados/real/");
    1826:	aa ee       	ldi	r26, 0xEA	; 234
    1828:	b2 e0       	ldi	r27, 0x02	; 2
    182a:	0d 90       	ld	r0, X+
    182c:	00 20       	and	r0, r0
    182e:	e9 f7       	brne	.-6      	; 0x182a <main+0x672>
    1830:	11 97       	sbiw	r26, 0x01	; 1
    1832:	86 e1       	ldi	r24, 0x16	; 22
    1834:	e8 e4       	ldi	r30, 0x48	; 72
    1836:	f2 e0       	ldi	r31, 0x02	; 2
    1838:	01 90       	ld	r0, Z+
    183a:	0d 92       	st	X+, r0
    183c:	8a 95       	dec	r24
    183e:	e1 f7       	brne	.-8      	; 0x1838 <main+0x680>
			strcat(buffer, token[2]);
    1840:	60 e2       	ldi	r22, 0x20	; 32
    1842:	71 e0       	ldi	r23, 0x01	; 1
    1844:	82 2d       	mov	r24, r2
    1846:	93 2d       	mov	r25, r3
    1848:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "?valor=");
    184c:	aa ee       	ldi	r26, 0xEA	; 234
    184e:	b2 e0       	ldi	r27, 0x02	; 2
    1850:	0d 90       	ld	r0, X+
    1852:	00 20       	and	r0, r0
    1854:	e9 f7       	brne	.-6      	; 0x1850 <main+0x698>
    1856:	11 97       	sbiw	r26, 0x01	; 1
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	ee e5       	ldi	r30, 0x5E	; 94
    185c:	f2 e0       	ldi	r31, 0x02	; 2
    185e:	01 90       	ld	r0, Z+
    1860:	0d 92       	st	X+, r0
    1862:	8a 95       	dec	r24
    1864:	e1 f7       	brne	.-8      	; 0x185e <main+0x6a6>
			sprintf(bufferTemp,"%ld",readPressure());
    1866:	0e 94 1d 07 	call	0xe3a	; 0xe3a <readPressure>
    186a:	9f 93       	push	r25
    186c:	8f 93       	push	r24
    186e:	7f 93       	push	r23
    1870:	6f 93       	push	r22
    1872:	bf 92       	push	r11
    1874:	af 92       	push	r10
    1876:	1f 93       	push	r17
    1878:	0f 93       	push	r16
    187a:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
			strcat(buffer,bufferTemp);
    187e:	6c 2d       	mov	r22, r12
    1880:	7d 2d       	mov	r23, r13
    1882:	82 2d       	mov	r24, r2
    1884:	93 2d       	mov	r25, r3
    1886:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    188a:	aa ee       	ldi	r26, 0xEA	; 234
    188c:	b2 e0       	ldi	r27, 0x02	; 2
    188e:	0d 90       	ld	r0, X+
    1890:	00 20       	and	r0, r0
    1892:	e9 f7       	brne	.-6      	; 0x188e <main+0x6d6>
    1894:	11 97       	sbiw	r26, 0x01	; 1
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	e6 e6       	ldi	r30, 0x66	; 102
    189a:	f2 e0       	ldi	r31, 0x02	; 2
    189c:	01 90       	ld	r0, Z+
    189e:	0d 92       	st	X+, r0
    18a0:	8a 95       	dec	r24
    18a2:	e1 f7       	brne	.-8      	; 0x189c <main+0x6e4>
			strcat(buffer,"Host: ");
    18a4:	aa ee       	ldi	r26, 0xEA	; 234
    18a6:	b2 e0       	ldi	r27, 0x02	; 2
    18a8:	0d 90       	ld	r0, X+
    18aa:	00 20       	and	r0, r0
    18ac:	e9 f7       	brne	.-6      	; 0x18a8 <main+0x6f0>
    18ae:	11 97       	sbiw	r26, 0x01	; 1
    18b0:	87 e0       	ldi	r24, 0x07	; 7
    18b2:	e2 e7       	ldi	r30, 0x72	; 114
    18b4:	f2 e0       	ldi	r31, 0x02	; 2
    18b6:	01 90       	ld	r0, Z+
    18b8:	0d 92       	st	X+, r0
    18ba:	8a 95       	dec	r24
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <main+0x6fe>
			strcat(buffer, ipString);
    18be:	6c eb       	ldi	r22, 0xBC	; 188
    18c0:	72 e0       	ldi	r23, 0x02	; 2
    18c2:	82 2d       	mov	r24, r2
    18c4:	93 2d       	mov	r25, r3
    18c6:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "\r\n");
    18ca:	ea ee       	ldi	r30, 0xEA	; 234
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	01 90       	ld	r0, Z+
    18d0:	00 20       	and	r0, r0
    18d2:	e9 f7       	brne	.-6      	; 0x18ce <main+0x716>
    18d4:	31 97       	sbiw	r30, 0x01	; 1
    18d6:	71 82       	std	Z+1, r7	; 0x01
    18d8:	60 82       	st	Z, r6
    18da:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    18dc:	aa ee       	ldi	r26, 0xEA	; 234
    18de:	b2 e0       	ldi	r27, 0x02	; 2
    18e0:	0d 90       	ld	r0, X+
    18e2:	00 20       	and	r0, r0
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <main+0x728>
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	e9 e7       	ldi	r30, 0x79	; 121
    18ec:	f2 e0       	ldi	r31, 0x02	; 2
    18ee:	01 90       	ld	r0, Z+
    18f0:	0d 92       	st	X+, r0
    18f2:	8a 95       	dec	r24
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <main+0x736>
			serialStringLN(buffer);
    18f6:	82 2d       	mov	r24, r2
    18f8:	93 2d       	mov	r25, r3
    18fa:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    18fe:	ea ee       	ldi	r30, 0xEA	; 234
    1900:	f2 e0       	ldi	r31, 0x02	; 2
    1902:	01 90       	ld	r0, Z+
    1904:	00 20       	and	r0, r0
    1906:	e9 f7       	brne	.-6      	; 0x1902 <main+0x74a>
    1908:	31 97       	sbiw	r30, 0x01	; 1
    190a:	bf 01       	movw	r22, r30
    190c:	6a 5e       	subi	r22, 0xEA	; 234
    190e:	72 40       	sbci	r23, 0x02	; 2
    1910:	82 2d       	mov	r24, r2
    1912:	93 2d       	mov	r25, r3
    1914:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    1918:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    192a:	89 2b       	or	r24, r25
    192c:	e1 f3       	breq	.-8      	; 0x1926 <main+0x76e>
			size=receiveSize();
    192e:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1932:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <size+0x1>
    1936:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <size>
			receive(buffer,size);
    193a:	bc 01       	movw	r22, r24
    193c:	82 2d       	mov	r24, r2
    193e:	93 2d       	mov	r25, r3
    1940:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    1944:	89 e9       	ldi	r24, 0x99	; 153
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    194c:	ea ee       	ldi	r30, 0xEA	; 234
    194e:	f2 e0       	ldi	r31, 0x02	; 2
    1950:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    1952:	f8 01       	movw	r30, r16
    1954:	10 82       	st	Z, r1
			disconnect();
    1956:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <main+0x7b0>
		} else {
			serialStringLN("Erro de conexão em execução");
    195c:	8c e9       	ldi	r24, 0x9C	; 156
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			disconnect();
    1964:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1968:	ff ef       	ldi	r31, 0xFF	; 255
    196a:	27 ea       	ldi	r18, 0xA7	; 167
    196c:	81 e6       	ldi	r24, 0x61	; 97
    196e:	f1 50       	subi	r31, 0x01	; 1
    1970:	20 40       	sbci	r18, 0x00	; 0
    1972:	80 40       	sbci	r24, 0x00	; 0
    1974:	e1 f7       	brne	.-8      	; 0x196e <main+0x7b6>
    1976:	00 c0       	rjmp	.+0      	; 0x1978 <main+0x7c0>
    1978:	00 00       	nop
		}
		_delay_ms(2000);
		
		if(connect(server,SERVER_PORT,port)) {
    197a:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <port>
    197e:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <port+0x1>
    1982:	60 e4       	ldi	r22, 0x40	; 64
    1984:	7f e1       	ldi	r23, 0x1F	; 31
    1986:	86 e5       	ldi	r24, 0x56	; 86
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	0e 94 89 03 	call	0x712	; 0x712 <connect>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <main+0x7dc>
    1992:	a7 c0       	rjmp	.+334    	; 0x1ae2 <main+0x92a>
			// Temperatura BMP85
			strcat(buffer,"POST /API/dados/real/");
    1994:	aa ee       	ldi	r26, 0xEA	; 234
    1996:	b2 e0       	ldi	r27, 0x02	; 2
    1998:	0d 90       	ld	r0, X+
    199a:	00 20       	and	r0, r0
    199c:	e9 f7       	brne	.-6      	; 0x1998 <main+0x7e0>
    199e:	11 97       	sbiw	r26, 0x01	; 1
    19a0:	86 e1       	ldi	r24, 0x16	; 22
    19a2:	e8 e4       	ldi	r30, 0x48	; 72
    19a4:	f2 e0       	ldi	r31, 0x02	; 2
    19a6:	01 90       	ld	r0, Z+
    19a8:	0d 92       	st	X+, r0
    19aa:	8a 95       	dec	r24
    19ac:	e1 f7       	brne	.-8      	; 0x19a6 <main+0x7ee>
			strcat(buffer, token[3]);
    19ae:	60 e3       	ldi	r22, 0x30	; 48
    19b0:	71 e0       	ldi	r23, 0x01	; 1
    19b2:	82 2d       	mov	r24, r2
    19b4:	93 2d       	mov	r25, r3
    19b6:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "?valor=");
    19ba:	aa ee       	ldi	r26, 0xEA	; 234
    19bc:	b2 e0       	ldi	r27, 0x02	; 2
    19be:	0d 90       	ld	r0, X+
    19c0:	00 20       	and	r0, r0
    19c2:	e9 f7       	brne	.-6      	; 0x19be <main+0x806>
    19c4:	11 97       	sbiw	r26, 0x01	; 1
    19c6:	88 e0       	ldi	r24, 0x08	; 8
    19c8:	ee e5       	ldi	r30, 0x5E	; 94
    19ca:	f2 e0       	ldi	r31, 0x02	; 2
    19cc:	01 90       	ld	r0, Z+
    19ce:	0d 92       	st	X+, r0
    19d0:	8a 95       	dec	r24
    19d2:	e1 f7       	brne	.-8      	; 0x19cc <main+0x814>
			sprintf(bufferTemp,"%d.%d",readTemperature()/10,readTemperature()%10);
    19d4:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    19d8:	4c 01       	movw	r8, r24
    19da:	0e 94 43 06 	call	0xc86	; 0xc86 <readTemperature>
    19de:	9c 01       	movw	r18, r24
    19e0:	c4 01       	movw	r24, r8
    19e2:	b7 01       	movw	r22, r14
    19e4:	0e 94 05 12 	call	0x240a	; 0x240a <__divmodhi4>
    19e8:	9f 93       	push	r25
    19ea:	8f 93       	push	r24
    19ec:	c9 01       	movw	r24, r18
    19ee:	b7 01       	movw	r22, r14
    19f0:	0e 94 05 12 	call	0x240a	; 0x240a <__divmodhi4>
    19f4:	7f 93       	push	r23
    19f6:	6f 93       	push	r22
    19f8:	5f 92       	push	r5
    19fa:	4f 92       	push	r4
    19fc:	1f 93       	push	r17
    19fe:	0f 93       	push	r16
    1a00:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
			strcat(buffer,bufferTemp);
    1a04:	6c 2d       	mov	r22, r12
    1a06:	7d 2d       	mov	r23, r13
    1a08:	82 2d       	mov	r24, r2
    1a0a:	93 2d       	mov	r25, r3
    1a0c:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    1a10:	aa ee       	ldi	r26, 0xEA	; 234
    1a12:	b2 e0       	ldi	r27, 0x02	; 2
    1a14:	0d 90       	ld	r0, X+
    1a16:	00 20       	and	r0, r0
    1a18:	e9 f7       	brne	.-6      	; 0x1a14 <main+0x85c>
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
    1a1c:	8c e0       	ldi	r24, 0x0C	; 12
    1a1e:	e6 e6       	ldi	r30, 0x66	; 102
    1a20:	f2 e0       	ldi	r31, 0x02	; 2
    1a22:	01 90       	ld	r0, Z+
    1a24:	0d 92       	st	X+, r0
    1a26:	8a 95       	dec	r24
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <main+0x86a>
			strcat(buffer,"Host: ");
    1a2a:	aa ee       	ldi	r26, 0xEA	; 234
    1a2c:	b2 e0       	ldi	r27, 0x02	; 2
    1a2e:	0d 90       	ld	r0, X+
    1a30:	00 20       	and	r0, r0
    1a32:	e9 f7       	brne	.-6      	; 0x1a2e <main+0x876>
    1a34:	11 97       	sbiw	r26, 0x01	; 1
    1a36:	87 e0       	ldi	r24, 0x07	; 7
    1a38:	e2 e7       	ldi	r30, 0x72	; 114
    1a3a:	f2 e0       	ldi	r31, 0x02	; 2
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	0d 92       	st	X+, r0
    1a40:	8a 95       	dec	r24
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <main+0x884>
			strcat(buffer, ipString);
    1a44:	6c eb       	ldi	r22, 0xBC	; 188
    1a46:	72 e0       	ldi	r23, 0x02	; 2
    1a48:	82 2d       	mov	r24, r2
    1a4a:	93 2d       	mov	r25, r3
    1a4c:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "\r\n");
    1a50:	ea ee       	ldi	r30, 0xEA	; 234
    1a52:	f2 e0       	ldi	r31, 0x02	; 2
    1a54:	01 90       	ld	r0, Z+
    1a56:	00 20       	and	r0, r0
    1a58:	e9 f7       	brne	.-6      	; 0x1a54 <main+0x89c>
    1a5a:	31 97       	sbiw	r30, 0x01	; 1
    1a5c:	71 82       	std	Z+1, r7	; 0x01
    1a5e:	60 82       	st	Z, r6
    1a60:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    1a62:	aa ee       	ldi	r26, 0xEA	; 234
    1a64:	b2 e0       	ldi	r27, 0x02	; 2
    1a66:	0d 90       	ld	r0, X+
    1a68:	00 20       	and	r0, r0
    1a6a:	e9 f7       	brne	.-6      	; 0x1a66 <main+0x8ae>
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	e9 e7       	ldi	r30, 0x79	; 121
    1a72:	f2 e0       	ldi	r31, 0x02	; 2
    1a74:	01 90       	ld	r0, Z+
    1a76:	0d 92       	st	X+, r0
    1a78:	8a 95       	dec	r24
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <main+0x8bc>
			serialStringLN(buffer);
    1a7c:	82 2d       	mov	r24, r2
    1a7e:	93 2d       	mov	r25, r3
    1a80:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    1a84:	ea ee       	ldi	r30, 0xEA	; 234
    1a86:	f2 e0       	ldi	r31, 0x02	; 2
    1a88:	01 90       	ld	r0, Z+
    1a8a:	00 20       	and	r0, r0
    1a8c:	e9 f7       	brne	.-6      	; 0x1a88 <main+0x8d0>
    1a8e:	31 97       	sbiw	r30, 0x01	; 1
    1a90:	bf 01       	movw	r22, r30
    1a92:	6a 5e       	subi	r22, 0xEA	; 234
    1a94:	72 40       	sbci	r23, 0x02	; 2
    1a96:	82 2d       	mov	r24, r2
    1a98:	93 2d       	mov	r25, r3
    1a9a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    1a9e:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1ab0:	89 2b       	or	r24, r25
    1ab2:	e1 f3       	breq	.-8      	; 0x1aac <main+0x8f4>
			size=receiveSize();
    1ab4:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1ab8:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <size+0x1>
    1abc:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <size>
			receive(buffer,size);
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	82 2d       	mov	r24, r2
    1ac4:	93 2d       	mov	r25, r3
    1ac6:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    1aca:	89 e9       	ldi	r24, 0x99	; 153
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    1ad2:	ea ee       	ldi	r30, 0xEA	; 234
    1ad4:	f2 e0       	ldi	r31, 0x02	; 2
    1ad6:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    1ad8:	f8 01       	movw	r30, r16
    1ada:	10 82       	st	Z, r1
			disconnect();
    1adc:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <main+0x936>
		} else {
			serialStringLN("Erro de conexão em execução");
    1ae2:	8c e9       	ldi	r24, 0x9C	; 156
    1ae4:	92 e0       	ldi	r25, 0x02	; 2
    1ae6:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			disconnect();
    1aea:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1aee:	ff ef       	ldi	r31, 0xFF	; 255
    1af0:	27 ea       	ldi	r18, 0xA7	; 167
    1af2:	81 e6       	ldi	r24, 0x61	; 97
    1af4:	f1 50       	subi	r31, 0x01	; 1
    1af6:	20 40       	sbci	r18, 0x00	; 0
    1af8:	80 40       	sbci	r24, 0x00	; 0
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <main+0x93c>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <main+0x946>
    1afe:	00 00       	nop
		}
		_delay_ms(2000);
		
		if (connect(server,SERVER_PORT,port)) {
    1b00:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <port>
    1b04:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <port+0x1>
    1b08:	60 e4       	ldi	r22, 0x40	; 64
    1b0a:	7f e1       	ldi	r23, 0x1F	; 31
    1b0c:	86 e5       	ldi	r24, 0x56	; 86
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	0e 94 89 03 	call	0x712	; 0x712 <connect>
    1b14:	88 23       	and	r24, r24
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <main+0x962>
    1b18:	b5 c0       	rjmp	.+362    	; 0x1c84 <main+0xacc>
			// Altitude BMP85
			strcat(buffer,"POST /API/dados/real/");
    1b1a:	aa ee       	ldi	r26, 0xEA	; 234
    1b1c:	b2 e0       	ldi	r27, 0x02	; 2
    1b1e:	0d 90       	ld	r0, X+
    1b20:	00 20       	and	r0, r0
    1b22:	e9 f7       	brne	.-6      	; 0x1b1e <main+0x966>
    1b24:	11 97       	sbiw	r26, 0x01	; 1
    1b26:	86 e1       	ldi	r24, 0x16	; 22
    1b28:	e8 e4       	ldi	r30, 0x48	; 72
    1b2a:	f2 e0       	ldi	r31, 0x02	; 2
    1b2c:	01 90       	ld	r0, Z+
    1b2e:	0d 92       	st	X+, r0
    1b30:	8a 95       	dec	r24
    1b32:	e1 f7       	brne	.-8      	; 0x1b2c <main+0x974>
			strcat(buffer, token[4]);
    1b34:	60 e4       	ldi	r22, 0x40	; 64
    1b36:	71 e0       	ldi	r23, 0x01	; 1
    1b38:	82 2d       	mov	r24, r2
    1b3a:	93 2d       	mov	r25, r3
    1b3c:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "?valor=");
    1b40:	aa ee       	ldi	r26, 0xEA	; 234
    1b42:	b2 e0       	ldi	r27, 0x02	; 2
    1b44:	0d 90       	ld	r0, X+
    1b46:	00 20       	and	r0, r0
    1b48:	e9 f7       	brne	.-6      	; 0x1b44 <main+0x98c>
    1b4a:	11 97       	sbiw	r26, 0x01	; 1
    1b4c:	88 e0       	ldi	r24, 0x08	; 8
    1b4e:	ee e5       	ldi	r30, 0x5E	; 94
    1b50:	f2 e0       	ldi	r31, 0x02	; 2
    1b52:	01 90       	ld	r0, Z+
    1b54:	0d 92       	st	X+, r0
    1b56:	8a 95       	dec	r24
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <main+0x99a>
			sprintf(bufferTemp,"%d.%d",((int) readAbsAltitude()), ((int) readAbsAltitude())%10);
    1b5a:	0e 94 bd 08 	call	0x117a	; 0x117a <readAbsAltitude>
    1b5e:	69 83       	std	Y+1, r22	; 0x01
    1b60:	7a 83       	std	Y+2, r23	; 0x02
    1b62:	8b 83       	std	Y+3, r24	; 0x03
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	0e 94 bd 08 	call	0x117a	; 0x117a <readAbsAltitude>
    1b6a:	6d 83       	std	Y+5, r22	; 0x05
    1b6c:	7e 83       	std	Y+6, r23	; 0x06
    1b6e:	8f 83       	std	Y+7, r24	; 0x07
    1b70:	98 87       	std	Y+8, r25	; 0x08
    1b72:	69 81       	ldd	r22, Y+1	; 0x01
    1b74:	7a 81       	ldd	r23, Y+2	; 0x02
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fixsfsi>
    1b7e:	cb 01       	movw	r24, r22
    1b80:	b7 01       	movw	r22, r14
    1b82:	0e 94 05 12 	call	0x240a	; 0x240a <__divmodhi4>
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b8c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fixsfsi>
    1b96:	7f 93       	push	r23
    1b98:	6f 93       	push	r22
    1b9a:	5f 92       	push	r5
    1b9c:	4f 92       	push	r4
    1b9e:	1f 93       	push	r17
    1ba0:	0f 93       	push	r16
    1ba2:	0e 94 9b 12 	call	0x2536	; 0x2536 <sprintf>
			strcat(buffer,bufferTemp);
    1ba6:	6c 2d       	mov	r22, r12
    1ba8:	7d 2d       	mov	r23, r13
    1baa:	82 2d       	mov	r24, r2
    1bac:	93 2d       	mov	r25, r3
    1bae:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer," HTTP/1.1\r\n");
    1bb2:	aa ee       	ldi	r26, 0xEA	; 234
    1bb4:	b2 e0       	ldi	r27, 0x02	; 2
    1bb6:	0d 90       	ld	r0, X+
    1bb8:	00 20       	and	r0, r0
    1bba:	e9 f7       	brne	.-6      	; 0x1bb6 <main+0x9fe>
    1bbc:	11 97       	sbiw	r26, 0x01	; 1
    1bbe:	8c e0       	ldi	r24, 0x0C	; 12
    1bc0:	e6 e6       	ldi	r30, 0x66	; 102
    1bc2:	f2 e0       	ldi	r31, 0x02	; 2
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	0d 92       	st	X+, r0
    1bc8:	8a 95       	dec	r24
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <main+0xa0c>
			strcat(buffer,"Host: ");
    1bcc:	aa ee       	ldi	r26, 0xEA	; 234
    1bce:	b2 e0       	ldi	r27, 0x02	; 2
    1bd0:	0d 90       	ld	r0, X+
    1bd2:	00 20       	and	r0, r0
    1bd4:	e9 f7       	brne	.-6      	; 0x1bd0 <main+0xa18>
    1bd6:	11 97       	sbiw	r26, 0x01	; 1
    1bd8:	87 e0       	ldi	r24, 0x07	; 7
    1bda:	e2 e7       	ldi	r30, 0x72	; 114
    1bdc:	f2 e0       	ldi	r31, 0x02	; 2
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	8a 95       	dec	r24
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <main+0xa26>
			strcat(buffer, ipString);
    1be6:	6c eb       	ldi	r22, 0xBC	; 188
    1be8:	72 e0       	ldi	r23, 0x02	; 2
    1bea:	82 2d       	mov	r24, r2
    1bec:	93 2d       	mov	r25, r3
    1bee:	0e 94 90 12 	call	0x2520	; 0x2520 <strcat>
			strcat(buffer, "\r\n");
    1bf2:	ea ee       	ldi	r30, 0xEA	; 234
    1bf4:	f2 e0       	ldi	r31, 0x02	; 2
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	00 20       	and	r0, r0
    1bfa:	e9 f7       	brne	.-6      	; 0x1bf6 <main+0xa3e>
    1bfc:	31 97       	sbiw	r30, 0x01	; 1
    1bfe:	71 82       	std	Z+1, r7	; 0x01
    1c00:	60 82       	st	Z, r6
    1c02:	12 82       	std	Z+2, r1	; 0x02
			strcat(buffer,"User-Agent: CentralSensores\r\n\r\n");
    1c04:	aa ee       	ldi	r26, 0xEA	; 234
    1c06:	b2 e0       	ldi	r27, 0x02	; 2
    1c08:	0d 90       	ld	r0, X+
    1c0a:	00 20       	and	r0, r0
    1c0c:	e9 f7       	brne	.-6      	; 0x1c08 <main+0xa50>
    1c0e:	11 97       	sbiw	r26, 0x01	; 1
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	e9 e7       	ldi	r30, 0x79	; 121
    1c14:	f2 e0       	ldi	r31, 0x02	; 2
    1c16:	01 90       	ld	r0, Z+
    1c18:	0d 92       	st	X+, r0
    1c1a:	8a 95       	dec	r24
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <main+0xa5e>
			serialStringLN(buffer);
    1c1e:	82 2d       	mov	r24, r2
    1c20:	93 2d       	mov	r25, r3
    1c22:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			send(buffer,strlen(buffer));
    1c26:	ea ee       	ldi	r30, 0xEA	; 234
    1c28:	f2 e0       	ldi	r31, 0x02	; 2
    1c2a:	01 90       	ld	r0, Z+
    1c2c:	00 20       	and	r0, r0
    1c2e:	e9 f7       	brne	.-6      	; 0x1c2a <main+0xa72>
    1c30:	31 97       	sbiw	r30, 0x01	; 1
    1c32:	bf 01       	movw	r22, r30
    1c34:	6a 5e       	subi	r22, 0xEA	; 234
    1c36:	72 40       	sbci	r23, 0x02	; 2
    1c38:	82 2d       	mov	r24, r2
    1c3a:	93 2d       	mov	r25, r3
    1c3c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <send>
			listen();
    1c40:	0e 94 4a 02 	call	0x494	; 0x494 <listen>
			while(receiveSize()<=0);
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1c52:	89 2b       	or	r24, r25
    1c54:	e1 f3       	breq	.-8      	; 0x1c4e <main+0xa96>
			size=receiveSize();
    1c56:	0e 94 75 03 	call	0x6ea	; 0x6ea <receiveSize>
    1c5a:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <size+0x1>
    1c5e:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <size>
			receive(buffer,size);
    1c62:	bc 01       	movw	r22, r24
    1c64:	82 2d       	mov	r24, r2
    1c66:	93 2d       	mov	r25, r3
    1c68:	0e 94 10 03 	call	0x620	; 0x620 <receive>
			//serialStringLN(buffer);
			serialStringLN("ok");
    1c6c:	89 e9       	ldi	r24, 0x99	; 153
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			strcpy(buffer,"");
    1c74:	ea ee       	ldi	r30, 0xEA	; 234
    1c76:	f2 e0       	ldi	r31, 0x02	; 2
    1c78:	10 82       	st	Z, r1
			strcpy(bufferTemp,"");
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	10 82       	st	Z, r1
			disconnect();
    1c7e:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <main+0xad8>
		} else {
			serialStringLN("Erro de conexão em execução");
    1c84:	8c e9       	ldi	r24, 0x9C	; 156
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	0e 94 27 01 	call	0x24e	; 0x24e <serialStringLN>
			disconnect();
    1c8c:	0e 94 3e 02 	call	0x47c	; 0x47c <disconnect>
    1c90:	ff ef       	ldi	r31, 0xFF	; 255
    1c92:	27 ea       	ldi	r18, 0xA7	; 167
    1c94:	81 e6       	ldi	r24, 0x61	; 97
    1c96:	f1 50       	subi	r31, 0x01	; 1
    1c98:	20 40       	sbci	r18, 0x00	; 0
    1c9a:	80 40       	sbci	r24, 0x00	; 0
    1c9c:	e1 f7       	brne	.-8      	; 0x1c96 <main+0xade>
    1c9e:	00 c0       	rjmp	.+0      	; 0x1ca0 <main+0xae8>
    1ca0:	00 00       	nop
		}
	
		
        _delay_ms(2000);
        if(port>4000)
    1ca2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <port>
    1ca6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <port+0x1>
    1caa:	81 3a       	cpi	r24, 0xA1	; 161
    1cac:	9f 40       	sbci	r25, 0x0F	; 15
    1cae:	08 f4       	brcc	.+2      	; 0x1cb2 <main+0xafa>
    1cb0:	ef cb       	rjmp	.-2082   	; 0x1490 <main+0x2d8>
            port=100;
    1cb2:	84 e6       	ldi	r24, 0x64	; 100
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <port+0x1>
    1cba:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <port>
    1cbe:	e8 cb       	rjmp	.-2096   	; 0x1490 <main+0x2d8>

00001cc0 <__subsf3>:
    1cc0:	50 58       	subi	r21, 0x80	; 128

00001cc2 <__addsf3>:
    1cc2:	bb 27       	eor	r27, r27
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    1cca:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__fp_round>
    1cce:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscA>
    1cd2:	38 f0       	brcs	.+14     	; 0x1ce2 <__addsf3+0x20>
    1cd4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_pscB>
    1cd8:	20 f0       	brcs	.+8      	; 0x1ce2 <__addsf3+0x20>
    1cda:	39 f4       	brne	.+14     	; 0x1cea <__addsf3+0x28>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	19 f4       	brne	.+6      	; 0x1ce6 <__addsf3+0x24>
    1ce0:	26 f4       	brtc	.+8      	; 0x1cea <__addsf3+0x28>
    1ce2:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>
    1ce6:	0e f4       	brtc	.+2      	; 0x1cea <__addsf3+0x28>
    1ce8:	e0 95       	com	r30
    1cea:	e7 fb       	bst	r30, 7
    1cec:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>

00001cf0 <__addsf3x>:
    1cf0:	e9 2f       	mov	r30, r25
    1cf2:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fp_split3>
    1cf6:	58 f3       	brcs	.-42     	; 0x1cce <__addsf3+0xc>
    1cf8:	ba 17       	cp	r27, r26
    1cfa:	62 07       	cpc	r22, r18
    1cfc:	73 07       	cpc	r23, r19
    1cfe:	84 07       	cpc	r24, r20
    1d00:	95 07       	cpc	r25, r21
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__addsf3x+0x1c>
    1d04:	79 f4       	brne	.+30     	; 0x1d24 <__addsf3x+0x34>
    1d06:	a6 f5       	brtc	.+104    	; 0x1d70 <__addsf3x+0x80>
    1d08:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__fp_zero>
    1d0c:	0e f4       	brtc	.+2      	; 0x1d10 <__addsf3x+0x20>
    1d0e:	e0 95       	com	r30
    1d10:	0b 2e       	mov	r0, r27
    1d12:	ba 2f       	mov	r27, r26
    1d14:	a0 2d       	mov	r26, r0
    1d16:	0b 01       	movw	r0, r22
    1d18:	b9 01       	movw	r22, r18
    1d1a:	90 01       	movw	r18, r0
    1d1c:	0c 01       	movw	r0, r24
    1d1e:	ca 01       	movw	r24, r20
    1d20:	a0 01       	movw	r20, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	ff 27       	eor	r31, r31
    1d26:	59 1b       	sub	r21, r25
    1d28:	99 f0       	breq	.+38     	; 0x1d50 <__addsf3x+0x60>
    1d2a:	59 3f       	cpi	r21, 0xF9	; 249
    1d2c:	50 f4       	brcc	.+20     	; 0x1d42 <__addsf3x+0x52>
    1d2e:	50 3e       	cpi	r21, 0xE0	; 224
    1d30:	68 f1       	brcs	.+90     	; 0x1d8c <__addsf3x+0x9c>
    1d32:	1a 16       	cp	r1, r26
    1d34:	f0 40       	sbci	r31, 0x00	; 0
    1d36:	a2 2f       	mov	r26, r18
    1d38:	23 2f       	mov	r18, r19
    1d3a:	34 2f       	mov	r19, r20
    1d3c:	44 27       	eor	r20, r20
    1d3e:	58 5f       	subi	r21, 0xF8	; 248
    1d40:	f3 cf       	rjmp	.-26     	; 0x1d28 <__addsf3x+0x38>
    1d42:	46 95       	lsr	r20
    1d44:	37 95       	ror	r19
    1d46:	27 95       	ror	r18
    1d48:	a7 95       	ror	r26
    1d4a:	f0 40       	sbci	r31, 0x00	; 0
    1d4c:	53 95       	inc	r21
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <__addsf3x+0x52>
    1d50:	7e f4       	brtc	.+30     	; 0x1d70 <__addsf3x+0x80>
    1d52:	1f 16       	cp	r1, r31
    1d54:	ba 0b       	sbc	r27, r26
    1d56:	62 0b       	sbc	r22, r18
    1d58:	73 0b       	sbc	r23, r19
    1d5a:	84 0b       	sbc	r24, r20
    1d5c:	ba f0       	brmi	.+46     	; 0x1d8c <__addsf3x+0x9c>
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	a1 f0       	breq	.+40     	; 0x1d8a <__addsf3x+0x9a>
    1d62:	ff 0f       	add	r31, r31
    1d64:	bb 1f       	adc	r27, r27
    1d66:	66 1f       	adc	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	c2 f7       	brpl	.-16     	; 0x1d5e <__addsf3x+0x6e>
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <__addsf3x+0x9c>
    1d70:	ba 0f       	add	r27, r26
    1d72:	62 1f       	adc	r22, r18
    1d74:	73 1f       	adc	r23, r19
    1d76:	84 1f       	adc	r24, r20
    1d78:	48 f4       	brcc	.+18     	; 0x1d8c <__addsf3x+0x9c>
    1d7a:	87 95       	ror	r24
    1d7c:	77 95       	ror	r23
    1d7e:	67 95       	ror	r22
    1d80:	b7 95       	ror	r27
    1d82:	f7 95       	ror	r31
    1d84:	9e 3f       	cpi	r25, 0xFE	; 254
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <__addsf3x+0x9a>
    1d88:	b0 cf       	rjmp	.-160    	; 0x1cea <__addsf3+0x28>
    1d8a:	93 95       	inc	r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <__addsf3x+0xa2>
    1d90:	99 27       	eor	r25, r25
    1d92:	ee 0f       	add	r30, r30
    1d94:	97 95       	ror	r25
    1d96:	87 95       	ror	r24
    1d98:	08 95       	ret

00001d9a <__divsf3>:
    1d9a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__divsf3x>
    1d9e:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__fp_round>
    1da2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_pscB>
    1da6:	58 f0       	brcs	.+22     	; 0x1dbe <__divsf3+0x24>
    1da8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscA>
    1dac:	40 f0       	brcs	.+16     	; 0x1dbe <__divsf3+0x24>
    1dae:	29 f4       	brne	.+10     	; 0x1dba <__divsf3+0x20>
    1db0:	5f 3f       	cpi	r21, 0xFF	; 255
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <__divsf3+0x24>
    1db4:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    1db8:	51 11       	cpse	r21, r1
    1dba:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__fp_szero>
    1dbe:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>

00001dc2 <__divsf3x>:
    1dc2:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fp_split3>
    1dc6:	68 f3       	brcs	.-38     	; 0x1da2 <__divsf3+0x8>

00001dc8 <__divsf3_pse>:
    1dc8:	99 23       	and	r25, r25
    1dca:	b1 f3       	breq	.-20     	; 0x1db8 <__divsf3+0x1e>
    1dcc:	55 23       	and	r21, r21
    1dce:	91 f3       	breq	.-28     	; 0x1db4 <__divsf3+0x1a>
    1dd0:	95 1b       	sub	r25, r21
    1dd2:	55 0b       	sbc	r21, r21
    1dd4:	bb 27       	eor	r27, r27
    1dd6:	aa 27       	eor	r26, r26
    1dd8:	62 17       	cp	r22, r18
    1dda:	73 07       	cpc	r23, r19
    1ddc:	84 07       	cpc	r24, r20
    1dde:	38 f0       	brcs	.+14     	; 0x1dee <__divsf3_pse+0x26>
    1de0:	9f 5f       	subi	r25, 0xFF	; 255
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	44 1f       	adc	r20, r20
    1dea:	aa 1f       	adc	r26, r26
    1dec:	a9 f3       	breq	.-22     	; 0x1dd8 <__divsf3_pse+0x10>
    1dee:	35 d0       	rcall	.+106    	; 0x1e5a <__divsf3_pse+0x92>
    1df0:	0e 2e       	mov	r0, r30
    1df2:	3a f0       	brmi	.+14     	; 0x1e02 <__divsf3_pse+0x3a>
    1df4:	e0 e8       	ldi	r30, 0x80	; 128
    1df6:	32 d0       	rcall	.+100    	; 0x1e5c <__divsf3_pse+0x94>
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	50 40       	sbci	r21, 0x00	; 0
    1dfc:	e6 95       	lsr	r30
    1dfe:	00 1c       	adc	r0, r0
    1e00:	ca f7       	brpl	.-14     	; 0x1df4 <__divsf3_pse+0x2c>
    1e02:	2b d0       	rcall	.+86     	; 0x1e5a <__divsf3_pse+0x92>
    1e04:	fe 2f       	mov	r31, r30
    1e06:	29 d0       	rcall	.+82     	; 0x1e5a <__divsf3_pse+0x92>
    1e08:	66 0f       	add	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	26 17       	cp	r18, r22
    1e12:	37 07       	cpc	r19, r23
    1e14:	48 07       	cpc	r20, r24
    1e16:	ab 07       	cpc	r26, r27
    1e18:	b0 e8       	ldi	r27, 0x80	; 128
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <__divsf3_pse+0x56>
    1e1c:	bb 0b       	sbc	r27, r27
    1e1e:	80 2d       	mov	r24, r0
    1e20:	bf 01       	movw	r22, r30
    1e22:	ff 27       	eor	r31, r31
    1e24:	93 58       	subi	r25, 0x83	; 131
    1e26:	5f 4f       	sbci	r21, 0xFF	; 255
    1e28:	3a f0       	brmi	.+14     	; 0x1e38 <__divsf3_pse+0x70>
    1e2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	78 f0       	brcs	.+30     	; 0x1e4e <__divsf3_pse+0x86>
    1e30:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    1e34:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__fp_szero>
    1e38:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3a:	e4 f3       	brlt	.-8      	; 0x1e34 <__divsf3_pse+0x6c>
    1e3c:	98 3e       	cpi	r25, 0xE8	; 232
    1e3e:	d4 f3       	brlt	.-12     	; 0x1e34 <__divsf3_pse+0x6c>
    1e40:	86 95       	lsr	r24
    1e42:	77 95       	ror	r23
    1e44:	67 95       	ror	r22
    1e46:	b7 95       	ror	r27
    1e48:	f7 95       	ror	r31
    1e4a:	9f 5f       	subi	r25, 0xFF	; 255
    1e4c:	c9 f7       	brne	.-14     	; 0x1e40 <__divsf3_pse+0x78>
    1e4e:	88 0f       	add	r24, r24
    1e50:	91 1d       	adc	r25, r1
    1e52:	96 95       	lsr	r25
    1e54:	87 95       	ror	r24
    1e56:	97 f9       	bld	r25, 7
    1e58:	08 95       	ret
    1e5a:	e1 e0       	ldi	r30, 0x01	; 1
    1e5c:	66 0f       	add	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	88 1f       	adc	r24, r24
    1e62:	bb 1f       	adc	r27, r27
    1e64:	62 17       	cp	r22, r18
    1e66:	73 07       	cpc	r23, r19
    1e68:	84 07       	cpc	r24, r20
    1e6a:	ba 07       	cpc	r27, r26
    1e6c:	20 f0       	brcs	.+8      	; 0x1e76 <__divsf3_pse+0xae>
    1e6e:	62 1b       	sub	r22, r18
    1e70:	73 0b       	sbc	r23, r19
    1e72:	84 0b       	sbc	r24, r20
    1e74:	ba 0b       	sbc	r27, r26
    1e76:	ee 1f       	adc	r30, r30
    1e78:	88 f7       	brcc	.-30     	; 0x1e5c <__divsf3_pse+0x94>
    1e7a:	e0 95       	com	r30
    1e7c:	08 95       	ret

00001e7e <__fixsfsi>:
    1e7e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixunssfsi>
    1e82:	68 94       	set
    1e84:	b1 11       	cpse	r27, r1
    1e86:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__fp_szero>
    1e8a:	08 95       	ret

00001e8c <__fixunssfsi>:
    1e8c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__fp_splitA>
    1e90:	88 f0       	brcs	.+34     	; 0x1eb4 <__fixunssfsi+0x28>
    1e92:	9f 57       	subi	r25, 0x7F	; 127
    1e94:	98 f0       	brcs	.+38     	; 0x1ebc <__fixunssfsi+0x30>
    1e96:	b9 2f       	mov	r27, r25
    1e98:	99 27       	eor	r25, r25
    1e9a:	b7 51       	subi	r27, 0x17	; 23
    1e9c:	b0 f0       	brcs	.+44     	; 0x1eca <__fixunssfsi+0x3e>
    1e9e:	e1 f0       	breq	.+56     	; 0x1ed8 <__fixunssfsi+0x4c>
    1ea0:	66 0f       	add	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	1a f0       	brmi	.+6      	; 0x1eb0 <__fixunssfsi+0x24>
    1eaa:	ba 95       	dec	r27
    1eac:	c9 f7       	brne	.-14     	; 0x1ea0 <__fixunssfsi+0x14>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <__fixunssfsi+0x4c>
    1eb0:	b1 30       	cpi	r27, 0x01	; 1
    1eb2:	91 f0       	breq	.+36     	; 0x1ed8 <__fixunssfsi+0x4c>
    1eb4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fp_zero>
    1eb8:	b1 e0       	ldi	r27, 0x01	; 1
    1eba:	08 95       	ret
    1ebc:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__fp_zero>
    1ec0:	67 2f       	mov	r22, r23
    1ec2:	78 2f       	mov	r23, r24
    1ec4:	88 27       	eor	r24, r24
    1ec6:	b8 5f       	subi	r27, 0xF8	; 248
    1ec8:	39 f0       	breq	.+14     	; 0x1ed8 <__fixunssfsi+0x4c>
    1eca:	b9 3f       	cpi	r27, 0xF9	; 249
    1ecc:	cc f3       	brlt	.-14     	; 0x1ec0 <__fixunssfsi+0x34>
    1ece:	86 95       	lsr	r24
    1ed0:	77 95       	ror	r23
    1ed2:	67 95       	ror	r22
    1ed4:	b3 95       	inc	r27
    1ed6:	d9 f7       	brne	.-10     	; 0x1ece <__fixunssfsi+0x42>
    1ed8:	3e f4       	brtc	.+14     	; 0x1ee8 <__fixunssfsi+0x5c>
    1eda:	90 95       	com	r25
    1edc:	80 95       	com	r24
    1ede:	70 95       	com	r23
    1ee0:	61 95       	neg	r22
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	08 95       	ret

00001eea <__floatunsisf>:
    1eea:	e8 94       	clt
    1eec:	09 c0       	rjmp	.+18     	; 0x1f00 <__floatsisf+0x12>

00001eee <__floatsisf>:
    1eee:	97 fb       	bst	r25, 7
    1ef0:	3e f4       	brtc	.+14     	; 0x1f00 <__floatsisf+0x12>
    1ef2:	90 95       	com	r25
    1ef4:	80 95       	com	r24
    1ef6:	70 95       	com	r23
    1ef8:	61 95       	neg	r22
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	8f 4f       	sbci	r24, 0xFF	; 255
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	99 23       	and	r25, r25
    1f02:	a9 f0       	breq	.+42     	; 0x1f2e <__floatsisf+0x40>
    1f04:	f9 2f       	mov	r31, r25
    1f06:	96 e9       	ldi	r25, 0x96	; 150
    1f08:	bb 27       	eor	r27, r27
    1f0a:	93 95       	inc	r25
    1f0c:	f6 95       	lsr	r31
    1f0e:	87 95       	ror	r24
    1f10:	77 95       	ror	r23
    1f12:	67 95       	ror	r22
    1f14:	b7 95       	ror	r27
    1f16:	f1 11       	cpse	r31, r1
    1f18:	f8 cf       	rjmp	.-16     	; 0x1f0a <__floatsisf+0x1c>
    1f1a:	fa f4       	brpl	.+62     	; 0x1f5a <__floatsisf+0x6c>
    1f1c:	bb 0f       	add	r27, r27
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <__floatsisf+0x36>
    1f20:	60 ff       	sbrs	r22, 0
    1f22:	1b c0       	rjmp	.+54     	; 0x1f5a <__floatsisf+0x6c>
    1f24:	6f 5f       	subi	r22, 0xFF	; 255
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	16 c0       	rjmp	.+44     	; 0x1f5a <__floatsisf+0x6c>
    1f2e:	88 23       	and	r24, r24
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <__floatsisf+0x48>
    1f32:	96 e9       	ldi	r25, 0x96	; 150
    1f34:	11 c0       	rjmp	.+34     	; 0x1f58 <__floatsisf+0x6a>
    1f36:	77 23       	and	r23, r23
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <__floatsisf+0x54>
    1f3a:	9e e8       	ldi	r25, 0x8E	; 142
    1f3c:	87 2f       	mov	r24, r23
    1f3e:	76 2f       	mov	r23, r22
    1f40:	05 c0       	rjmp	.+10     	; 0x1f4c <__floatsisf+0x5e>
    1f42:	66 23       	and	r22, r22
    1f44:	71 f0       	breq	.+28     	; 0x1f62 <__floatsisf+0x74>
    1f46:	96 e8       	ldi	r25, 0x86	; 134
    1f48:	86 2f       	mov	r24, r22
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	2a f0       	brmi	.+10     	; 0x1f5a <__floatsisf+0x6c>
    1f50:	9a 95       	dec	r25
    1f52:	66 0f       	add	r22, r22
    1f54:	77 1f       	adc	r23, r23
    1f56:	88 1f       	adc	r24, r24
    1f58:	da f7       	brpl	.-10     	; 0x1f50 <__floatsisf+0x62>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	96 95       	lsr	r25
    1f5e:	87 95       	ror	r24
    1f60:	97 f9       	bld	r25, 7
    1f62:	08 95       	ret

00001f64 <__fp_inf>:
    1f64:	97 f9       	bld	r25, 7
    1f66:	9f 67       	ori	r25, 0x7F	; 127
    1f68:	80 e8       	ldi	r24, 0x80	; 128
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	08 95       	ret

00001f70 <__fp_nan>:
    1f70:	9f ef       	ldi	r25, 0xFF	; 255
    1f72:	80 ec       	ldi	r24, 0xC0	; 192
    1f74:	08 95       	ret

00001f76 <__fp_pscA>:
    1f76:	00 24       	eor	r0, r0
    1f78:	0a 94       	dec	r0
    1f7a:	16 16       	cp	r1, r22
    1f7c:	17 06       	cpc	r1, r23
    1f7e:	18 06       	cpc	r1, r24
    1f80:	09 06       	cpc	r0, r25
    1f82:	08 95       	ret

00001f84 <__fp_pscB>:
    1f84:	00 24       	eor	r0, r0
    1f86:	0a 94       	dec	r0
    1f88:	12 16       	cp	r1, r18
    1f8a:	13 06       	cpc	r1, r19
    1f8c:	14 06       	cpc	r1, r20
    1f8e:	05 06       	cpc	r0, r21
    1f90:	08 95       	ret

00001f92 <__fp_round>:
    1f92:	09 2e       	mov	r0, r25
    1f94:	03 94       	inc	r0
    1f96:	00 0c       	add	r0, r0
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <__fp_round+0xc>
    1f9a:	88 23       	and	r24, r24
    1f9c:	52 f0       	brmi	.+20     	; 0x1fb2 <__fp_round+0x20>
    1f9e:	bb 0f       	add	r27, r27
    1fa0:	40 f4       	brcc	.+16     	; 0x1fb2 <__fp_round+0x20>
    1fa2:	bf 2b       	or	r27, r31
    1fa4:	11 f4       	brne	.+4      	; 0x1faa <__fp_round+0x18>
    1fa6:	60 ff       	sbrs	r22, 0
    1fa8:	04 c0       	rjmp	.+8      	; 0x1fb2 <__fp_round+0x20>
    1faa:	6f 5f       	subi	r22, 0xFF	; 255
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255
    1fae:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	08 95       	ret

00001fb4 <__fp_split3>:
    1fb4:	57 fd       	sbrc	r21, 7
    1fb6:	90 58       	subi	r25, 0x80	; 128
    1fb8:	44 0f       	add	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	59 f0       	breq	.+22     	; 0x1fd4 <__fp_splitA+0x10>
    1fbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc0:	71 f0       	breq	.+28     	; 0x1fde <__fp_splitA+0x1a>
    1fc2:	47 95       	ror	r20

00001fc4 <__fp_splitA>:
    1fc4:	88 0f       	add	r24, r24
    1fc6:	97 fb       	bst	r25, 7
    1fc8:	99 1f       	adc	r25, r25
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <__fp_splitA+0x20>
    1fcc:	9f 3f       	cpi	r25, 0xFF	; 255
    1fce:	79 f0       	breq	.+30     	; 0x1fee <__fp_splitA+0x2a>
    1fd0:	87 95       	ror	r24
    1fd2:	08 95       	ret
    1fd4:	12 16       	cp	r1, r18
    1fd6:	13 06       	cpc	r1, r19
    1fd8:	14 06       	cpc	r1, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	f2 cf       	rjmp	.-28     	; 0x1fc2 <__fp_split3+0xe>
    1fde:	46 95       	lsr	r20
    1fe0:	f1 df       	rcall	.-30     	; 0x1fc4 <__fp_splitA>
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <__fp_splitA+0x30>
    1fe4:	16 16       	cp	r1, r22
    1fe6:	17 06       	cpc	r1, r23
    1fe8:	18 06       	cpc	r1, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	f1 cf       	rjmp	.-30     	; 0x1fd0 <__fp_splitA+0xc>
    1fee:	86 95       	lsr	r24
    1ff0:	71 05       	cpc	r23, r1
    1ff2:	61 05       	cpc	r22, r1
    1ff4:	08 94       	sec
    1ff6:	08 95       	ret

00001ff8 <__fp_zero>:
    1ff8:	e8 94       	clt

00001ffa <__fp_szero>:
    1ffa:	bb 27       	eor	r27, r27
    1ffc:	66 27       	eor	r22, r22
    1ffe:	77 27       	eor	r23, r23
    2000:	cb 01       	movw	r24, r22
    2002:	97 f9       	bld	r25, 7
    2004:	08 95       	ret

00002006 <__mulsf3>:
    2006:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3x>
    200a:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__fp_round>
    200e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscA>
    2012:	38 f0       	brcs	.+14     	; 0x2022 <__mulsf3+0x1c>
    2014:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_pscB>
    2018:	20 f0       	brcs	.+8      	; 0x2022 <__mulsf3+0x1c>
    201a:	95 23       	and	r25, r21
    201c:	11 f0       	breq	.+4      	; 0x2022 <__mulsf3+0x1c>
    201e:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    2022:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>
    2026:	11 24       	eor	r1, r1
    2028:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__fp_szero>

0000202c <__mulsf3x>:
    202c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fp_split3>
    2030:	70 f3       	brcs	.-36     	; 0x200e <__mulsf3+0x8>

00002032 <__mulsf3_pse>:
    2032:	95 9f       	mul	r25, r21
    2034:	c1 f3       	breq	.-16     	; 0x2026 <__mulsf3+0x20>
    2036:	95 0f       	add	r25, r21
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	55 1f       	adc	r21, r21
    203c:	62 9f       	mul	r22, r18
    203e:	f0 01       	movw	r30, r0
    2040:	72 9f       	mul	r23, r18
    2042:	bb 27       	eor	r27, r27
    2044:	f0 0d       	add	r31, r0
    2046:	b1 1d       	adc	r27, r1
    2048:	63 9f       	mul	r22, r19
    204a:	aa 27       	eor	r26, r26
    204c:	f0 0d       	add	r31, r0
    204e:	b1 1d       	adc	r27, r1
    2050:	aa 1f       	adc	r26, r26
    2052:	64 9f       	mul	r22, r20
    2054:	66 27       	eor	r22, r22
    2056:	b0 0d       	add	r27, r0
    2058:	a1 1d       	adc	r26, r1
    205a:	66 1f       	adc	r22, r22
    205c:	82 9f       	mul	r24, r18
    205e:	22 27       	eor	r18, r18
    2060:	b0 0d       	add	r27, r0
    2062:	a1 1d       	adc	r26, r1
    2064:	62 1f       	adc	r22, r18
    2066:	73 9f       	mul	r23, r19
    2068:	b0 0d       	add	r27, r0
    206a:	a1 1d       	adc	r26, r1
    206c:	62 1f       	adc	r22, r18
    206e:	83 9f       	mul	r24, r19
    2070:	a0 0d       	add	r26, r0
    2072:	61 1d       	adc	r22, r1
    2074:	22 1f       	adc	r18, r18
    2076:	74 9f       	mul	r23, r20
    2078:	33 27       	eor	r19, r19
    207a:	a0 0d       	add	r26, r0
    207c:	61 1d       	adc	r22, r1
    207e:	23 1f       	adc	r18, r19
    2080:	84 9f       	mul	r24, r20
    2082:	60 0d       	add	r22, r0
    2084:	21 1d       	adc	r18, r1
    2086:	82 2f       	mov	r24, r18
    2088:	76 2f       	mov	r23, r22
    208a:	6a 2f       	mov	r22, r26
    208c:	11 24       	eor	r1, r1
    208e:	9f 57       	subi	r25, 0x7F	; 127
    2090:	50 40       	sbci	r21, 0x00	; 0
    2092:	9a f0       	brmi	.+38     	; 0x20ba <__mulsf3_pse+0x88>
    2094:	f1 f0       	breq	.+60     	; 0x20d2 <__mulsf3_pse+0xa0>
    2096:	88 23       	and	r24, r24
    2098:	4a f0       	brmi	.+18     	; 0x20ac <__mulsf3_pse+0x7a>
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	bb 1f       	adc	r27, r27
    20a0:	66 1f       	adc	r22, r22
    20a2:	77 1f       	adc	r23, r23
    20a4:	88 1f       	adc	r24, r24
    20a6:	91 50       	subi	r25, 0x01	; 1
    20a8:	50 40       	sbci	r21, 0x00	; 0
    20aa:	a9 f7       	brne	.-22     	; 0x2096 <__mulsf3_pse+0x64>
    20ac:	9e 3f       	cpi	r25, 0xFE	; 254
    20ae:	51 05       	cpc	r21, r1
    20b0:	80 f0       	brcs	.+32     	; 0x20d2 <__mulsf3_pse+0xa0>
    20b2:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    20b6:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__fp_szero>
    20ba:	5f 3f       	cpi	r21, 0xFF	; 255
    20bc:	e4 f3       	brlt	.-8      	; 0x20b6 <__mulsf3_pse+0x84>
    20be:	98 3e       	cpi	r25, 0xE8	; 232
    20c0:	d4 f3       	brlt	.-12     	; 0x20b6 <__mulsf3_pse+0x84>
    20c2:	86 95       	lsr	r24
    20c4:	77 95       	ror	r23
    20c6:	67 95       	ror	r22
    20c8:	b7 95       	ror	r27
    20ca:	f7 95       	ror	r31
    20cc:	e7 95       	ror	r30
    20ce:	9f 5f       	subi	r25, 0xFF	; 255
    20d0:	c1 f7       	brne	.-16     	; 0x20c2 <__mulsf3_pse+0x90>
    20d2:	fe 2b       	or	r31, r30
    20d4:	88 0f       	add	r24, r24
    20d6:	91 1d       	adc	r25, r1
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	97 f9       	bld	r25, 7
    20de:	08 95       	ret

000020e0 <pow>:
    20e0:	fa 01       	movw	r30, r20
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	30 96       	adiw	r30, 0x00	; 0
    20e8:	21 05       	cpc	r18, r1
    20ea:	31 05       	cpc	r19, r1
    20ec:	a1 f1       	breq	.+104    	; 0x2156 <pow+0x76>
    20ee:	61 15       	cp	r22, r1
    20f0:	71 05       	cpc	r23, r1
    20f2:	61 f4       	brne	.+24     	; 0x210c <pow+0x2c>
    20f4:	80 38       	cpi	r24, 0x80	; 128
    20f6:	bf e3       	ldi	r27, 0x3F	; 63
    20f8:	9b 07       	cpc	r25, r27
    20fa:	49 f1       	breq	.+82     	; 0x214e <pow+0x6e>
    20fc:	68 94       	set
    20fe:	90 38       	cpi	r25, 0x80	; 128
    2100:	81 05       	cpc	r24, r1
    2102:	61 f0       	breq	.+24     	; 0x211c <pow+0x3c>
    2104:	80 38       	cpi	r24, 0x80	; 128
    2106:	bf ef       	ldi	r27, 0xFF	; 255
    2108:	9b 07       	cpc	r25, r27
    210a:	41 f0       	breq	.+16     	; 0x211c <pow+0x3c>
    210c:	99 23       	and	r25, r25
    210e:	4a f5       	brpl	.+82     	; 0x2162 <pow+0x82>
    2110:	ff 3f       	cpi	r31, 0xFF	; 255
    2112:	e1 05       	cpc	r30, r1
    2114:	31 05       	cpc	r19, r1
    2116:	21 05       	cpc	r18, r1
    2118:	19 f1       	breq	.+70     	; 0x2160 <pow+0x80>
    211a:	e8 94       	clt
    211c:	08 94       	sec
    211e:	e7 95       	ror	r30
    2120:	d9 01       	movw	r26, r18
    2122:	aa 23       	and	r26, r26
    2124:	29 f4       	brne	.+10     	; 0x2130 <pow+0x50>
    2126:	ab 2f       	mov	r26, r27
    2128:	be 2f       	mov	r27, r30
    212a:	f8 5f       	subi	r31, 0xF8	; 248
    212c:	d0 f3       	brcs	.-12     	; 0x2122 <pow+0x42>
    212e:	10 c0       	rjmp	.+32     	; 0x2150 <pow+0x70>
    2130:	ff 5f       	subi	r31, 0xFF	; 255
    2132:	70 f4       	brcc	.+28     	; 0x2150 <pow+0x70>
    2134:	a6 95       	lsr	r26
    2136:	e0 f7       	brcc	.-8      	; 0x2130 <pow+0x50>
    2138:	f7 39       	cpi	r31, 0x97	; 151
    213a:	50 f0       	brcs	.+20     	; 0x2150 <pow+0x70>
    213c:	19 f0       	breq	.+6      	; 0x2144 <pow+0x64>
    213e:	ff 3a       	cpi	r31, 0xAF	; 175
    2140:	38 f4       	brcc	.+14     	; 0x2150 <pow+0x70>
    2142:	9f 77       	andi	r25, 0x7F	; 127
    2144:	9f 93       	push	r25
    2146:	0d d0       	rcall	.+26     	; 0x2162 <pow+0x82>
    2148:	0f 90       	pop	r0
    214a:	07 fc       	sbrc	r0, 7
    214c:	90 58       	subi	r25, 0x80	; 128
    214e:	08 95       	ret
    2150:	46 f0       	brts	.+16     	; 0x2162 <pow+0x82>
    2152:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	80 e8       	ldi	r24, 0x80	; 128
    215c:	9f e3       	ldi	r25, 0x3F	; 63
    215e:	08 95       	ret
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	9f 77       	andi	r25, 0x7F	; 127
    2164:	5f 93       	push	r21
    2166:	4f 93       	push	r20
    2168:	3f 93       	push	r19
    216a:	2f 93       	push	r18
    216c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <log>
    2170:	2f 91       	pop	r18
    2172:	3f 91       	pop	r19
    2174:	4f 91       	pop	r20
    2176:	5f 91       	pop	r21
    2178:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3>
    217c:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <exp>
    2180:	29 f4       	brne	.+10     	; 0x218c <pow+0xac>
    2182:	16 f0       	brts	.+4      	; 0x2188 <pow+0xa8>
    2184:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    2188:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__fp_zero>
    218c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>

00002190 <exp>:
    2190:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__fp_splitA>
    2194:	a8 f3       	brcs	.-22     	; 0x2180 <pow+0xa0>
    2196:	96 38       	cpi	r25, 0x86	; 134
    2198:	a0 f7       	brcc	.-24     	; 0x2182 <pow+0xa2>
    219a:	07 f8       	bld	r0, 7
    219c:	0f 92       	push	r0
    219e:	e8 94       	clt
    21a0:	2b e3       	ldi	r18, 0x3B	; 59
    21a2:	3a ea       	ldi	r19, 0xAA	; 170
    21a4:	48 eb       	ldi	r20, 0xB8	; 184
    21a6:	5f e7       	ldi	r21, 0x7F	; 127
    21a8:	0e 94 19 10 	call	0x2032	; 0x2032 <__mulsf3_pse>
    21ac:	0f 92       	push	r0
    21ae:	0f 92       	push	r0
    21b0:	0f 92       	push	r0
    21b2:	4d b7       	in	r20, 0x3d	; 61
    21b4:	5e b7       	in	r21, 0x3e	; 62
    21b6:	0f 92       	push	r0
    21b8:	0e 94 b3 11 	call	0x2366	; 0x2366 <modf>
    21bc:	e8 e6       	ldi	r30, 0x68	; 104
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__fp_powser>
    21c4:	4f 91       	pop	r20
    21c6:	5f 91       	pop	r21
    21c8:	ef 91       	pop	r30
    21ca:	ff 91       	pop	r31
    21cc:	e5 95       	asr	r30
    21ce:	ee 1f       	adc	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	49 f0       	breq	.+18     	; 0x21e6 <exp+0x56>
    21d4:	fe 57       	subi	r31, 0x7E	; 126
    21d6:	e0 68       	ori	r30, 0x80	; 128
    21d8:	44 27       	eor	r20, r20
    21da:	ee 0f       	add	r30, r30
    21dc:	44 1f       	adc	r20, r20
    21de:	fa 95       	dec	r31
    21e0:	e1 f7       	brne	.-8      	; 0x21da <exp+0x4a>
    21e2:	41 95       	neg	r20
    21e4:	55 0b       	sbc	r21, r21
    21e6:	0e 94 2d 11 	call	0x225a	; 0x225a <ldexp>
    21ea:	0f 90       	pop	r0
    21ec:	07 fe       	sbrs	r0, 7
    21ee:	0c 94 21 11 	jmp	0x2242	; 0x2242 <inverse>
    21f2:	08 95       	ret

000021f4 <__fp_powser>:
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	1f 93       	push	r17
    21fa:	0f 93       	push	r16
    21fc:	ff 92       	push	r15
    21fe:	ef 92       	push	r14
    2200:	df 92       	push	r13
    2202:	7b 01       	movw	r14, r22
    2204:	8c 01       	movw	r16, r24
    2206:	68 94       	set
    2208:	06 c0       	rjmp	.+12     	; 0x2216 <__fp_powser+0x22>
    220a:	da 2e       	mov	r13, r26
    220c:	ef 01       	movw	r28, r30
    220e:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3x>
    2212:	fe 01       	movw	r30, r28
    2214:	e8 94       	clt
    2216:	a5 91       	lpm	r26, Z+
    2218:	25 91       	lpm	r18, Z+
    221a:	35 91       	lpm	r19, Z+
    221c:	45 91       	lpm	r20, Z+
    221e:	55 91       	lpm	r21, Z+
    2220:	a6 f3       	brts	.-24     	; 0x220a <__fp_powser+0x16>
    2222:	ef 01       	movw	r28, r30
    2224:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    2228:	fe 01       	movw	r30, r28
    222a:	97 01       	movw	r18, r14
    222c:	a8 01       	movw	r20, r16
    222e:	da 94       	dec	r13
    2230:	69 f7       	brne	.-38     	; 0x220c <__fp_powser+0x18>
    2232:	df 90       	pop	r13
    2234:	ef 90       	pop	r14
    2236:	ff 90       	pop	r15
    2238:	0f 91       	pop	r16
    223a:	1f 91       	pop	r17
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <inverse>:
    2242:	9b 01       	movw	r18, r22
    2244:	ac 01       	movw	r20, r24
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	80 e8       	ldi	r24, 0x80	; 128
    224c:	9f e3       	ldi	r25, 0x3F	; 63
    224e:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__divsf3>
    2252:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    2256:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_mpack>

0000225a <ldexp>:
    225a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__fp_splitA>
    225e:	d8 f3       	brcs	.-10     	; 0x2256 <inverse+0x14>
    2260:	99 23       	and	r25, r25
    2262:	c9 f3       	breq	.-14     	; 0x2256 <inverse+0x14>
    2264:	94 0f       	add	r25, r20
    2266:	51 1d       	adc	r21, r1
    2268:	a3 f3       	brvs	.-24     	; 0x2252 <inverse+0x10>
    226a:	91 50       	subi	r25, 0x01	; 1
    226c:	50 40       	sbci	r21, 0x00	; 0
    226e:	94 f0       	brlt	.+36     	; 0x2294 <ldexp+0x3a>
    2270:	59 f0       	breq	.+22     	; 0x2288 <ldexp+0x2e>
    2272:	88 23       	and	r24, r24
    2274:	32 f0       	brmi	.+12     	; 0x2282 <ldexp+0x28>
    2276:	66 0f       	add	r22, r22
    2278:	77 1f       	adc	r23, r23
    227a:	88 1f       	adc	r24, r24
    227c:	91 50       	subi	r25, 0x01	; 1
    227e:	50 40       	sbci	r21, 0x00	; 0
    2280:	c1 f7       	brne	.-16     	; 0x2272 <ldexp+0x18>
    2282:	9e 3f       	cpi	r25, 0xFE	; 254
    2284:	51 05       	cpc	r21, r1
    2286:	2c f7       	brge	.-54     	; 0x2252 <inverse+0x10>
    2288:	88 0f       	add	r24, r24
    228a:	91 1d       	adc	r25, r1
    228c:	96 95       	lsr	r25
    228e:	87 95       	ror	r24
    2290:	97 f9       	bld	r25, 7
    2292:	08 95       	ret
    2294:	5f 3f       	cpi	r21, 0xFF	; 255
    2296:	ac f0       	brlt	.+42     	; 0x22c2 <ldexp+0x68>
    2298:	98 3e       	cpi	r25, 0xE8	; 232
    229a:	9c f0       	brlt	.+38     	; 0x22c2 <ldexp+0x68>
    229c:	bb 27       	eor	r27, r27
    229e:	86 95       	lsr	r24
    22a0:	77 95       	ror	r23
    22a2:	67 95       	ror	r22
    22a4:	b7 95       	ror	r27
    22a6:	08 f4       	brcc	.+2      	; 0x22aa <ldexp+0x50>
    22a8:	b1 60       	ori	r27, 0x01	; 1
    22aa:	93 95       	inc	r25
    22ac:	c1 f7       	brne	.-16     	; 0x229e <ldexp+0x44>
    22ae:	bb 0f       	add	r27, r27
    22b0:	58 f7       	brcc	.-42     	; 0x2288 <ldexp+0x2e>
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <ldexp+0x5e>
    22b4:	60 ff       	sbrs	r22, 0
    22b6:	e8 cf       	rjmp	.-48     	; 0x2288 <ldexp+0x2e>
    22b8:	6f 5f       	subi	r22, 0xFF	; 255
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	8f 4f       	sbci	r24, 0xFF	; 255
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	e3 cf       	rjmp	.-58     	; 0x2288 <ldexp+0x2e>
    22c2:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__fp_szero>
    22c6:	16 f0       	brts	.+4      	; 0x22cc <ldexp+0x72>
    22c8:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_mpack>
    22cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>
    22d0:	68 94       	set
    22d2:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>

000022d6 <log>:
    22d6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__fp_splitA>
    22da:	a8 f3       	brcs	.-22     	; 0x22c6 <ldexp+0x6c>
    22dc:	99 23       	and	r25, r25
    22de:	c1 f3       	breq	.-16     	; 0x22d0 <ldexp+0x76>
    22e0:	ae f3       	brts	.-22     	; 0x22cc <ldexp+0x72>
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	1f 93       	push	r17
    22e8:	0f 93       	push	r16
    22ea:	ff 92       	push	r15
    22ec:	c9 2f       	mov	r28, r25
    22ee:	dd 27       	eor	r29, r29
    22f0:	88 23       	and	r24, r24
    22f2:	2a f0       	brmi	.+10     	; 0x22fe <log+0x28>
    22f4:	21 97       	sbiw	r28, 0x01	; 1
    22f6:	66 0f       	add	r22, r22
    22f8:	77 1f       	adc	r23, r23
    22fa:	88 1f       	adc	r24, r24
    22fc:	da f7       	brpl	.-10     	; 0x22f4 <log+0x1e>
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f eb       	ldi	r21, 0xBF	; 191
    2306:	9f e3       	ldi	r25, 0x3F	; 63
    2308:	88 39       	cpi	r24, 0x98	; 152
    230a:	20 f0       	brcs	.+8      	; 0x2314 <log+0x3e>
    230c:	80 3e       	cpi	r24, 0xE0	; 224
    230e:	38 f0       	brcs	.+14     	; 0x231e <log+0x48>
    2310:	21 96       	adiw	r28, 0x01	; 1
    2312:	8f 77       	andi	r24, 0x7F	; 127
    2314:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    2318:	e0 e9       	ldi	r30, 0x90	; 144
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <log+0x50>
    231e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    2322:	ed eb       	ldi	r30, 0xBD	; 189
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__fp_powser>
    232a:	8b 01       	movw	r16, r22
    232c:	be 01       	movw	r22, r28
    232e:	ec 01       	movw	r28, r24
    2330:	fb 2e       	mov	r15, r27
    2332:	6f 57       	subi	r22, 0x7F	; 127
    2334:	71 09       	sbc	r23, r1
    2336:	75 95       	asr	r23
    2338:	77 1f       	adc	r23, r23
    233a:	88 0b       	sbc	r24, r24
    233c:	99 0b       	sbc	r25, r25
    233e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatsisf>
    2342:	28 e1       	ldi	r18, 0x18	; 24
    2344:	32 e7       	ldi	r19, 0x72	; 114
    2346:	41 e3       	ldi	r20, 0x31	; 49
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3x>
    234e:	af 2d       	mov	r26, r15
    2350:	98 01       	movw	r18, r16
    2352:	ae 01       	movw	r20, r28
    2354:	ff 90       	pop	r15
    2356:	0f 91       	pop	r16
    2358:	1f 91       	pop	r17
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    2362:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__fp_round>

00002366 <modf>:
    2366:	fa 01       	movw	r30, r20
    2368:	dc 01       	movw	r26, r24
    236a:	aa 0f       	add	r26, r26
    236c:	bb 1f       	adc	r27, r27
    236e:	9b 01       	movw	r18, r22
    2370:	ac 01       	movw	r20, r24
    2372:	bf 57       	subi	r27, 0x7F	; 127
    2374:	28 f4       	brcc	.+10     	; 0x2380 <modf+0x1a>
    2376:	22 27       	eor	r18, r18
    2378:	33 27       	eor	r19, r19
    237a:	44 27       	eor	r20, r20
    237c:	50 78       	andi	r21, 0x80	; 128
    237e:	20 c0       	rjmp	.+64     	; 0x23c0 <modf+0x5a>
    2380:	b7 51       	subi	r27, 0x17	; 23
    2382:	90 f4       	brcc	.+36     	; 0x23a8 <modf+0x42>
    2384:	ab 2f       	mov	r26, r27
    2386:	00 24       	eor	r0, r0
    2388:	46 95       	lsr	r20
    238a:	37 95       	ror	r19
    238c:	27 95       	ror	r18
    238e:	01 1c       	adc	r0, r1
    2390:	a3 95       	inc	r26
    2392:	d2 f3       	brmi	.-12     	; 0x2388 <modf+0x22>
    2394:	00 20       	and	r0, r0
    2396:	71 f0       	breq	.+28     	; 0x23b4 <modf+0x4e>
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	44 1f       	adc	r20, r20
    239e:	b3 95       	inc	r27
    23a0:	da f3       	brmi	.-10     	; 0x2398 <modf+0x32>
    23a2:	0e d0       	rcall	.+28     	; 0x23c0 <modf+0x5a>
    23a4:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__subsf3>
    23a8:	61 30       	cpi	r22, 0x01	; 1
    23aa:	71 05       	cpc	r23, r1
    23ac:	a0 e8       	ldi	r26, 0x80	; 128
    23ae:	8a 07       	cpc	r24, r26
    23b0:	b9 46       	sbci	r27, 0x69	; 105
    23b2:	30 f4       	brcc	.+12     	; 0x23c0 <modf+0x5a>
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	66 27       	eor	r22, r22
    23ba:	77 27       	eor	r23, r23
    23bc:	88 27       	eor	r24, r24
    23be:	90 78       	andi	r25, 0x80	; 128
    23c0:	30 96       	adiw	r30, 0x00	; 0
    23c2:	21 f0       	breq	.+8      	; 0x23cc <modf+0x66>
    23c4:	20 83       	st	Z, r18
    23c6:	31 83       	std	Z+1, r19	; 0x01
    23c8:	42 83       	std	Z+2, r20	; 0x02
    23ca:	53 83       	std	Z+3, r21	; 0x03
    23cc:	08 95       	ret

000023ce <__fp_mpack>:
    23ce:	9f 3f       	cpi	r25, 0xFF	; 255
    23d0:	31 f0       	breq	.+12     	; 0x23de <__fp_mpack_finite+0xc>

000023d2 <__fp_mpack_finite>:
    23d2:	91 50       	subi	r25, 0x01	; 1
    23d4:	20 f4       	brcc	.+8      	; 0x23de <__fp_mpack_finite+0xc>
    23d6:	87 95       	ror	r24
    23d8:	77 95       	ror	r23
    23da:	67 95       	ror	r22
    23dc:	b7 95       	ror	r27
    23de:	88 0f       	add	r24, r24
    23e0:	91 1d       	adc	r25, r1
    23e2:	96 95       	lsr	r25
    23e4:	87 95       	ror	r24
    23e6:	97 f9       	bld	r25, 7
    23e8:	08 95       	ret

000023ea <__mulsi3>:
    23ea:	db 01       	movw	r26, r22
    23ec:	8f 93       	push	r24
    23ee:	9f 93       	push	r25
    23f0:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__muluhisi3>
    23f4:	bf 91       	pop	r27
    23f6:	af 91       	pop	r26
    23f8:	a2 9f       	mul	r26, r18
    23fa:	80 0d       	add	r24, r0
    23fc:	91 1d       	adc	r25, r1
    23fe:	a3 9f       	mul	r26, r19
    2400:	90 0d       	add	r25, r0
    2402:	b2 9f       	mul	r27, r18
    2404:	90 0d       	add	r25, r0
    2406:	11 24       	eor	r1, r1
    2408:	08 95       	ret

0000240a <__divmodhi4>:
    240a:	97 fb       	bst	r25, 7
    240c:	07 2e       	mov	r0, r23
    240e:	16 f4       	brtc	.+4      	; 0x2414 <__divmodhi4+0xa>
    2410:	00 94       	com	r0
    2412:	07 d0       	rcall	.+14     	; 0x2422 <__divmodhi4_neg1>
    2414:	77 fd       	sbrc	r23, 7
    2416:	09 d0       	rcall	.+18     	; 0x242a <__divmodhi4_neg2>
    2418:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__udivmodhi4>
    241c:	07 fc       	sbrc	r0, 7
    241e:	05 d0       	rcall	.+10     	; 0x242a <__divmodhi4_neg2>
    2420:	3e f4       	brtc	.+14     	; 0x2430 <__divmodhi4_exit>

00002422 <__divmodhi4_neg1>:
    2422:	90 95       	com	r25
    2424:	81 95       	neg	r24
    2426:	9f 4f       	sbci	r25, 0xFF	; 255
    2428:	08 95       	ret

0000242a <__divmodhi4_neg2>:
    242a:	70 95       	com	r23
    242c:	61 95       	neg	r22
    242e:	7f 4f       	sbci	r23, 0xFF	; 255

00002430 <__divmodhi4_exit>:
    2430:	08 95       	ret

00002432 <__udivmodsi4>:
    2432:	a1 e2       	ldi	r26, 0x21	; 33
    2434:	1a 2e       	mov	r1, r26
    2436:	aa 1b       	sub	r26, r26
    2438:	bb 1b       	sub	r27, r27
    243a:	fd 01       	movw	r30, r26
    243c:	0d c0       	rjmp	.+26     	; 0x2458 <__udivmodsi4_ep>

0000243e <__udivmodsi4_loop>:
    243e:	aa 1f       	adc	r26, r26
    2440:	bb 1f       	adc	r27, r27
    2442:	ee 1f       	adc	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	a2 17       	cp	r26, r18
    2448:	b3 07       	cpc	r27, r19
    244a:	e4 07       	cpc	r30, r20
    244c:	f5 07       	cpc	r31, r21
    244e:	20 f0       	brcs	.+8      	; 0x2458 <__udivmodsi4_ep>
    2450:	a2 1b       	sub	r26, r18
    2452:	b3 0b       	sbc	r27, r19
    2454:	e4 0b       	sbc	r30, r20
    2456:	f5 0b       	sbc	r31, r21

00002458 <__udivmodsi4_ep>:
    2458:	66 1f       	adc	r22, r22
    245a:	77 1f       	adc	r23, r23
    245c:	88 1f       	adc	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	1a 94       	dec	r1
    2462:	69 f7       	brne	.-38     	; 0x243e <__udivmodsi4_loop>
    2464:	60 95       	com	r22
    2466:	70 95       	com	r23
    2468:	80 95       	com	r24
    246a:	90 95       	com	r25
    246c:	9b 01       	movw	r18, r22
    246e:	ac 01       	movw	r20, r24
    2470:	bd 01       	movw	r22, r26
    2472:	cf 01       	movw	r24, r30
    2474:	08 95       	ret

00002476 <__divmodsi4>:
    2476:	05 2e       	mov	r0, r21
    2478:	97 fb       	bst	r25, 7
    247a:	1e f4       	brtc	.+6      	; 0x2482 <__divmodsi4+0xc>
    247c:	00 94       	com	r0
    247e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__negsi2>
    2482:	57 fd       	sbrc	r21, 7
    2484:	07 d0       	rcall	.+14     	; 0x2494 <__divmodsi4_neg2>
    2486:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodsi4>
    248a:	07 fc       	sbrc	r0, 7
    248c:	03 d0       	rcall	.+6      	; 0x2494 <__divmodsi4_neg2>
    248e:	4e f4       	brtc	.+18     	; 0x24a2 <__divmodsi4_exit>
    2490:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__negsi2>

00002494 <__divmodsi4_neg2>:
    2494:	50 95       	com	r21
    2496:	40 95       	com	r20
    2498:	30 95       	com	r19
    249a:	21 95       	neg	r18
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	4f 4f       	sbci	r20, 0xFF	; 255
    24a0:	5f 4f       	sbci	r21, 0xFF	; 255

000024a2 <__divmodsi4_exit>:
    24a2:	08 95       	ret

000024a4 <__negsi2>:
    24a4:	90 95       	com	r25
    24a6:	80 95       	com	r24
    24a8:	70 95       	com	r23
    24aa:	61 95       	neg	r22
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	08 95       	ret

000024b4 <__umulhisi3>:
    24b4:	a2 9f       	mul	r26, r18
    24b6:	b0 01       	movw	r22, r0
    24b8:	b3 9f       	mul	r27, r19
    24ba:	c0 01       	movw	r24, r0
    24bc:	a3 9f       	mul	r26, r19
    24be:	70 0d       	add	r23, r0
    24c0:	81 1d       	adc	r24, r1
    24c2:	11 24       	eor	r1, r1
    24c4:	91 1d       	adc	r25, r1
    24c6:	b2 9f       	mul	r27, r18
    24c8:	70 0d       	add	r23, r0
    24ca:	81 1d       	adc	r24, r1
    24cc:	11 24       	eor	r1, r1
    24ce:	91 1d       	adc	r25, r1
    24d0:	08 95       	ret

000024d2 <__muluhisi3>:
    24d2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__umulhisi3>
    24d6:	a5 9f       	mul	r26, r21
    24d8:	90 0d       	add	r25, r0
    24da:	b4 9f       	mul	r27, r20
    24dc:	90 0d       	add	r25, r0
    24de:	a4 9f       	mul	r26, r20
    24e0:	80 0d       	add	r24, r0
    24e2:	91 1d       	adc	r25, r1
    24e4:	11 24       	eor	r1, r1
    24e6:	08 95       	ret

000024e8 <__mulshisi3>:
    24e8:	b7 ff       	sbrs	r27, 7
    24ea:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__muluhisi3>

000024ee <__mulohisi3>:
    24ee:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__muluhisi3>
    24f2:	82 1b       	sub	r24, r18
    24f4:	93 0b       	sbc	r25, r19
    24f6:	08 95       	ret

000024f8 <__udivmodhi4>:
    24f8:	aa 1b       	sub	r26, r26
    24fa:	bb 1b       	sub	r27, r27
    24fc:	51 e1       	ldi	r21, 0x11	; 17
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <__udivmodhi4_ep>

00002500 <__udivmodhi4_loop>:
    2500:	aa 1f       	adc	r26, r26
    2502:	bb 1f       	adc	r27, r27
    2504:	a6 17       	cp	r26, r22
    2506:	b7 07       	cpc	r27, r23
    2508:	10 f0       	brcs	.+4      	; 0x250e <__udivmodhi4_ep>
    250a:	a6 1b       	sub	r26, r22
    250c:	b7 0b       	sbc	r27, r23

0000250e <__udivmodhi4_ep>:
    250e:	88 1f       	adc	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	5a 95       	dec	r21
    2514:	a9 f7       	brne	.-22     	; 0x2500 <__udivmodhi4_loop>
    2516:	80 95       	com	r24
    2518:	90 95       	com	r25
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	08 95       	ret

00002520 <strcat>:
    2520:	fb 01       	movw	r30, r22
    2522:	dc 01       	movw	r26, r24
    2524:	0d 90       	ld	r0, X+
    2526:	00 20       	and	r0, r0
    2528:	e9 f7       	brne	.-6      	; 0x2524 <strcat+0x4>
    252a:	11 97       	sbiw	r26, 0x01	; 1
    252c:	01 90       	ld	r0, Z+
    252e:	0d 92       	st	X+, r0
    2530:	00 20       	and	r0, r0
    2532:	e1 f7       	brne	.-8      	; 0x252c <strcat+0xc>
    2534:	08 95       	ret

00002536 <sprintf>:
    2536:	ae e0       	ldi	r26, 0x0E	; 14
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e1 ea       	ldi	r30, 0xA1	; 161
    253c:	f2 e1       	ldi	r31, 0x12	; 18
    253e:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__+0x1c>
    2542:	0d 89       	ldd	r16, Y+21	; 0x15
    2544:	1e 89       	ldd	r17, Y+22	; 0x16
    2546:	86 e0       	ldi	r24, 0x06	; 6
    2548:	8c 83       	std	Y+4, r24	; 0x04
    254a:	1a 83       	std	Y+2, r17	; 0x02
    254c:	09 83       	std	Y+1, r16	; 0x01
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	9f e7       	ldi	r25, 0x7F	; 127
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	ae 01       	movw	r20, r28
    2558:	47 5e       	subi	r20, 0xE7	; 231
    255a:	5f 4f       	sbci	r21, 0xFF	; 255
    255c:	6f 89       	ldd	r22, Y+23	; 0x17
    255e:	78 8d       	ldd	r23, Y+24	; 0x18
    2560:	ce 01       	movw	r24, r28
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	0e 94 bd 12 	call	0x257a	; 0x257a <vfprintf>
    2568:	ef 81       	ldd	r30, Y+7	; 0x07
    256a:	f8 85       	ldd	r31, Y+8	; 0x08
    256c:	e0 0f       	add	r30, r16
    256e:	f1 1f       	adc	r31, r17
    2570:	10 82       	st	Z, r1
    2572:	2e 96       	adiw	r28, 0x0e	; 14
    2574:	e4 e0       	ldi	r30, 0x04	; 4
    2576:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__+0x1c>

0000257a <vfprintf>:
    257a:	ab e0       	ldi	r26, 0x0B	; 11
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e3 ec       	ldi	r30, 0xC3	; 195
    2580:	f2 e1       	ldi	r31, 0x12	; 18
    2582:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__>
    2586:	6c 01       	movw	r12, r24
    2588:	7b 01       	movw	r14, r22
    258a:	8a 01       	movw	r16, r20
    258c:	fc 01       	movw	r30, r24
    258e:	17 82       	std	Z+7, r1	; 0x07
    2590:	16 82       	std	Z+6, r1	; 0x06
    2592:	83 81       	ldd	r24, Z+3	; 0x03
    2594:	81 ff       	sbrs	r24, 1
    2596:	cc c1       	rjmp	.+920    	; 0x2930 <vfprintf+0x3b6>
    2598:	ce 01       	movw	r24, r28
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	3c 01       	movw	r6, r24
    259e:	f6 01       	movw	r30, r12
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	f7 01       	movw	r30, r14
    25a4:	93 fd       	sbrc	r25, 3
    25a6:	85 91       	lpm	r24, Z+
    25a8:	93 ff       	sbrs	r25, 3
    25aa:	81 91       	ld	r24, Z+
    25ac:	7f 01       	movw	r14, r30
    25ae:	88 23       	and	r24, r24
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <vfprintf+0x3a>
    25b2:	ba c1       	rjmp	.+884    	; 0x2928 <vfprintf+0x3ae>
    25b4:	85 32       	cpi	r24, 0x25	; 37
    25b6:	39 f4       	brne	.+14     	; 0x25c6 <vfprintf+0x4c>
    25b8:	93 fd       	sbrc	r25, 3
    25ba:	85 91       	lpm	r24, Z+
    25bc:	93 ff       	sbrs	r25, 3
    25be:	81 91       	ld	r24, Z+
    25c0:	7f 01       	movw	r14, r30
    25c2:	85 32       	cpi	r24, 0x25	; 37
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <vfprintf+0x56>
    25c6:	b6 01       	movw	r22, r12
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    25ce:	e7 cf       	rjmp	.-50     	; 0x259e <vfprintf+0x24>
    25d0:	91 2c       	mov	r9, r1
    25d2:	21 2c       	mov	r2, r1
    25d4:	31 2c       	mov	r3, r1
    25d6:	ff e1       	ldi	r31, 0x1F	; 31
    25d8:	f3 15       	cp	r31, r3
    25da:	d8 f0       	brcs	.+54     	; 0x2612 <vfprintf+0x98>
    25dc:	8b 32       	cpi	r24, 0x2B	; 43
    25de:	79 f0       	breq	.+30     	; 0x25fe <vfprintf+0x84>
    25e0:	38 f4       	brcc	.+14     	; 0x25f0 <vfprintf+0x76>
    25e2:	80 32       	cpi	r24, 0x20	; 32
    25e4:	79 f0       	breq	.+30     	; 0x2604 <vfprintf+0x8a>
    25e6:	83 32       	cpi	r24, 0x23	; 35
    25e8:	a1 f4       	brne	.+40     	; 0x2612 <vfprintf+0x98>
    25ea:	23 2d       	mov	r18, r3
    25ec:	20 61       	ori	r18, 0x10	; 16
    25ee:	1d c0       	rjmp	.+58     	; 0x262a <vfprintf+0xb0>
    25f0:	8d 32       	cpi	r24, 0x2D	; 45
    25f2:	61 f0       	breq	.+24     	; 0x260c <vfprintf+0x92>
    25f4:	80 33       	cpi	r24, 0x30	; 48
    25f6:	69 f4       	brne	.+26     	; 0x2612 <vfprintf+0x98>
    25f8:	23 2d       	mov	r18, r3
    25fa:	21 60       	ori	r18, 0x01	; 1
    25fc:	16 c0       	rjmp	.+44     	; 0x262a <vfprintf+0xb0>
    25fe:	83 2d       	mov	r24, r3
    2600:	82 60       	ori	r24, 0x02	; 2
    2602:	38 2e       	mov	r3, r24
    2604:	e3 2d       	mov	r30, r3
    2606:	e4 60       	ori	r30, 0x04	; 4
    2608:	3e 2e       	mov	r3, r30
    260a:	2a c0       	rjmp	.+84     	; 0x2660 <vfprintf+0xe6>
    260c:	f3 2d       	mov	r31, r3
    260e:	f8 60       	ori	r31, 0x08	; 8
    2610:	1d c0       	rjmp	.+58     	; 0x264c <vfprintf+0xd2>
    2612:	37 fc       	sbrc	r3, 7
    2614:	2d c0       	rjmp	.+90     	; 0x2670 <vfprintf+0xf6>
    2616:	20 ed       	ldi	r18, 0xD0	; 208
    2618:	28 0f       	add	r18, r24
    261a:	2a 30       	cpi	r18, 0x0A	; 10
    261c:	40 f0       	brcs	.+16     	; 0x262e <vfprintf+0xb4>
    261e:	8e 32       	cpi	r24, 0x2E	; 46
    2620:	b9 f4       	brne	.+46     	; 0x2650 <vfprintf+0xd6>
    2622:	36 fc       	sbrc	r3, 6
    2624:	81 c1       	rjmp	.+770    	; 0x2928 <vfprintf+0x3ae>
    2626:	23 2d       	mov	r18, r3
    2628:	20 64       	ori	r18, 0x40	; 64
    262a:	32 2e       	mov	r3, r18
    262c:	19 c0       	rjmp	.+50     	; 0x2660 <vfprintf+0xe6>
    262e:	36 fe       	sbrs	r3, 6
    2630:	06 c0       	rjmp	.+12     	; 0x263e <vfprintf+0xc4>
    2632:	8a e0       	ldi	r24, 0x0A	; 10
    2634:	98 9e       	mul	r9, r24
    2636:	20 0d       	add	r18, r0
    2638:	11 24       	eor	r1, r1
    263a:	92 2e       	mov	r9, r18
    263c:	11 c0       	rjmp	.+34     	; 0x2660 <vfprintf+0xe6>
    263e:	ea e0       	ldi	r30, 0x0A	; 10
    2640:	2e 9e       	mul	r2, r30
    2642:	20 0d       	add	r18, r0
    2644:	11 24       	eor	r1, r1
    2646:	22 2e       	mov	r2, r18
    2648:	f3 2d       	mov	r31, r3
    264a:	f0 62       	ori	r31, 0x20	; 32
    264c:	3f 2e       	mov	r3, r31
    264e:	08 c0       	rjmp	.+16     	; 0x2660 <vfprintf+0xe6>
    2650:	8c 36       	cpi	r24, 0x6C	; 108
    2652:	21 f4       	brne	.+8      	; 0x265c <vfprintf+0xe2>
    2654:	83 2d       	mov	r24, r3
    2656:	80 68       	ori	r24, 0x80	; 128
    2658:	38 2e       	mov	r3, r24
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <vfprintf+0xe6>
    265c:	88 36       	cpi	r24, 0x68	; 104
    265e:	41 f4       	brne	.+16     	; 0x2670 <vfprintf+0xf6>
    2660:	f7 01       	movw	r30, r14
    2662:	93 fd       	sbrc	r25, 3
    2664:	85 91       	lpm	r24, Z+
    2666:	93 ff       	sbrs	r25, 3
    2668:	81 91       	ld	r24, Z+
    266a:	7f 01       	movw	r14, r30
    266c:	81 11       	cpse	r24, r1
    266e:	b3 cf       	rjmp	.-154    	; 0x25d6 <vfprintf+0x5c>
    2670:	98 2f       	mov	r25, r24
    2672:	9f 7d       	andi	r25, 0xDF	; 223
    2674:	95 54       	subi	r25, 0x45	; 69
    2676:	93 30       	cpi	r25, 0x03	; 3
    2678:	28 f4       	brcc	.+10     	; 0x2684 <vfprintf+0x10a>
    267a:	0c 5f       	subi	r16, 0xFC	; 252
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
    267e:	9f e3       	ldi	r25, 0x3F	; 63
    2680:	99 83       	std	Y+1, r25	; 0x01
    2682:	0d c0       	rjmp	.+26     	; 0x269e <vfprintf+0x124>
    2684:	83 36       	cpi	r24, 0x63	; 99
    2686:	31 f0       	breq	.+12     	; 0x2694 <vfprintf+0x11a>
    2688:	83 37       	cpi	r24, 0x73	; 115
    268a:	71 f0       	breq	.+28     	; 0x26a8 <vfprintf+0x12e>
    268c:	83 35       	cpi	r24, 0x53	; 83
    268e:	09 f0       	breq	.+2      	; 0x2692 <vfprintf+0x118>
    2690:	59 c0       	rjmp	.+178    	; 0x2744 <vfprintf+0x1ca>
    2692:	21 c0       	rjmp	.+66     	; 0x26d6 <vfprintf+0x15c>
    2694:	f8 01       	movw	r30, r16
    2696:	80 81       	ld	r24, Z
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	0e 5f       	subi	r16, 0xFE	; 254
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	88 24       	eor	r8, r8
    26a0:	83 94       	inc	r8
    26a2:	91 2c       	mov	r9, r1
    26a4:	53 01       	movw	r10, r6
    26a6:	13 c0       	rjmp	.+38     	; 0x26ce <vfprintf+0x154>
    26a8:	28 01       	movw	r4, r16
    26aa:	f2 e0       	ldi	r31, 0x02	; 2
    26ac:	4f 0e       	add	r4, r31
    26ae:	51 1c       	adc	r5, r1
    26b0:	f8 01       	movw	r30, r16
    26b2:	a0 80       	ld	r10, Z
    26b4:	b1 80       	ldd	r11, Z+1	; 0x01
    26b6:	36 fe       	sbrs	r3, 6
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <vfprintf+0x146>
    26ba:	69 2d       	mov	r22, r9
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <vfprintf+0x14a>
    26c0:	6f ef       	ldi	r22, 0xFF	; 255
    26c2:	7f ef       	ldi	r23, 0xFF	; 255
    26c4:	c5 01       	movw	r24, r10
    26c6:	0e 94 a9 14 	call	0x2952	; 0x2952 <strnlen>
    26ca:	4c 01       	movw	r8, r24
    26cc:	82 01       	movw	r16, r4
    26ce:	f3 2d       	mov	r31, r3
    26d0:	ff 77       	andi	r31, 0x7F	; 127
    26d2:	3f 2e       	mov	r3, r31
    26d4:	16 c0       	rjmp	.+44     	; 0x2702 <vfprintf+0x188>
    26d6:	28 01       	movw	r4, r16
    26d8:	22 e0       	ldi	r18, 0x02	; 2
    26da:	42 0e       	add	r4, r18
    26dc:	51 1c       	adc	r5, r1
    26de:	f8 01       	movw	r30, r16
    26e0:	a0 80       	ld	r10, Z
    26e2:	b1 80       	ldd	r11, Z+1	; 0x01
    26e4:	36 fe       	sbrs	r3, 6
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <vfprintf+0x174>
    26e8:	69 2d       	mov	r22, r9
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <vfprintf+0x178>
    26ee:	6f ef       	ldi	r22, 0xFF	; 255
    26f0:	7f ef       	ldi	r23, 0xFF	; 255
    26f2:	c5 01       	movw	r24, r10
    26f4:	0e 94 9e 14 	call	0x293c	; 0x293c <strnlen_P>
    26f8:	4c 01       	movw	r8, r24
    26fa:	f3 2d       	mov	r31, r3
    26fc:	f0 68       	ori	r31, 0x80	; 128
    26fe:	3f 2e       	mov	r3, r31
    2700:	82 01       	movw	r16, r4
    2702:	33 fc       	sbrc	r3, 3
    2704:	1b c0       	rjmp	.+54     	; 0x273c <vfprintf+0x1c2>
    2706:	82 2d       	mov	r24, r2
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	88 16       	cp	r8, r24
    270c:	99 06       	cpc	r9, r25
    270e:	b0 f4       	brcc	.+44     	; 0x273c <vfprintf+0x1c2>
    2710:	b6 01       	movw	r22, r12
    2712:	80 e2       	ldi	r24, 0x20	; 32
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    271a:	2a 94       	dec	r2
    271c:	f4 cf       	rjmp	.-24     	; 0x2706 <vfprintf+0x18c>
    271e:	f5 01       	movw	r30, r10
    2720:	37 fc       	sbrc	r3, 7
    2722:	85 91       	lpm	r24, Z+
    2724:	37 fe       	sbrs	r3, 7
    2726:	81 91       	ld	r24, Z+
    2728:	5f 01       	movw	r10, r30
    272a:	b6 01       	movw	r22, r12
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    2732:	21 10       	cpse	r2, r1
    2734:	2a 94       	dec	r2
    2736:	21 e0       	ldi	r18, 0x01	; 1
    2738:	82 1a       	sub	r8, r18
    273a:	91 08       	sbc	r9, r1
    273c:	81 14       	cp	r8, r1
    273e:	91 04       	cpc	r9, r1
    2740:	71 f7       	brne	.-36     	; 0x271e <vfprintf+0x1a4>
    2742:	e8 c0       	rjmp	.+464    	; 0x2914 <vfprintf+0x39a>
    2744:	84 36       	cpi	r24, 0x64	; 100
    2746:	11 f0       	breq	.+4      	; 0x274c <vfprintf+0x1d2>
    2748:	89 36       	cpi	r24, 0x69	; 105
    274a:	41 f5       	brne	.+80     	; 0x279c <vfprintf+0x222>
    274c:	f8 01       	movw	r30, r16
    274e:	37 fe       	sbrs	r3, 7
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <vfprintf+0x1e6>
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	0c 5f       	subi	r16, 0xFC	; 252
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	08 c0       	rjmp	.+16     	; 0x2770 <vfprintf+0x1f6>
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	07 2e       	mov	r0, r23
    2766:	00 0c       	add	r0, r0
    2768:	88 0b       	sbc	r24, r24
    276a:	99 0b       	sbc	r25, r25
    276c:	0e 5f       	subi	r16, 0xFE	; 254
    276e:	1f 4f       	sbci	r17, 0xFF	; 255
    2770:	f3 2d       	mov	r31, r3
    2772:	ff 76       	andi	r31, 0x6F	; 111
    2774:	3f 2e       	mov	r3, r31
    2776:	97 ff       	sbrs	r25, 7
    2778:	09 c0       	rjmp	.+18     	; 0x278c <vfprintf+0x212>
    277a:	90 95       	com	r25
    277c:	80 95       	com	r24
    277e:	70 95       	com	r23
    2780:	61 95       	neg	r22
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	8f 4f       	sbci	r24, 0xFF	; 255
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	f0 68       	ori	r31, 0x80	; 128
    278a:	3f 2e       	mov	r3, r31
    278c:	2a e0       	ldi	r18, 0x0A	; 10
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	a3 01       	movw	r20, r6
    2792:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__ultoa_invert>
    2796:	88 2e       	mov	r8, r24
    2798:	86 18       	sub	r8, r6
    279a:	45 c0       	rjmp	.+138    	; 0x2826 <vfprintf+0x2ac>
    279c:	85 37       	cpi	r24, 0x75	; 117
    279e:	31 f4       	brne	.+12     	; 0x27ac <vfprintf+0x232>
    27a0:	23 2d       	mov	r18, r3
    27a2:	2f 7e       	andi	r18, 0xEF	; 239
    27a4:	b2 2e       	mov	r11, r18
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	25 c0       	rjmp	.+74     	; 0x27f6 <vfprintf+0x27c>
    27ac:	93 2d       	mov	r25, r3
    27ae:	99 7f       	andi	r25, 0xF9	; 249
    27b0:	b9 2e       	mov	r11, r25
    27b2:	8f 36       	cpi	r24, 0x6F	; 111
    27b4:	c1 f0       	breq	.+48     	; 0x27e6 <vfprintf+0x26c>
    27b6:	18 f4       	brcc	.+6      	; 0x27be <vfprintf+0x244>
    27b8:	88 35       	cpi	r24, 0x58	; 88
    27ba:	79 f0       	breq	.+30     	; 0x27da <vfprintf+0x260>
    27bc:	b5 c0       	rjmp	.+362    	; 0x2928 <vfprintf+0x3ae>
    27be:	80 37       	cpi	r24, 0x70	; 112
    27c0:	19 f0       	breq	.+6      	; 0x27c8 <vfprintf+0x24e>
    27c2:	88 37       	cpi	r24, 0x78	; 120
    27c4:	21 f0       	breq	.+8      	; 0x27ce <vfprintf+0x254>
    27c6:	b0 c0       	rjmp	.+352    	; 0x2928 <vfprintf+0x3ae>
    27c8:	e9 2f       	mov	r30, r25
    27ca:	e0 61       	ori	r30, 0x10	; 16
    27cc:	be 2e       	mov	r11, r30
    27ce:	b4 fe       	sbrs	r11, 4
    27d0:	0d c0       	rjmp	.+26     	; 0x27ec <vfprintf+0x272>
    27d2:	fb 2d       	mov	r31, r11
    27d4:	f4 60       	ori	r31, 0x04	; 4
    27d6:	bf 2e       	mov	r11, r31
    27d8:	09 c0       	rjmp	.+18     	; 0x27ec <vfprintf+0x272>
    27da:	34 fe       	sbrs	r3, 4
    27dc:	0a c0       	rjmp	.+20     	; 0x27f2 <vfprintf+0x278>
    27de:	29 2f       	mov	r18, r25
    27e0:	26 60       	ori	r18, 0x06	; 6
    27e2:	b2 2e       	mov	r11, r18
    27e4:	06 c0       	rjmp	.+12     	; 0x27f2 <vfprintf+0x278>
    27e6:	28 e0       	ldi	r18, 0x08	; 8
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <vfprintf+0x27c>
    27ec:	20 e1       	ldi	r18, 0x10	; 16
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <vfprintf+0x27c>
    27f2:	20 e1       	ldi	r18, 0x10	; 16
    27f4:	32 e0       	ldi	r19, 0x02	; 2
    27f6:	f8 01       	movw	r30, r16
    27f8:	b7 fe       	sbrs	r11, 7
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <vfprintf+0x290>
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	0c 5f       	subi	r16, 0xFC	; 252
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	06 c0       	rjmp	.+12     	; 0x2816 <vfprintf+0x29c>
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 5f       	subi	r16, 0xFE	; 254
    2814:	1f 4f       	sbci	r17, 0xFF	; 255
    2816:	a3 01       	movw	r20, r6
    2818:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__ultoa_invert>
    281c:	88 2e       	mov	r8, r24
    281e:	86 18       	sub	r8, r6
    2820:	fb 2d       	mov	r31, r11
    2822:	ff 77       	andi	r31, 0x7F	; 127
    2824:	3f 2e       	mov	r3, r31
    2826:	36 fe       	sbrs	r3, 6
    2828:	0d c0       	rjmp	.+26     	; 0x2844 <vfprintf+0x2ca>
    282a:	23 2d       	mov	r18, r3
    282c:	2e 7f       	andi	r18, 0xFE	; 254
    282e:	a2 2e       	mov	r10, r18
    2830:	89 14       	cp	r8, r9
    2832:	58 f4       	brcc	.+22     	; 0x284a <vfprintf+0x2d0>
    2834:	34 fe       	sbrs	r3, 4
    2836:	0b c0       	rjmp	.+22     	; 0x284e <vfprintf+0x2d4>
    2838:	32 fc       	sbrc	r3, 2
    283a:	09 c0       	rjmp	.+18     	; 0x284e <vfprintf+0x2d4>
    283c:	83 2d       	mov	r24, r3
    283e:	8e 7e       	andi	r24, 0xEE	; 238
    2840:	a8 2e       	mov	r10, r24
    2842:	05 c0       	rjmp	.+10     	; 0x284e <vfprintf+0x2d4>
    2844:	b8 2c       	mov	r11, r8
    2846:	a3 2c       	mov	r10, r3
    2848:	03 c0       	rjmp	.+6      	; 0x2850 <vfprintf+0x2d6>
    284a:	b8 2c       	mov	r11, r8
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <vfprintf+0x2d6>
    284e:	b9 2c       	mov	r11, r9
    2850:	a4 fe       	sbrs	r10, 4
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <vfprintf+0x2f8>
    2854:	fe 01       	movw	r30, r28
    2856:	e8 0d       	add	r30, r8
    2858:	f1 1d       	adc	r31, r1
    285a:	80 81       	ld	r24, Z
    285c:	80 33       	cpi	r24, 0x30	; 48
    285e:	21 f4       	brne	.+8      	; 0x2868 <vfprintf+0x2ee>
    2860:	9a 2d       	mov	r25, r10
    2862:	99 7e       	andi	r25, 0xE9	; 233
    2864:	a9 2e       	mov	r10, r25
    2866:	09 c0       	rjmp	.+18     	; 0x287a <vfprintf+0x300>
    2868:	a2 fe       	sbrs	r10, 2
    286a:	06 c0       	rjmp	.+12     	; 0x2878 <vfprintf+0x2fe>
    286c:	b3 94       	inc	r11
    286e:	b3 94       	inc	r11
    2870:	04 c0       	rjmp	.+8      	; 0x287a <vfprintf+0x300>
    2872:	8a 2d       	mov	r24, r10
    2874:	86 78       	andi	r24, 0x86	; 134
    2876:	09 f0       	breq	.+2      	; 0x287a <vfprintf+0x300>
    2878:	b3 94       	inc	r11
    287a:	a3 fc       	sbrc	r10, 3
    287c:	11 c0       	rjmp	.+34     	; 0x28a0 <vfprintf+0x326>
    287e:	a0 fe       	sbrs	r10, 0
    2880:	06 c0       	rjmp	.+12     	; 0x288e <vfprintf+0x314>
    2882:	b2 14       	cp	r11, r2
    2884:	88 f4       	brcc	.+34     	; 0x28a8 <vfprintf+0x32e>
    2886:	28 0c       	add	r2, r8
    2888:	92 2c       	mov	r9, r2
    288a:	9b 18       	sub	r9, r11
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <vfprintf+0x330>
    288e:	b2 14       	cp	r11, r2
    2890:	60 f4       	brcc	.+24     	; 0x28aa <vfprintf+0x330>
    2892:	b6 01       	movw	r22, r12
    2894:	80 e2       	ldi	r24, 0x20	; 32
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    289c:	b3 94       	inc	r11
    289e:	f7 cf       	rjmp	.-18     	; 0x288e <vfprintf+0x314>
    28a0:	b2 14       	cp	r11, r2
    28a2:	18 f4       	brcc	.+6      	; 0x28aa <vfprintf+0x330>
    28a4:	2b 18       	sub	r2, r11
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <vfprintf+0x332>
    28a8:	98 2c       	mov	r9, r8
    28aa:	21 2c       	mov	r2, r1
    28ac:	a4 fe       	sbrs	r10, 4
    28ae:	10 c0       	rjmp	.+32     	; 0x28d0 <vfprintf+0x356>
    28b0:	b6 01       	movw	r22, r12
    28b2:	80 e3       	ldi	r24, 0x30	; 48
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    28ba:	a2 fe       	sbrs	r10, 2
    28bc:	17 c0       	rjmp	.+46     	; 0x28ec <vfprintf+0x372>
    28be:	a1 fc       	sbrc	r10, 1
    28c0:	03 c0       	rjmp	.+6      	; 0x28c8 <vfprintf+0x34e>
    28c2:	88 e7       	ldi	r24, 0x78	; 120
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <vfprintf+0x352>
    28c8:	88 e5       	ldi	r24, 0x58	; 88
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	b6 01       	movw	r22, r12
    28ce:	0c c0       	rjmp	.+24     	; 0x28e8 <vfprintf+0x36e>
    28d0:	8a 2d       	mov	r24, r10
    28d2:	86 78       	andi	r24, 0x86	; 134
    28d4:	59 f0       	breq	.+22     	; 0x28ec <vfprintf+0x372>
    28d6:	a1 fe       	sbrs	r10, 1
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x364>
    28da:	8b e2       	ldi	r24, 0x2B	; 43
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <vfprintf+0x366>
    28de:	80 e2       	ldi	r24, 0x20	; 32
    28e0:	a7 fc       	sbrc	r10, 7
    28e2:	8d e2       	ldi	r24, 0x2D	; 45
    28e4:	b6 01       	movw	r22, r12
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    28ec:	89 14       	cp	r8, r9
    28ee:	38 f4       	brcc	.+14     	; 0x28fe <vfprintf+0x384>
    28f0:	b6 01       	movw	r22, r12
    28f2:	80 e3       	ldi	r24, 0x30	; 48
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    28fa:	9a 94       	dec	r9
    28fc:	f7 cf       	rjmp	.-18     	; 0x28ec <vfprintf+0x372>
    28fe:	8a 94       	dec	r8
    2900:	f3 01       	movw	r30, r6
    2902:	e8 0d       	add	r30, r8
    2904:	f1 1d       	adc	r31, r1
    2906:	80 81       	ld	r24, Z
    2908:	b6 01       	movw	r22, r12
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    2910:	81 10       	cpse	r8, r1
    2912:	f5 cf       	rjmp	.-22     	; 0x28fe <vfprintf+0x384>
    2914:	22 20       	and	r2, r2
    2916:	09 f4       	brne	.+2      	; 0x291a <vfprintf+0x3a0>
    2918:	42 ce       	rjmp	.-892    	; 0x259e <vfprintf+0x24>
    291a:	b6 01       	movw	r22, r12
    291c:	80 e2       	ldi	r24, 0x20	; 32
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
    2924:	2a 94       	dec	r2
    2926:	f6 cf       	rjmp	.-20     	; 0x2914 <vfprintf+0x39a>
    2928:	f6 01       	movw	r30, r12
    292a:	86 81       	ldd	r24, Z+6	; 0x06
    292c:	97 81       	ldd	r25, Z+7	; 0x07
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <vfprintf+0x3ba>
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	9f ef       	ldi	r25, 0xFF	; 255
    2934:	2b 96       	adiw	r28, 0x0b	; 11
    2936:	e2 e1       	ldi	r30, 0x12	; 18
    2938:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__>

0000293c <strnlen_P>:
    293c:	fc 01       	movw	r30, r24
    293e:	05 90       	lpm	r0, Z+
    2940:	61 50       	subi	r22, 0x01	; 1
    2942:	70 40       	sbci	r23, 0x00	; 0
    2944:	01 10       	cpse	r0, r1
    2946:	d8 f7       	brcc	.-10     	; 0x293e <strnlen_P+0x2>
    2948:	80 95       	com	r24
    294a:	90 95       	com	r25
    294c:	8e 0f       	add	r24, r30
    294e:	9f 1f       	adc	r25, r31
    2950:	08 95       	ret

00002952 <strnlen>:
    2952:	fc 01       	movw	r30, r24
    2954:	61 50       	subi	r22, 0x01	; 1
    2956:	70 40       	sbci	r23, 0x00	; 0
    2958:	01 90       	ld	r0, Z+
    295a:	01 10       	cpse	r0, r1
    295c:	d8 f7       	brcc	.-10     	; 0x2954 <strnlen+0x2>
    295e:	80 95       	com	r24
    2960:	90 95       	com	r25
    2962:	8e 0f       	add	r24, r30
    2964:	9f 1f       	adc	r25, r31
    2966:	08 95       	ret

00002968 <fputc>:
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	fb 01       	movw	r30, r22
    2972:	23 81       	ldd	r18, Z+3	; 0x03
    2974:	21 fd       	sbrc	r18, 1
    2976:	03 c0       	rjmp	.+6      	; 0x297e <fputc+0x16>
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	2c c0       	rjmp	.+88     	; 0x29d6 <fputc+0x6e>
    297e:	22 ff       	sbrs	r18, 2
    2980:	16 c0       	rjmp	.+44     	; 0x29ae <fputc+0x46>
    2982:	46 81       	ldd	r20, Z+6	; 0x06
    2984:	57 81       	ldd	r21, Z+7	; 0x07
    2986:	24 81       	ldd	r18, Z+4	; 0x04
    2988:	35 81       	ldd	r19, Z+5	; 0x05
    298a:	42 17       	cp	r20, r18
    298c:	53 07       	cpc	r21, r19
    298e:	44 f4       	brge	.+16     	; 0x29a0 <fputc+0x38>
    2990:	a0 81       	ld	r26, Z
    2992:	b1 81       	ldd	r27, Z+1	; 0x01
    2994:	9d 01       	movw	r18, r26
    2996:	2f 5f       	subi	r18, 0xFF	; 255
    2998:	3f 4f       	sbci	r19, 0xFF	; 255
    299a:	31 83       	std	Z+1, r19	; 0x01
    299c:	20 83       	st	Z, r18
    299e:	8c 93       	st	X, r24
    29a0:	26 81       	ldd	r18, Z+6	; 0x06
    29a2:	37 81       	ldd	r19, Z+7	; 0x07
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	37 83       	std	Z+7, r19	; 0x07
    29aa:	26 83       	std	Z+6, r18	; 0x06
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <fputc+0x6e>
    29ae:	8b 01       	movw	r16, r22
    29b0:	ec 01       	movw	r28, r24
    29b2:	fb 01       	movw	r30, r22
    29b4:	00 84       	ldd	r0, Z+8	; 0x08
    29b6:	f1 85       	ldd	r31, Z+9	; 0x09
    29b8:	e0 2d       	mov	r30, r0
    29ba:	09 95       	icall
    29bc:	89 2b       	or	r24, r25
    29be:	e1 f6       	brne	.-72     	; 0x2978 <fputc+0x10>
    29c0:	d8 01       	movw	r26, r16
    29c2:	16 96       	adiw	r26, 0x06	; 6
    29c4:	8d 91       	ld	r24, X+
    29c6:	9c 91       	ld	r25, X
    29c8:	17 97       	sbiw	r26, 0x07	; 7
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	17 96       	adiw	r26, 0x07	; 7
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
    29d2:	16 97       	sbiw	r26, 0x06	; 6
    29d4:	ce 01       	movw	r24, r28
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	08 95       	ret

000029e0 <__ultoa_invert>:
    29e0:	fa 01       	movw	r30, r20
    29e2:	aa 27       	eor	r26, r26
    29e4:	28 30       	cpi	r18, 0x08	; 8
    29e6:	51 f1       	breq	.+84     	; 0x2a3c <__ultoa_invert+0x5c>
    29e8:	20 31       	cpi	r18, 0x10	; 16
    29ea:	81 f1       	breq	.+96     	; 0x2a4c <__ultoa_invert+0x6c>
    29ec:	e8 94       	clt
    29ee:	6f 93       	push	r22
    29f0:	6e 7f       	andi	r22, 0xFE	; 254
    29f2:	6e 5f       	subi	r22, 0xFE	; 254
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255
    29f6:	8f 4f       	sbci	r24, 0xFF	; 255
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	af 4f       	sbci	r26, 0xFF	; 255
    29fc:	b1 e0       	ldi	r27, 0x01	; 1
    29fe:	3e d0       	rcall	.+124    	; 0x2a7c <__ultoa_invert+0x9c>
    2a00:	b4 e0       	ldi	r27, 0x04	; 4
    2a02:	3c d0       	rcall	.+120    	; 0x2a7c <__ultoa_invert+0x9c>
    2a04:	67 0f       	add	r22, r23
    2a06:	78 1f       	adc	r23, r24
    2a08:	89 1f       	adc	r24, r25
    2a0a:	9a 1f       	adc	r25, r26
    2a0c:	a1 1d       	adc	r26, r1
    2a0e:	68 0f       	add	r22, r24
    2a10:	79 1f       	adc	r23, r25
    2a12:	8a 1f       	adc	r24, r26
    2a14:	91 1d       	adc	r25, r1
    2a16:	a1 1d       	adc	r26, r1
    2a18:	6a 0f       	add	r22, r26
    2a1a:	71 1d       	adc	r23, r1
    2a1c:	81 1d       	adc	r24, r1
    2a1e:	91 1d       	adc	r25, r1
    2a20:	a1 1d       	adc	r26, r1
    2a22:	20 d0       	rcall	.+64     	; 0x2a64 <__ultoa_invert+0x84>
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <__ultoa_invert+0x48>
    2a26:	68 94       	set
    2a28:	3f 91       	pop	r19
    2a2a:	2a e0       	ldi	r18, 0x0A	; 10
    2a2c:	26 9f       	mul	r18, r22
    2a2e:	11 24       	eor	r1, r1
    2a30:	30 19       	sub	r19, r0
    2a32:	30 5d       	subi	r19, 0xD0	; 208
    2a34:	31 93       	st	Z+, r19
    2a36:	de f6       	brtc	.-74     	; 0x29ee <__ultoa_invert+0xe>
    2a38:	cf 01       	movw	r24, r30
    2a3a:	08 95       	ret
    2a3c:	46 2f       	mov	r20, r22
    2a3e:	47 70       	andi	r20, 0x07	; 7
    2a40:	40 5d       	subi	r20, 0xD0	; 208
    2a42:	41 93       	st	Z+, r20
    2a44:	b3 e0       	ldi	r27, 0x03	; 3
    2a46:	0f d0       	rcall	.+30     	; 0x2a66 <__ultoa_invert+0x86>
    2a48:	c9 f7       	brne	.-14     	; 0x2a3c <__ultoa_invert+0x5c>
    2a4a:	f6 cf       	rjmp	.-20     	; 0x2a38 <__ultoa_invert+0x58>
    2a4c:	46 2f       	mov	r20, r22
    2a4e:	4f 70       	andi	r20, 0x0F	; 15
    2a50:	40 5d       	subi	r20, 0xD0	; 208
    2a52:	4a 33       	cpi	r20, 0x3A	; 58
    2a54:	18 f0       	brcs	.+6      	; 0x2a5c <__ultoa_invert+0x7c>
    2a56:	49 5d       	subi	r20, 0xD9	; 217
    2a58:	31 fd       	sbrc	r19, 1
    2a5a:	40 52       	subi	r20, 0x20	; 32
    2a5c:	41 93       	st	Z+, r20
    2a5e:	02 d0       	rcall	.+4      	; 0x2a64 <__ultoa_invert+0x84>
    2a60:	a9 f7       	brne	.-22     	; 0x2a4c <__ultoa_invert+0x6c>
    2a62:	ea cf       	rjmp	.-44     	; 0x2a38 <__ultoa_invert+0x58>
    2a64:	b4 e0       	ldi	r27, 0x04	; 4
    2a66:	a6 95       	lsr	r26
    2a68:	97 95       	ror	r25
    2a6a:	87 95       	ror	r24
    2a6c:	77 95       	ror	r23
    2a6e:	67 95       	ror	r22
    2a70:	ba 95       	dec	r27
    2a72:	c9 f7       	brne	.-14     	; 0x2a66 <__ultoa_invert+0x86>
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	61 05       	cpc	r22, r1
    2a78:	71 05       	cpc	r23, r1
    2a7a:	08 95       	ret
    2a7c:	9b 01       	movw	r18, r22
    2a7e:	ac 01       	movw	r20, r24
    2a80:	0a 2e       	mov	r0, r26
    2a82:	06 94       	lsr	r0
    2a84:	57 95       	ror	r21
    2a86:	47 95       	ror	r20
    2a88:	37 95       	ror	r19
    2a8a:	27 95       	ror	r18
    2a8c:	ba 95       	dec	r27
    2a8e:	c9 f7       	brne	.-14     	; 0x2a82 <__ultoa_invert+0xa2>
    2a90:	62 0f       	add	r22, r18
    2a92:	73 1f       	adc	r23, r19
    2a94:	84 1f       	adc	r24, r20
    2a96:	95 1f       	adc	r25, r21
    2a98:	a0 1d       	adc	r26, r0
    2a9a:	08 95       	ret

00002a9c <__prologue_saves__>:
    2a9c:	2f 92       	push	r2
    2a9e:	3f 92       	push	r3
    2aa0:	4f 92       	push	r4
    2aa2:	5f 92       	push	r5
    2aa4:	6f 92       	push	r6
    2aa6:	7f 92       	push	r7
    2aa8:	8f 92       	push	r8
    2aaa:	9f 92       	push	r9
    2aac:	af 92       	push	r10
    2aae:	bf 92       	push	r11
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	ca 1b       	sub	r28, r26
    2ac6:	db 0b       	sbc	r29, r27
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	09 94       	ijmp

00002ad4 <__epilogue_restores__>:
    2ad4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad6:	39 88       	ldd	r3, Y+17	; 0x11
    2ad8:	48 88       	ldd	r4, Y+16	; 0x10
    2ada:	5f 84       	ldd	r5, Y+15	; 0x0f
    2adc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ade:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ae8:	c8 84       	ldd	r12, Y+8	; 0x08
    2aea:	df 80       	ldd	r13, Y+7	; 0x07
    2aec:	ee 80       	ldd	r14, Y+6	; 0x06
    2aee:	fd 80       	ldd	r15, Y+5	; 0x05
    2af0:	0c 81       	ldd	r16, Y+4	; 0x04
    2af2:	1b 81       	ldd	r17, Y+3	; 0x03
    2af4:	aa 81       	ldd	r26, Y+2	; 0x02
    2af6:	b9 81       	ldd	r27, Y+1	; 0x01
    2af8:	ce 0f       	add	r28, r30
    2afa:	d1 1d       	adc	r29, r1
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	ed 01       	movw	r28, r26
    2b08:	08 95       	ret

00002b0a <_exit>:
    2b0a:	f8 94       	cli

00002b0c <__stop_program>:
    2b0c:	ff cf       	rjmp	.-2      	; 0x2b0c <__stop_program>
